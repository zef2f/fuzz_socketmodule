// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: socket_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_socket_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_socket_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_socket_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_socket_5fapi_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_socket_5fapi_2eproto;
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Command_Getaddrinfo;
struct Command_GetaddrinfoDefaultTypeInternal;
extern Command_GetaddrinfoDefaultTypeInternal _Command_Getaddrinfo_default_instance_;
class Command_Gethostbyaddr;
struct Command_GethostbyaddrDefaultTypeInternal;
extern Command_GethostbyaddrDefaultTypeInternal _Command_Gethostbyaddr_default_instance_;
class Command_Gethostbyname;
struct Command_GethostbynameDefaultTypeInternal;
extern Command_GethostbynameDefaultTypeInternal _Command_Gethostbyname_default_instance_;
class Command_GethostbynameEx;
struct Command_GethostbynameExDefaultTypeInternal;
extern Command_GethostbynameExDefaultTypeInternal _Command_GethostbynameEx_default_instance_;
class Command_Getnameinfo;
struct Command_GetnameinfoDefaultTypeInternal;
extern Command_GetnameinfoDefaultTypeInternal _Command_Getnameinfo_default_instance_;
class Command_Getservbyname;
struct Command_GetservbynameDefaultTypeInternal;
extern Command_GetservbynameDefaultTypeInternal _Command_Getservbyname_default_instance_;
class Command_Getservbyport;
struct Command_GetservbyportDefaultTypeInternal;
extern Command_GetservbyportDefaultTypeInternal _Command_Getservbyport_default_instance_;
class Command_Htonl;
struct Command_HtonlDefaultTypeInternal;
extern Command_HtonlDefaultTypeInternal _Command_Htonl_default_instance_;
class Command_Htons;
struct Command_HtonsDefaultTypeInternal;
extern Command_HtonsDefaultTypeInternal _Command_Htons_default_instance_;
class Command_IfIndextoname;
struct Command_IfIndextonameDefaultTypeInternal;
extern Command_IfIndextonameDefaultTypeInternal _Command_IfIndextoname_default_instance_;
class Command_IfNameindex;
struct Command_IfNameindexDefaultTypeInternal;
extern Command_IfNameindexDefaultTypeInternal _Command_IfNameindex_default_instance_;
class Command_IfNametoindex;
struct Command_IfNametoindexDefaultTypeInternal;
extern Command_IfNametoindexDefaultTypeInternal _Command_IfNametoindex_default_instance_;
class Command_InetAton;
struct Command_InetAtonDefaultTypeInternal;
extern Command_InetAtonDefaultTypeInternal _Command_InetAton_default_instance_;
class Command_InetNtoa;
struct Command_InetNtoaDefaultTypeInternal;
extern Command_InetNtoaDefaultTypeInternal _Command_InetNtoa_default_instance_;
class Command_InetNtop;
struct Command_InetNtopDefaultTypeInternal;
extern Command_InetNtopDefaultTypeInternal _Command_InetNtop_default_instance_;
class Command_InetPton;
struct Command_InetPtonDefaultTypeInternal;
extern Command_InetPtonDefaultTypeInternal _Command_InetPton_default_instance_;
class Command_Ntohl;
struct Command_NtohlDefaultTypeInternal;
extern Command_NtohlDefaultTypeInternal _Command_Ntohl_default_instance_;
class Command_Ntohs;
struct Command_NtohsDefaultTypeInternal;
extern Command_NtohsDefaultTypeInternal _Command_Ntohs_default_instance_;
class Command_SockAccept;
struct Command_SockAcceptDefaultTypeInternal;
extern Command_SockAcceptDefaultTypeInternal _Command_SockAccept_default_instance_;
class Command_SockBind;
struct Command_SockBindDefaultTypeInternal;
extern Command_SockBindDefaultTypeInternal _Command_SockBind_default_instance_;
class Command_SockClose;
struct Command_SockCloseDefaultTypeInternal;
extern Command_SockCloseDefaultTypeInternal _Command_SockClose_default_instance_;
class Command_SockConnect;
struct Command_SockConnectDefaultTypeInternal;
extern Command_SockConnectDefaultTypeInternal _Command_SockConnect_default_instance_;
class Command_SockConnectEx;
struct Command_SockConnectExDefaultTypeInternal;
extern Command_SockConnectExDefaultTypeInternal _Command_SockConnectEx_default_instance_;
class Command_SockDup;
struct Command_SockDupDefaultTypeInternal;
extern Command_SockDupDefaultTypeInternal _Command_SockDup_default_instance_;
class Command_SockGetsockopt;
struct Command_SockGetsockoptDefaultTypeInternal;
extern Command_SockGetsockoptDefaultTypeInternal _Command_SockGetsockopt_default_instance_;
class Command_SockListen;
struct Command_SockListenDefaultTypeInternal;
extern Command_SockListenDefaultTypeInternal _Command_SockListen_default_instance_;
class Command_SockRecv;
struct Command_SockRecvDefaultTypeInternal;
extern Command_SockRecvDefaultTypeInternal _Command_SockRecv_default_instance_;
class Command_SockRecvInto;
struct Command_SockRecvIntoDefaultTypeInternal;
extern Command_SockRecvIntoDefaultTypeInternal _Command_SockRecvInto_default_instance_;
class Command_SockRecvfrom;
struct Command_SockRecvfromDefaultTypeInternal;
extern Command_SockRecvfromDefaultTypeInternal _Command_SockRecvfrom_default_instance_;
class Command_SockRecvfromInto;
struct Command_SockRecvfromIntoDefaultTypeInternal;
extern Command_SockRecvfromIntoDefaultTypeInternal _Command_SockRecvfromInto_default_instance_;
class Command_SockRecvmsg;
struct Command_SockRecvmsgDefaultTypeInternal;
extern Command_SockRecvmsgDefaultTypeInternal _Command_SockRecvmsg_default_instance_;
class Command_SockRecvmsgInto;
struct Command_SockRecvmsgIntoDefaultTypeInternal;
extern Command_SockRecvmsgIntoDefaultTypeInternal _Command_SockRecvmsgInto_default_instance_;
class Command_SockSend;
struct Command_SockSendDefaultTypeInternal;
extern Command_SockSendDefaultTypeInternal _Command_SockSend_default_instance_;
class Command_SockSendall;
struct Command_SockSendallDefaultTypeInternal;
extern Command_SockSendallDefaultTypeInternal _Command_SockSendall_default_instance_;
class Command_SockSendmsg;
struct Command_SockSendmsgDefaultTypeInternal;
extern Command_SockSendmsgDefaultTypeInternal _Command_SockSendmsg_default_instance_;
class Command_SockSendto;
struct Command_SockSendtoDefaultTypeInternal;
extern Command_SockSendtoDefaultTypeInternal _Command_SockSendto_default_instance_;
class Command_SockSetblocking;
struct Command_SockSetblockingDefaultTypeInternal;
extern Command_SockSetblockingDefaultTypeInternal _Command_SockSetblocking_default_instance_;
class Command_SockSetsockopt;
struct Command_SockSetsockoptDefaultTypeInternal;
extern Command_SockSetsockoptDefaultTypeInternal _Command_SockSetsockopt_default_instance_;
class Command_SockSettimeout;
struct Command_SockSettimeoutDefaultTypeInternal;
extern Command_SockSettimeoutDefaultTypeInternal _Command_SockSettimeout_default_instance_;
class Command_SockShutdown;
struct Command_SockShutdownDefaultTypeInternal;
extern Command_SockShutdownDefaultTypeInternal _Command_SockShutdown_default_instance_;
class Command_SockSocket;
struct Command_SockSocketDefaultTypeInternal;
extern Command_SockSocketDefaultTypeInternal _Command_SockSocket_default_instance_;
class Command_SockSocketpair;
struct Command_SockSocketpairDefaultTypeInternal;
extern Command_SockSocketpairDefaultTypeInternal _Command_SockSocketpair_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Header_SockInit;
struct Header_SockInitDefaultTypeInternal;
extern Header_SockInitDefaultTypeInternal _Header_SockInit_default_instance_;
class Program;
struct ProgramDefaultTypeInternal;
extern ProgramDefaultTypeInternal _Program_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Command* Arena::CreateMaybeMessage<::Command>(Arena*);
template<> ::Command_Getaddrinfo* Arena::CreateMaybeMessage<::Command_Getaddrinfo>(Arena*);
template<> ::Command_Gethostbyaddr* Arena::CreateMaybeMessage<::Command_Gethostbyaddr>(Arena*);
template<> ::Command_Gethostbyname* Arena::CreateMaybeMessage<::Command_Gethostbyname>(Arena*);
template<> ::Command_GethostbynameEx* Arena::CreateMaybeMessage<::Command_GethostbynameEx>(Arena*);
template<> ::Command_Getnameinfo* Arena::CreateMaybeMessage<::Command_Getnameinfo>(Arena*);
template<> ::Command_Getservbyname* Arena::CreateMaybeMessage<::Command_Getservbyname>(Arena*);
template<> ::Command_Getservbyport* Arena::CreateMaybeMessage<::Command_Getservbyport>(Arena*);
template<> ::Command_Htonl* Arena::CreateMaybeMessage<::Command_Htonl>(Arena*);
template<> ::Command_Htons* Arena::CreateMaybeMessage<::Command_Htons>(Arena*);
template<> ::Command_IfIndextoname* Arena::CreateMaybeMessage<::Command_IfIndextoname>(Arena*);
template<> ::Command_IfNameindex* Arena::CreateMaybeMessage<::Command_IfNameindex>(Arena*);
template<> ::Command_IfNametoindex* Arena::CreateMaybeMessage<::Command_IfNametoindex>(Arena*);
template<> ::Command_InetAton* Arena::CreateMaybeMessage<::Command_InetAton>(Arena*);
template<> ::Command_InetNtoa* Arena::CreateMaybeMessage<::Command_InetNtoa>(Arena*);
template<> ::Command_InetNtop* Arena::CreateMaybeMessage<::Command_InetNtop>(Arena*);
template<> ::Command_InetPton* Arena::CreateMaybeMessage<::Command_InetPton>(Arena*);
template<> ::Command_Ntohl* Arena::CreateMaybeMessage<::Command_Ntohl>(Arena*);
template<> ::Command_Ntohs* Arena::CreateMaybeMessage<::Command_Ntohs>(Arena*);
template<> ::Command_SockAccept* Arena::CreateMaybeMessage<::Command_SockAccept>(Arena*);
template<> ::Command_SockBind* Arena::CreateMaybeMessage<::Command_SockBind>(Arena*);
template<> ::Command_SockClose* Arena::CreateMaybeMessage<::Command_SockClose>(Arena*);
template<> ::Command_SockConnect* Arena::CreateMaybeMessage<::Command_SockConnect>(Arena*);
template<> ::Command_SockConnectEx* Arena::CreateMaybeMessage<::Command_SockConnectEx>(Arena*);
template<> ::Command_SockDup* Arena::CreateMaybeMessage<::Command_SockDup>(Arena*);
template<> ::Command_SockGetsockopt* Arena::CreateMaybeMessage<::Command_SockGetsockopt>(Arena*);
template<> ::Command_SockListen* Arena::CreateMaybeMessage<::Command_SockListen>(Arena*);
template<> ::Command_SockRecv* Arena::CreateMaybeMessage<::Command_SockRecv>(Arena*);
template<> ::Command_SockRecvInto* Arena::CreateMaybeMessage<::Command_SockRecvInto>(Arena*);
template<> ::Command_SockRecvfrom* Arena::CreateMaybeMessage<::Command_SockRecvfrom>(Arena*);
template<> ::Command_SockRecvfromInto* Arena::CreateMaybeMessage<::Command_SockRecvfromInto>(Arena*);
template<> ::Command_SockRecvmsg* Arena::CreateMaybeMessage<::Command_SockRecvmsg>(Arena*);
template<> ::Command_SockRecvmsgInto* Arena::CreateMaybeMessage<::Command_SockRecvmsgInto>(Arena*);
template<> ::Command_SockSend* Arena::CreateMaybeMessage<::Command_SockSend>(Arena*);
template<> ::Command_SockSendall* Arena::CreateMaybeMessage<::Command_SockSendall>(Arena*);
template<> ::Command_SockSendmsg* Arena::CreateMaybeMessage<::Command_SockSendmsg>(Arena*);
template<> ::Command_SockSendto* Arena::CreateMaybeMessage<::Command_SockSendto>(Arena*);
template<> ::Command_SockSetblocking* Arena::CreateMaybeMessage<::Command_SockSetblocking>(Arena*);
template<> ::Command_SockSetsockopt* Arena::CreateMaybeMessage<::Command_SockSetsockopt>(Arena*);
template<> ::Command_SockSettimeout* Arena::CreateMaybeMessage<::Command_SockSettimeout>(Arena*);
template<> ::Command_SockShutdown* Arena::CreateMaybeMessage<::Command_SockShutdown>(Arena*);
template<> ::Command_SockSocket* Arena::CreateMaybeMessage<::Command_SockSocket>(Arena*);
template<> ::Command_SockSocketpair* Arena::CreateMaybeMessage<::Command_SockSocketpair>(Arena*);
template<> ::Header* Arena::CreateMaybeMessage<::Header>(Arena*);
template<> ::Header_SockInit* Arena::CreateMaybeMessage<::Header_SockInit>(Arena*);
template<> ::Program* Arena::CreateMaybeMessage<::Program>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Header_SockInit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Header.SockInit) */ {
 public:
  inline Header_SockInit() : Header_SockInit(nullptr) {}
  ~Header_SockInit() override;
  explicit PROTOBUF_CONSTEXPR Header_SockInit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header_SockInit(const Header_SockInit& from);
  Header_SockInit(Header_SockInit&& from) noexcept
    : Header_SockInit() {
    *this = ::std::move(from);
  }

  inline Header_SockInit& operator=(const Header_SockInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header_SockInit& operator=(Header_SockInit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header_SockInit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header_SockInit* internal_default_instance() {
    return reinterpret_cast<const Header_SockInit*>(
               &_Header_SockInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header_SockInit& a, Header_SockInit& b) {
    a.Swap(&b);
  }
  inline void Swap(Header_SockInit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header_SockInit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header_SockInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header_SockInit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header_SockInit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Header_SockInit& from) {
    Header_SockInit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header_SockInit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Header.SockInit";
  }
  protected:
  explicit Header_SockInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreloadSendFieldNumber = 4,
    kIdFieldNumber = 1,
    kFamilyFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // bytes preload_send = 4;
  void clear_preload_send();
  const std::string& preload_send() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_preload_send(ArgT0&& arg0, ArgT... args);
  std::string* mutable_preload_send();
  PROTOBUF_NODISCARD std::string* release_preload_send();
  void set_allocated_preload_send(std::string* preload_send);
  private:
  const std::string& _internal_preload_send() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_preload_send(const std::string& value);
  std::string* _internal_mutable_preload_send();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 family = 2;
  void clear_family();
  uint32_t family() const;
  void set_family(uint32_t value);
  private:
  uint32_t _internal_family() const;
  void _internal_set_family(uint32_t value);
  public:

  // uint32 type = 3;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Header.SockInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preload_send_;
    uint32_t id_;
    uint32_t family_;
    uint32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit PROTOBUF_CONSTEXPR Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Header& from) {
    Header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Header_SockInit SockInit;

  // accessors -------------------------------------------------------

  enum : int {
    kSocksFieldNumber = 1,
  };
  // repeated .Header.SockInit socks = 1;
  int socks_size() const;
  private:
  int _internal_socks_size() const;
  public:
  void clear_socks();
  ::Header_SockInit* mutable_socks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Header_SockInit >*
      mutable_socks();
  private:
  const ::Header_SockInit& _internal_socks(int index) const;
  ::Header_SockInit* _internal_add_socks();
  public:
  const ::Header_SockInit& socks(int index) const;
  ::Header_SockInit* add_socks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Header_SockInit >&
      socks() const;

  // @@protoc_insertion_point(class_scope:Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Header_SockInit > socks_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockSocket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockSocket) */ {
 public:
  inline Command_SockSocket() : Command_SockSocket(nullptr) {}
  ~Command_SockSocket() override;
  explicit PROTOBUF_CONSTEXPR Command_SockSocket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockSocket(const Command_SockSocket& from);
  Command_SockSocket(Command_SockSocket&& from) noexcept
    : Command_SockSocket() {
    *this = ::std::move(from);
  }

  inline Command_SockSocket& operator=(const Command_SockSocket& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockSocket& operator=(Command_SockSocket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockSocket& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockSocket* internal_default_instance() {
    return reinterpret_cast<const Command_SockSocket*>(
               &_Command_SockSocket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Command_SockSocket& a, Command_SockSocket& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockSocket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockSocket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockSocket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockSocket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockSocket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockSocket& from) {
    Command_SockSocket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockSocket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockSocket";
  }
  protected:
  explicit Command_SockSocket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyFieldNumber = 1,
    kTypeFieldNumber = 2,
    kProtoFieldNumber = 3,
    kTargetIdFieldNumber = 4,
  };
  // uint32 family = 1;
  void clear_family();
  uint32_t family() const;
  void set_family(uint32_t value);
  private:
  uint32_t _internal_family() const;
  void _internal_set_family(uint32_t value);
  public:

  // uint32 type = 2;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 proto = 3;
  void clear_proto();
  uint32_t proto() const;
  void set_proto(uint32_t value);
  private:
  uint32_t _internal_proto() const;
  void _internal_set_proto(uint32_t value);
  public:

  // uint32 target_id = 4;
  void clear_target_id();
  uint32_t target_id() const;
  void set_target_id(uint32_t value);
  private:
  uint32_t _internal_target_id() const;
  void _internal_set_target_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockSocket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t family_;
    uint32_t type_;
    uint32_t proto_;
    uint32_t target_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockSocketpair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockSocketpair) */ {
 public:
  inline Command_SockSocketpair() : Command_SockSocketpair(nullptr) {}
  ~Command_SockSocketpair() override;
  explicit PROTOBUF_CONSTEXPR Command_SockSocketpair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockSocketpair(const Command_SockSocketpair& from);
  Command_SockSocketpair(Command_SockSocketpair&& from) noexcept
    : Command_SockSocketpair() {
    *this = ::std::move(from);
  }

  inline Command_SockSocketpair& operator=(const Command_SockSocketpair& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockSocketpair& operator=(Command_SockSocketpair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockSocketpair& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockSocketpair* internal_default_instance() {
    return reinterpret_cast<const Command_SockSocketpair*>(
               &_Command_SockSocketpair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Command_SockSocketpair& a, Command_SockSocketpair& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockSocketpair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockSocketpair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockSocketpair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockSocketpair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockSocketpair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockSocketpair& from) {
    Command_SockSocketpair::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockSocketpair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockSocketpair";
  }
  protected:
  explicit Command_SockSocketpair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyFieldNumber = 1,
    kTypeFieldNumber = 2,
    kProtoFieldNumber = 3,
    kId1FieldNumber = 4,
    kId2FieldNumber = 5,
  };
  // uint32 family = 1;
  void clear_family();
  uint32_t family() const;
  void set_family(uint32_t value);
  private:
  uint32_t _internal_family() const;
  void _internal_set_family(uint32_t value);
  public:

  // uint32 type = 2;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 proto = 3;
  void clear_proto();
  uint32_t proto() const;
  void set_proto(uint32_t value);
  private:
  uint32_t _internal_proto() const;
  void _internal_set_proto(uint32_t value);
  public:

  // uint32 id1 = 4;
  void clear_id1();
  uint32_t id1() const;
  void set_id1(uint32_t value);
  private:
  uint32_t _internal_id1() const;
  void _internal_set_id1(uint32_t value);
  public:

  // uint32 id2 = 5;
  void clear_id2();
  uint32_t id2() const;
  void set_id2(uint32_t value);
  private:
  uint32_t _internal_id2() const;
  void _internal_set_id2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockSocketpair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t family_;
    uint32_t type_;
    uint32_t proto_;
    uint32_t id1_;
    uint32_t id2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockDup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockDup) */ {
 public:
  inline Command_SockDup() : Command_SockDup(nullptr) {}
  ~Command_SockDup() override;
  explicit PROTOBUF_CONSTEXPR Command_SockDup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockDup(const Command_SockDup& from);
  Command_SockDup(Command_SockDup&& from) noexcept
    : Command_SockDup() {
    *this = ::std::move(from);
  }

  inline Command_SockDup& operator=(const Command_SockDup& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockDup& operator=(Command_SockDup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockDup& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockDup* internal_default_instance() {
    return reinterpret_cast<const Command_SockDup*>(
               &_Command_SockDup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Command_SockDup& a, Command_SockDup& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockDup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockDup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockDup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockDup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockDup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockDup& from) {
    Command_SockDup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockDup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockDup";
  }
  protected:
  explicit Command_SockDup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcIdFieldNumber = 1,
    kDstIdFieldNumber = 2,
  };
  // uint32 src_id = 1;
  void clear_src_id();
  uint32_t src_id() const;
  void set_src_id(uint32_t value);
  private:
  uint32_t _internal_src_id() const;
  void _internal_set_src_id(uint32_t value);
  public:

  // uint32 dst_id = 2;
  void clear_dst_id();
  uint32_t dst_id() const;
  void set_dst_id(uint32_t value);
  private:
  uint32_t _internal_dst_id() const;
  void _internal_set_dst_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockDup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t src_id_;
    uint32_t dst_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockClose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockClose) */ {
 public:
  inline Command_SockClose() : Command_SockClose(nullptr) {}
  ~Command_SockClose() override;
  explicit PROTOBUF_CONSTEXPR Command_SockClose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockClose(const Command_SockClose& from);
  Command_SockClose(Command_SockClose&& from) noexcept
    : Command_SockClose() {
    *this = ::std::move(from);
  }

  inline Command_SockClose& operator=(const Command_SockClose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockClose& operator=(Command_SockClose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockClose& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockClose* internal_default_instance() {
    return reinterpret_cast<const Command_SockClose*>(
               &_Command_SockClose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Command_SockClose& a, Command_SockClose& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockClose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockClose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockClose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockClose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockClose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockClose& from) {
    Command_SockClose::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockClose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockClose";
  }
  protected:
  explicit Command_SockClose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockClose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_InetPton final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.InetPton) */ {
 public:
  inline Command_InetPton() : Command_InetPton(nullptr) {}
  ~Command_InetPton() override;
  explicit PROTOBUF_CONSTEXPR Command_InetPton(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_InetPton(const Command_InetPton& from);
  Command_InetPton(Command_InetPton&& from) noexcept
    : Command_InetPton() {
    *this = ::std::move(from);
  }

  inline Command_InetPton& operator=(const Command_InetPton& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_InetPton& operator=(Command_InetPton&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_InetPton& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_InetPton* internal_default_instance() {
    return reinterpret_cast<const Command_InetPton*>(
               &_Command_InetPton_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Command_InetPton& a, Command_InetPton& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_InetPton* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_InetPton* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_InetPton* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_InetPton>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_InetPton& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_InetPton& from) {
    Command_InetPton::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_InetPton* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.InetPton";
  }
  protected:
  explicit Command_InetPton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kFamilyFieldNumber = 1,
  };
  // string text = 2;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // uint32 family = 1;
  void clear_family();
  uint32_t family() const;
  void set_family(uint32_t value);
  private:
  uint32_t _internal_family() const;
  void _internal_set_family(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.InetPton)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    uint32_t family_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_InetNtop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.InetNtop) */ {
 public:
  inline Command_InetNtop() : Command_InetNtop(nullptr) {}
  ~Command_InetNtop() override;
  explicit PROTOBUF_CONSTEXPR Command_InetNtop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_InetNtop(const Command_InetNtop& from);
  Command_InetNtop(Command_InetNtop&& from) noexcept
    : Command_InetNtop() {
    *this = ::std::move(from);
  }

  inline Command_InetNtop& operator=(const Command_InetNtop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_InetNtop& operator=(Command_InetNtop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_InetNtop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_InetNtop* internal_default_instance() {
    return reinterpret_cast<const Command_InetNtop*>(
               &_Command_InetNtop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Command_InetNtop& a, Command_InetNtop& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_InetNtop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_InetNtop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_InetNtop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_InetNtop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_InetNtop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_InetNtop& from) {
    Command_InetNtop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_InetNtop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.InetNtop";
  }
  protected:
  explicit Command_InetNtop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackedFieldNumber = 2,
    kFamilyFieldNumber = 1,
  };
  // bytes packed = 2;
  void clear_packed();
  const std::string& packed() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_packed(ArgT0&& arg0, ArgT... args);
  std::string* mutable_packed();
  PROTOBUF_NODISCARD std::string* release_packed();
  void set_allocated_packed(std::string* packed);
  private:
  const std::string& _internal_packed() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_packed(const std::string& value);
  std::string* _internal_mutable_packed();
  public:

  // uint32 family = 1;
  void clear_family();
  uint32_t family() const;
  void set_family(uint32_t value);
  private:
  uint32_t _internal_family() const;
  void _internal_set_family(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.InetNtop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packed_;
    uint32_t family_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_InetAton final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.InetAton) */ {
 public:
  inline Command_InetAton() : Command_InetAton(nullptr) {}
  ~Command_InetAton() override;
  explicit PROTOBUF_CONSTEXPR Command_InetAton(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_InetAton(const Command_InetAton& from);
  Command_InetAton(Command_InetAton&& from) noexcept
    : Command_InetAton() {
    *this = ::std::move(from);
  }

  inline Command_InetAton& operator=(const Command_InetAton& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_InetAton& operator=(Command_InetAton&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_InetAton& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_InetAton* internal_default_instance() {
    return reinterpret_cast<const Command_InetAton*>(
               &_Command_InetAton_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Command_InetAton& a, Command_InetAton& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_InetAton* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_InetAton* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_InetAton* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_InetAton>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_InetAton& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_InetAton& from) {
    Command_InetAton::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_InetAton* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.InetAton";
  }
  protected:
  explicit Command_InetAton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:Command.InetAton)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_InetNtoa final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.InetNtoa) */ {
 public:
  inline Command_InetNtoa() : Command_InetNtoa(nullptr) {}
  ~Command_InetNtoa() override;
  explicit PROTOBUF_CONSTEXPR Command_InetNtoa(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_InetNtoa(const Command_InetNtoa& from);
  Command_InetNtoa(Command_InetNtoa&& from) noexcept
    : Command_InetNtoa() {
    *this = ::std::move(from);
  }

  inline Command_InetNtoa& operator=(const Command_InetNtoa& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_InetNtoa& operator=(Command_InetNtoa&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_InetNtoa& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_InetNtoa* internal_default_instance() {
    return reinterpret_cast<const Command_InetNtoa*>(
               &_Command_InetNtoa_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Command_InetNtoa& a, Command_InetNtoa& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_InetNtoa* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_InetNtoa* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_InetNtoa* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_InetNtoa>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_InetNtoa& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_InetNtoa& from) {
    Command_InetNtoa::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_InetNtoa* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.InetNtoa";
  }
  protected:
  explicit Command_InetNtoa(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackedFieldNumber = 1,
  };
  // bytes packed = 1;
  void clear_packed();
  const std::string& packed() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_packed(ArgT0&& arg0, ArgT... args);
  std::string* mutable_packed();
  PROTOBUF_NODISCARD std::string* release_packed();
  void set_allocated_packed(std::string* packed);
  private:
  const std::string& _internal_packed() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_packed(const std::string& value);
  std::string* _internal_mutable_packed();
  public:

  // @@protoc_insertion_point(class_scope:Command.InetNtoa)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_Htons final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.Htons) */ {
 public:
  inline Command_Htons() : Command_Htons(nullptr) {}
  ~Command_Htons() override;
  explicit PROTOBUF_CONSTEXPR Command_Htons(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Htons(const Command_Htons& from);
  Command_Htons(Command_Htons&& from) noexcept
    : Command_Htons() {
    *this = ::std::move(from);
  }

  inline Command_Htons& operator=(const Command_Htons& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Htons& operator=(Command_Htons&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Htons& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Htons* internal_default_instance() {
    return reinterpret_cast<const Command_Htons*>(
               &_Command_Htons_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Command_Htons& a, Command_Htons& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Htons* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Htons* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Htons* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Htons>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Htons& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_Htons& from) {
    Command_Htons::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Htons* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.Htons";
  }
  protected:
  explicit Command_Htons(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // uint32 val = 1;
  void clear_val();
  uint32_t val() const;
  void set_val(uint32_t value);
  private:
  uint32_t _internal_val() const;
  void _internal_set_val(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.Htons)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t val_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_Htonl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.Htonl) */ {
 public:
  inline Command_Htonl() : Command_Htonl(nullptr) {}
  ~Command_Htonl() override;
  explicit PROTOBUF_CONSTEXPR Command_Htonl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Htonl(const Command_Htonl& from);
  Command_Htonl(Command_Htonl&& from) noexcept
    : Command_Htonl() {
    *this = ::std::move(from);
  }

  inline Command_Htonl& operator=(const Command_Htonl& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Htonl& operator=(Command_Htonl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Htonl& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Htonl* internal_default_instance() {
    return reinterpret_cast<const Command_Htonl*>(
               &_Command_Htonl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Command_Htonl& a, Command_Htonl& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Htonl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Htonl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Htonl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Htonl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Htonl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_Htonl& from) {
    Command_Htonl::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Htonl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.Htonl";
  }
  protected:
  explicit Command_Htonl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // uint32 val = 1;
  void clear_val();
  uint32_t val() const;
  void set_val(uint32_t value);
  private:
  uint32_t _internal_val() const;
  void _internal_set_val(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.Htonl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t val_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_Ntohs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.Ntohs) */ {
 public:
  inline Command_Ntohs() : Command_Ntohs(nullptr) {}
  ~Command_Ntohs() override;
  explicit PROTOBUF_CONSTEXPR Command_Ntohs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Ntohs(const Command_Ntohs& from);
  Command_Ntohs(Command_Ntohs&& from) noexcept
    : Command_Ntohs() {
    *this = ::std::move(from);
  }

  inline Command_Ntohs& operator=(const Command_Ntohs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Ntohs& operator=(Command_Ntohs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Ntohs& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Ntohs* internal_default_instance() {
    return reinterpret_cast<const Command_Ntohs*>(
               &_Command_Ntohs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Command_Ntohs& a, Command_Ntohs& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Ntohs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Ntohs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Ntohs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Ntohs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Ntohs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_Ntohs& from) {
    Command_Ntohs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Ntohs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.Ntohs";
  }
  protected:
  explicit Command_Ntohs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // uint32 val = 1;
  void clear_val();
  uint32_t val() const;
  void set_val(uint32_t value);
  private:
  uint32_t _internal_val() const;
  void _internal_set_val(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.Ntohs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t val_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_Ntohl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.Ntohl) */ {
 public:
  inline Command_Ntohl() : Command_Ntohl(nullptr) {}
  ~Command_Ntohl() override;
  explicit PROTOBUF_CONSTEXPR Command_Ntohl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Ntohl(const Command_Ntohl& from);
  Command_Ntohl(Command_Ntohl&& from) noexcept
    : Command_Ntohl() {
    *this = ::std::move(from);
  }

  inline Command_Ntohl& operator=(const Command_Ntohl& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Ntohl& operator=(Command_Ntohl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Ntohl& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Ntohl* internal_default_instance() {
    return reinterpret_cast<const Command_Ntohl*>(
               &_Command_Ntohl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Command_Ntohl& a, Command_Ntohl& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Ntohl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Ntohl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Ntohl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Ntohl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Ntohl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_Ntohl& from) {
    Command_Ntohl::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Ntohl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.Ntohl";
  }
  protected:
  explicit Command_Ntohl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
  };
  // uint32 val = 1;
  void clear_val();
  uint32_t val() const;
  void set_val(uint32_t value);
  private:
  uint32_t _internal_val() const;
  void _internal_set_val(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.Ntohl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t val_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_Getaddrinfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.Getaddrinfo) */ {
 public:
  inline Command_Getaddrinfo() : Command_Getaddrinfo(nullptr) {}
  ~Command_Getaddrinfo() override;
  explicit PROTOBUF_CONSTEXPR Command_Getaddrinfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Getaddrinfo(const Command_Getaddrinfo& from);
  Command_Getaddrinfo(Command_Getaddrinfo&& from) noexcept
    : Command_Getaddrinfo() {
    *this = ::std::move(from);
  }

  inline Command_Getaddrinfo& operator=(const Command_Getaddrinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Getaddrinfo& operator=(Command_Getaddrinfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Getaddrinfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Getaddrinfo* internal_default_instance() {
    return reinterpret_cast<const Command_Getaddrinfo*>(
               &_Command_Getaddrinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Command_Getaddrinfo& a, Command_Getaddrinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Getaddrinfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Getaddrinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Getaddrinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Getaddrinfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Getaddrinfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_Getaddrinfo& from) {
    Command_Getaddrinfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Getaddrinfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.Getaddrinfo";
  }
  protected:
  explicit Command_Getaddrinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kServiceFieldNumber = 2,
    kFamilyFieldNumber = 3,
    kTypeFieldNumber = 4,
    kProtoFieldNumber = 5,
    kFlagsFieldNumber = 6,
  };
  // string host = 1;
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // string service = 2;
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // uint32 family = 3;
  void clear_family();
  uint32_t family() const;
  void set_family(uint32_t value);
  private:
  uint32_t _internal_family() const;
  void _internal_set_family(uint32_t value);
  public:

  // uint32 type = 4;
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // uint32 proto = 5;
  void clear_proto();
  uint32_t proto() const;
  void set_proto(uint32_t value);
  private:
  uint32_t _internal_proto() const;
  void _internal_set_proto(uint32_t value);
  public:

  // uint32 flags = 6;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.Getaddrinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    uint32_t family_;
    uint32_t type_;
    uint32_t proto_;
    uint32_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_Getnameinfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.Getnameinfo) */ {
 public:
  inline Command_Getnameinfo() : Command_Getnameinfo(nullptr) {}
  ~Command_Getnameinfo() override;
  explicit PROTOBUF_CONSTEXPR Command_Getnameinfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Getnameinfo(const Command_Getnameinfo& from);
  Command_Getnameinfo(Command_Getnameinfo&& from) noexcept
    : Command_Getnameinfo() {
    *this = ::std::move(from);
  }

  inline Command_Getnameinfo& operator=(const Command_Getnameinfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Getnameinfo& operator=(Command_Getnameinfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Getnameinfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Getnameinfo* internal_default_instance() {
    return reinterpret_cast<const Command_Getnameinfo*>(
               &_Command_Getnameinfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Command_Getnameinfo& a, Command_Getnameinfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Getnameinfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Getnameinfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Getnameinfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Getnameinfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Getnameinfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_Getnameinfo& from) {
    Command_Getnameinfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Getnameinfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.Getnameinfo";
  }
  protected:
  explicit Command_Getnameinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSockaddrFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // bytes sockaddr = 1;
  void clear_sockaddr();
  const std::string& sockaddr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sockaddr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sockaddr();
  PROTOBUF_NODISCARD std::string* release_sockaddr();
  void set_allocated_sockaddr(std::string* sockaddr);
  private:
  const std::string& _internal_sockaddr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sockaddr(const std::string& value);
  std::string* _internal_mutable_sockaddr();
  public:

  // uint32 flags = 2;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.Getnameinfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sockaddr_;
    uint32_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_IfNameindex final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Command.IfNameindex) */ {
 public:
  inline Command_IfNameindex() : Command_IfNameindex(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Command_IfNameindex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_IfNameindex(const Command_IfNameindex& from);
  Command_IfNameindex(Command_IfNameindex&& from) noexcept
    : Command_IfNameindex() {
    *this = ::std::move(from);
  }

  inline Command_IfNameindex& operator=(const Command_IfNameindex& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_IfNameindex& operator=(Command_IfNameindex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_IfNameindex& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_IfNameindex* internal_default_instance() {
    return reinterpret_cast<const Command_IfNameindex*>(
               &_Command_IfNameindex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Command_IfNameindex& a, Command_IfNameindex& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_IfNameindex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_IfNameindex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_IfNameindex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_IfNameindex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Command_IfNameindex& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Command_IfNameindex& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.IfNameindex";
  }
  protected:
  explicit Command_IfNameindex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Command.IfNameindex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_IfNametoindex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.IfNametoindex) */ {
 public:
  inline Command_IfNametoindex() : Command_IfNametoindex(nullptr) {}
  ~Command_IfNametoindex() override;
  explicit PROTOBUF_CONSTEXPR Command_IfNametoindex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_IfNametoindex(const Command_IfNametoindex& from);
  Command_IfNametoindex(Command_IfNametoindex&& from) noexcept
    : Command_IfNametoindex() {
    *this = ::std::move(from);
  }

  inline Command_IfNametoindex& operator=(const Command_IfNametoindex& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_IfNametoindex& operator=(Command_IfNametoindex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_IfNametoindex& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_IfNametoindex* internal_default_instance() {
    return reinterpret_cast<const Command_IfNametoindex*>(
               &_Command_IfNametoindex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Command_IfNametoindex& a, Command_IfNametoindex& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_IfNametoindex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_IfNametoindex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_IfNametoindex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_IfNametoindex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_IfNametoindex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_IfNametoindex& from) {
    Command_IfNametoindex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_IfNametoindex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.IfNametoindex";
  }
  protected:
  explicit Command_IfNametoindex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Command.IfNametoindex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_IfIndextoname final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.IfIndextoname) */ {
 public:
  inline Command_IfIndextoname() : Command_IfIndextoname(nullptr) {}
  ~Command_IfIndextoname() override;
  explicit PROTOBUF_CONSTEXPR Command_IfIndextoname(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_IfIndextoname(const Command_IfIndextoname& from);
  Command_IfIndextoname(Command_IfIndextoname&& from) noexcept
    : Command_IfIndextoname() {
    *this = ::std::move(from);
  }

  inline Command_IfIndextoname& operator=(const Command_IfIndextoname& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_IfIndextoname& operator=(Command_IfIndextoname&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_IfIndextoname& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_IfIndextoname* internal_default_instance() {
    return reinterpret_cast<const Command_IfIndextoname*>(
               &_Command_IfIndextoname_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Command_IfIndextoname& a, Command_IfIndextoname& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_IfIndextoname* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_IfIndextoname* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_IfIndextoname* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_IfIndextoname>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_IfIndextoname& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_IfIndextoname& from) {
    Command_IfIndextoname::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_IfIndextoname* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.IfIndextoname";
  }
  protected:
  explicit Command_IfIndextoname(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // uint32 index = 1;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.IfIndextoname)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_Gethostbyname final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.Gethostbyname) */ {
 public:
  inline Command_Gethostbyname() : Command_Gethostbyname(nullptr) {}
  ~Command_Gethostbyname() override;
  explicit PROTOBUF_CONSTEXPR Command_Gethostbyname(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Gethostbyname(const Command_Gethostbyname& from);
  Command_Gethostbyname(Command_Gethostbyname&& from) noexcept
    : Command_Gethostbyname() {
    *this = ::std::move(from);
  }

  inline Command_Gethostbyname& operator=(const Command_Gethostbyname& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Gethostbyname& operator=(Command_Gethostbyname&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Gethostbyname& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Gethostbyname* internal_default_instance() {
    return reinterpret_cast<const Command_Gethostbyname*>(
               &_Command_Gethostbyname_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Command_Gethostbyname& a, Command_Gethostbyname& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Gethostbyname* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Gethostbyname* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Gethostbyname* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Gethostbyname>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Gethostbyname& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_Gethostbyname& from) {
    Command_Gethostbyname::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Gethostbyname* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.Gethostbyname";
  }
  protected:
  explicit Command_Gethostbyname(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Command.Gethostbyname)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_GethostbynameEx final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.GethostbynameEx) */ {
 public:
  inline Command_GethostbynameEx() : Command_GethostbynameEx(nullptr) {}
  ~Command_GethostbynameEx() override;
  explicit PROTOBUF_CONSTEXPR Command_GethostbynameEx(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_GethostbynameEx(const Command_GethostbynameEx& from);
  Command_GethostbynameEx(Command_GethostbynameEx&& from) noexcept
    : Command_GethostbynameEx() {
    *this = ::std::move(from);
  }

  inline Command_GethostbynameEx& operator=(const Command_GethostbynameEx& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_GethostbynameEx& operator=(Command_GethostbynameEx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_GethostbynameEx& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_GethostbynameEx* internal_default_instance() {
    return reinterpret_cast<const Command_GethostbynameEx*>(
               &_Command_GethostbynameEx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Command_GethostbynameEx& a, Command_GethostbynameEx& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_GethostbynameEx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_GethostbynameEx* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_GethostbynameEx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_GethostbynameEx>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_GethostbynameEx& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_GethostbynameEx& from) {
    Command_GethostbynameEx::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_GethostbynameEx* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.GethostbynameEx";
  }
  protected:
  explicit Command_GethostbynameEx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Command.GethostbynameEx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_Gethostbyaddr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.Gethostbyaddr) */ {
 public:
  inline Command_Gethostbyaddr() : Command_Gethostbyaddr(nullptr) {}
  ~Command_Gethostbyaddr() override;
  explicit PROTOBUF_CONSTEXPR Command_Gethostbyaddr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Gethostbyaddr(const Command_Gethostbyaddr& from);
  Command_Gethostbyaddr(Command_Gethostbyaddr&& from) noexcept
    : Command_Gethostbyaddr() {
    *this = ::std::move(from);
  }

  inline Command_Gethostbyaddr& operator=(const Command_Gethostbyaddr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Gethostbyaddr& operator=(Command_Gethostbyaddr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Gethostbyaddr& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Gethostbyaddr* internal_default_instance() {
    return reinterpret_cast<const Command_Gethostbyaddr*>(
               &_Command_Gethostbyaddr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Command_Gethostbyaddr& a, Command_Gethostbyaddr& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Gethostbyaddr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Gethostbyaddr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Gethostbyaddr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Gethostbyaddr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Gethostbyaddr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_Gethostbyaddr& from) {
    Command_Gethostbyaddr::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Gethostbyaddr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.Gethostbyaddr";
  }
  protected:
  explicit Command_Gethostbyaddr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
  };
  // string addr = 1;
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // @@protoc_insertion_point(class_scope:Command.Gethostbyaddr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_Getservbyname final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.Getservbyname) */ {
 public:
  inline Command_Getservbyname() : Command_Getservbyname(nullptr) {}
  ~Command_Getservbyname() override;
  explicit PROTOBUF_CONSTEXPR Command_Getservbyname(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Getservbyname(const Command_Getservbyname& from);
  Command_Getservbyname(Command_Getservbyname&& from) noexcept
    : Command_Getservbyname() {
    *this = ::std::move(from);
  }

  inline Command_Getservbyname& operator=(const Command_Getservbyname& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Getservbyname& operator=(Command_Getservbyname&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Getservbyname& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Getservbyname* internal_default_instance() {
    return reinterpret_cast<const Command_Getservbyname*>(
               &_Command_Getservbyname_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Command_Getservbyname& a, Command_Getservbyname& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Getservbyname* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Getservbyname* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Getservbyname* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Getservbyname>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Getservbyname& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_Getservbyname& from) {
    Command_Getservbyname::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Getservbyname* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.Getservbyname";
  }
  protected:
  explicit Command_Getservbyname(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kProtoFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string proto = 2;
  void clear_proto();
  const std::string& proto() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto();
  PROTOBUF_NODISCARD std::string* release_proto();
  void set_allocated_proto(std::string* proto);
  private:
  const std::string& _internal_proto() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto(const std::string& value);
  std::string* _internal_mutable_proto();
  public:

  // @@protoc_insertion_point(class_scope:Command.Getservbyname)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_Getservbyport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.Getservbyport) */ {
 public:
  inline Command_Getservbyport() : Command_Getservbyport(nullptr) {}
  ~Command_Getservbyport() override;
  explicit PROTOBUF_CONSTEXPR Command_Getservbyport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_Getservbyport(const Command_Getservbyport& from);
  Command_Getservbyport(Command_Getservbyport&& from) noexcept
    : Command_Getservbyport() {
    *this = ::std::move(from);
  }

  inline Command_Getservbyport& operator=(const Command_Getservbyport& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_Getservbyport& operator=(Command_Getservbyport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_Getservbyport& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_Getservbyport* internal_default_instance() {
    return reinterpret_cast<const Command_Getservbyport*>(
               &_Command_Getservbyport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Command_Getservbyport& a, Command_Getservbyport& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_Getservbyport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_Getservbyport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_Getservbyport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_Getservbyport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_Getservbyport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_Getservbyport& from) {
    Command_Getservbyport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_Getservbyport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.Getservbyport";
  }
  protected:
  explicit Command_Getservbyport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtoFieldNumber = 2,
    kPortFieldNumber = 1,
  };
  // string proto = 2;
  void clear_proto();
  const std::string& proto() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto();
  PROTOBUF_NODISCARD std::string* release_proto();
  void set_allocated_proto(std::string* proto);
  private:
  const std::string& _internal_proto() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto(const std::string& value);
  std::string* _internal_mutable_proto();
  public:

  // uint32 port = 1;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.Getservbyport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_;
    uint32_t port_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockAccept final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockAccept) */ {
 public:
  inline Command_SockAccept() : Command_SockAccept(nullptr) {}
  ~Command_SockAccept() override;
  explicit PROTOBUF_CONSTEXPR Command_SockAccept(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockAccept(const Command_SockAccept& from);
  Command_SockAccept(Command_SockAccept&& from) noexcept
    : Command_SockAccept() {
    *this = ::std::move(from);
  }

  inline Command_SockAccept& operator=(const Command_SockAccept& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockAccept& operator=(Command_SockAccept&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockAccept& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockAccept* internal_default_instance() {
    return reinterpret_cast<const Command_SockAccept*>(
               &_Command_SockAccept_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Command_SockAccept& a, Command_SockAccept& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockAccept* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockAccept* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockAccept* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockAccept>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockAccept& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockAccept& from) {
    Command_SockAccept::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockAccept* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockAccept";
  }
  protected:
  explicit Command_SockAccept(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNewIdFieldNumber = 2,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 new_id = 2;
  void clear_new_id();
  uint32_t new_id() const;
  void set_new_id(uint32_t value);
  private:
  uint32_t _internal_new_id() const;
  void _internal_set_new_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockAccept)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t new_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockBind final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockBind) */ {
 public:
  inline Command_SockBind() : Command_SockBind(nullptr) {}
  ~Command_SockBind() override;
  explicit PROTOBUF_CONSTEXPR Command_SockBind(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockBind(const Command_SockBind& from);
  Command_SockBind(Command_SockBind&& from) noexcept
    : Command_SockBind() {
    *this = ::std::move(from);
  }

  inline Command_SockBind& operator=(const Command_SockBind& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockBind& operator=(Command_SockBind&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockBind& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockBind* internal_default_instance() {
    return reinterpret_cast<const Command_SockBind*>(
               &_Command_SockBind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Command_SockBind& a, Command_SockBind& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockBind* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockBind* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockBind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockBind>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockBind& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockBind& from) {
    Command_SockBind::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockBind* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockBind";
  }
  protected:
  explicit Command_SockBind(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // bytes addr = 2;
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockBind)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockListen final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockListen) */ {
 public:
  inline Command_SockListen() : Command_SockListen(nullptr) {}
  ~Command_SockListen() override;
  explicit PROTOBUF_CONSTEXPR Command_SockListen(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockListen(const Command_SockListen& from);
  Command_SockListen(Command_SockListen&& from) noexcept
    : Command_SockListen() {
    *this = ::std::move(from);
  }

  inline Command_SockListen& operator=(const Command_SockListen& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockListen& operator=(Command_SockListen&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockListen& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockListen* internal_default_instance() {
    return reinterpret_cast<const Command_SockListen*>(
               &_Command_SockListen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Command_SockListen& a, Command_SockListen& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockListen* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockListen* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockListen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockListen>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockListen& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockListen& from) {
    Command_SockListen::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockListen* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockListen";
  }
  protected:
  explicit Command_SockListen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kBacklogFieldNumber = 2,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 backlog = 2;
  void clear_backlog();
  uint32_t backlog() const;
  void set_backlog(uint32_t value);
  private:
  uint32_t _internal_backlog() const;
  void _internal_set_backlog(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockListen)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t backlog_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockConnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockConnect) */ {
 public:
  inline Command_SockConnect() : Command_SockConnect(nullptr) {}
  ~Command_SockConnect() override;
  explicit PROTOBUF_CONSTEXPR Command_SockConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockConnect(const Command_SockConnect& from);
  Command_SockConnect(Command_SockConnect&& from) noexcept
    : Command_SockConnect() {
    *this = ::std::move(from);
  }

  inline Command_SockConnect& operator=(const Command_SockConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockConnect& operator=(Command_SockConnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockConnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockConnect* internal_default_instance() {
    return reinterpret_cast<const Command_SockConnect*>(
               &_Command_SockConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Command_SockConnect& a, Command_SockConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockConnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockConnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockConnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockConnect& from) {
    Command_SockConnect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockConnect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockConnect";
  }
  protected:
  explicit Command_SockConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // bytes addr = 2;
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockConnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockConnectEx final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockConnectEx) */ {
 public:
  inline Command_SockConnectEx() : Command_SockConnectEx(nullptr) {}
  ~Command_SockConnectEx() override;
  explicit PROTOBUF_CONSTEXPR Command_SockConnectEx(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockConnectEx(const Command_SockConnectEx& from);
  Command_SockConnectEx(Command_SockConnectEx&& from) noexcept
    : Command_SockConnectEx() {
    *this = ::std::move(from);
  }

  inline Command_SockConnectEx& operator=(const Command_SockConnectEx& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockConnectEx& operator=(Command_SockConnectEx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockConnectEx& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockConnectEx* internal_default_instance() {
    return reinterpret_cast<const Command_SockConnectEx*>(
               &_Command_SockConnectEx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Command_SockConnectEx& a, Command_SockConnectEx& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockConnectEx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockConnectEx* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockConnectEx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockConnectEx>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockConnectEx& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockConnectEx& from) {
    Command_SockConnectEx::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockConnectEx* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockConnectEx";
  }
  protected:
  explicit Command_SockConnectEx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // bytes addr = 2;
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockConnectEx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockShutdown final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockShutdown) */ {
 public:
  inline Command_SockShutdown() : Command_SockShutdown(nullptr) {}
  ~Command_SockShutdown() override;
  explicit PROTOBUF_CONSTEXPR Command_SockShutdown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockShutdown(const Command_SockShutdown& from);
  Command_SockShutdown(Command_SockShutdown&& from) noexcept
    : Command_SockShutdown() {
    *this = ::std::move(from);
  }

  inline Command_SockShutdown& operator=(const Command_SockShutdown& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockShutdown& operator=(Command_SockShutdown&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockShutdown& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockShutdown* internal_default_instance() {
    return reinterpret_cast<const Command_SockShutdown*>(
               &_Command_SockShutdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Command_SockShutdown& a, Command_SockShutdown& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockShutdown* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockShutdown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockShutdown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockShutdown>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockShutdown& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockShutdown& from) {
    Command_SockShutdown::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockShutdown* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockShutdown";
  }
  protected:
  explicit Command_SockShutdown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kHowFieldNumber = 2,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 how = 2;
  void clear_how();
  uint32_t how() const;
  void set_how(uint32_t value);
  private:
  uint32_t _internal_how() const;
  void _internal_set_how(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockShutdown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t how_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockSetsockopt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockSetsockopt) */ {
 public:
  inline Command_SockSetsockopt() : Command_SockSetsockopt(nullptr) {}
  ~Command_SockSetsockopt() override;
  explicit PROTOBUF_CONSTEXPR Command_SockSetsockopt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockSetsockopt(const Command_SockSetsockopt& from);
  Command_SockSetsockopt(Command_SockSetsockopt&& from) noexcept
    : Command_SockSetsockopt() {
    *this = ::std::move(from);
  }

  inline Command_SockSetsockopt& operator=(const Command_SockSetsockopt& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockSetsockopt& operator=(Command_SockSetsockopt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockSetsockopt& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockSetsockopt* internal_default_instance() {
    return reinterpret_cast<const Command_SockSetsockopt*>(
               &_Command_SockSetsockopt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Command_SockSetsockopt& a, Command_SockSetsockopt& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockSetsockopt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockSetsockopt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockSetsockopt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockSetsockopt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockSetsockopt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockSetsockopt& from) {
    Command_SockSetsockopt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockSetsockopt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockSetsockopt";
  }
  protected:
  explicit Command_SockSetsockopt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 4,
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kOptFieldNumber = 3,
  };
  // bytes val = 4;
  void clear_val();
  const std::string& val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_val();
  PROTOBUF_NODISCARD std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 level = 2;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 opt = 3;
  void clear_opt();
  uint32_t opt() const;
  void set_opt(uint32_t value);
  private:
  uint32_t _internal_opt() const;
  void _internal_set_opt(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockSetsockopt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
    uint32_t id_;
    uint32_t level_;
    uint32_t opt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockGetsockopt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockGetsockopt) */ {
 public:
  inline Command_SockGetsockopt() : Command_SockGetsockopt(nullptr) {}
  ~Command_SockGetsockopt() override;
  explicit PROTOBUF_CONSTEXPR Command_SockGetsockopt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockGetsockopt(const Command_SockGetsockopt& from);
  Command_SockGetsockopt(Command_SockGetsockopt&& from) noexcept
    : Command_SockGetsockopt() {
    *this = ::std::move(from);
  }

  inline Command_SockGetsockopt& operator=(const Command_SockGetsockopt& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockGetsockopt& operator=(Command_SockGetsockopt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockGetsockopt& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockGetsockopt* internal_default_instance() {
    return reinterpret_cast<const Command_SockGetsockopt*>(
               &_Command_SockGetsockopt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Command_SockGetsockopt& a, Command_SockGetsockopt& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockGetsockopt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockGetsockopt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockGetsockopt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockGetsockopt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockGetsockopt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockGetsockopt& from) {
    Command_SockGetsockopt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockGetsockopt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockGetsockopt";
  }
  protected:
  explicit Command_SockGetsockopt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kOptFieldNumber = 3,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 level = 2;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 opt = 3;
  void clear_opt();
  uint32_t opt() const;
  void set_opt(uint32_t value);
  private:
  uint32_t _internal_opt() const;
  void _internal_set_opt(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockGetsockopt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t level_;
    uint32_t opt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockSend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockSend) */ {
 public:
  inline Command_SockSend() : Command_SockSend(nullptr) {}
  ~Command_SockSend() override;
  explicit PROTOBUF_CONSTEXPR Command_SockSend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockSend(const Command_SockSend& from);
  Command_SockSend(Command_SockSend&& from) noexcept
    : Command_SockSend() {
    *this = ::std::move(from);
  }

  inline Command_SockSend& operator=(const Command_SockSend& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockSend& operator=(Command_SockSend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockSend& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockSend* internal_default_instance() {
    return reinterpret_cast<const Command_SockSend*>(
               &_Command_SockSend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(Command_SockSend& a, Command_SockSend& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockSend* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockSend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockSend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockSend>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockSend& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockSend& from) {
    Command_SockSend::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockSend* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockSend";
  }
  protected:
  explicit Command_SockSend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kIdFieldNumber = 1,
    kFlagsFieldNumber = 3,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 flags = 3;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockSend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint32_t id_;
    uint32_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockSendto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockSendto) */ {
 public:
  inline Command_SockSendto() : Command_SockSendto(nullptr) {}
  ~Command_SockSendto() override;
  explicit PROTOBUF_CONSTEXPR Command_SockSendto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockSendto(const Command_SockSendto& from);
  Command_SockSendto(Command_SockSendto&& from) noexcept
    : Command_SockSendto() {
    *this = ::std::move(from);
  }

  inline Command_SockSendto& operator=(const Command_SockSendto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockSendto& operator=(Command_SockSendto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockSendto& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockSendto* internal_default_instance() {
    return reinterpret_cast<const Command_SockSendto*>(
               &_Command_SockSendto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Command_SockSendto& a, Command_SockSendto& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockSendto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockSendto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockSendto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockSendto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockSendto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockSendto& from) {
    Command_SockSendto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockSendto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockSendto";
  }
  protected:
  explicit Command_SockSendto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kAddrFieldNumber = 4,
    kIdFieldNumber = 1,
    kFlagsFieldNumber = 3,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bytes addr = 4;
  void clear_addr();
  const std::string& addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_addr();
  PROTOBUF_NODISCARD std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 flags = 3;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockSendto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
    uint32_t id_;
    uint32_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockSendall final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockSendall) */ {
 public:
  inline Command_SockSendall() : Command_SockSendall(nullptr) {}
  ~Command_SockSendall() override;
  explicit PROTOBUF_CONSTEXPR Command_SockSendall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockSendall(const Command_SockSendall& from);
  Command_SockSendall(Command_SockSendall&& from) noexcept
    : Command_SockSendall() {
    *this = ::std::move(from);
  }

  inline Command_SockSendall& operator=(const Command_SockSendall& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockSendall& operator=(Command_SockSendall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockSendall& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockSendall* internal_default_instance() {
    return reinterpret_cast<const Command_SockSendall*>(
               &_Command_SockSendall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(Command_SockSendall& a, Command_SockSendall& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockSendall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockSendall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockSendall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockSendall>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockSendall& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockSendall& from) {
    Command_SockSendall::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockSendall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockSendall";
  }
  protected:
  explicit Command_SockSendall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kIdFieldNumber = 1,
    kFlagsFieldNumber = 3,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 flags = 3;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockSendall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint32_t id_;
    uint32_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockSendmsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockSendmsg) */ {
 public:
  inline Command_SockSendmsg() : Command_SockSendmsg(nullptr) {}
  ~Command_SockSendmsg() override;
  explicit PROTOBUF_CONSTEXPR Command_SockSendmsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockSendmsg(const Command_SockSendmsg& from);
  Command_SockSendmsg(Command_SockSendmsg&& from) noexcept
    : Command_SockSendmsg() {
    *this = ::std::move(from);
  }

  inline Command_SockSendmsg& operator=(const Command_SockSendmsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockSendmsg& operator=(Command_SockSendmsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockSendmsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockSendmsg* internal_default_instance() {
    return reinterpret_cast<const Command_SockSendmsg*>(
               &_Command_SockSendmsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Command_SockSendmsg& a, Command_SockSendmsg& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockSendmsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockSendmsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockSendmsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockSendmsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockSendmsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockSendmsg& from) {
    Command_SockSendmsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockSendmsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockSendmsg";
  }
  protected:
  explicit Command_SockSendmsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kIdFieldNumber = 1,
    kFlagsFieldNumber = 3,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 flags = 3;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockSendmsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint32_t id_;
    uint32_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockRecv final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockRecv) */ {
 public:
  inline Command_SockRecv() : Command_SockRecv(nullptr) {}
  ~Command_SockRecv() override;
  explicit PROTOBUF_CONSTEXPR Command_SockRecv(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockRecv(const Command_SockRecv& from);
  Command_SockRecv(Command_SockRecv&& from) noexcept
    : Command_SockRecv() {
    *this = ::std::move(from);
  }

  inline Command_SockRecv& operator=(const Command_SockRecv& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockRecv& operator=(Command_SockRecv&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockRecv& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockRecv* internal_default_instance() {
    return reinterpret_cast<const Command_SockRecv*>(
               &_Command_SockRecv_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(Command_SockRecv& a, Command_SockRecv& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockRecv* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockRecv* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockRecv* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockRecv>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockRecv& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockRecv& from) {
    Command_SockRecv::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockRecv* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockRecv";
  }
  protected:
  explicit Command_SockRecv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMaxlenFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 maxlen = 2;
  void clear_maxlen();
  uint32_t maxlen() const;
  void set_maxlen(uint32_t value);
  private:
  uint32_t _internal_maxlen() const;
  void _internal_set_maxlen(uint32_t value);
  public:

  // uint32 flags = 3;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockRecv)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t maxlen_;
    uint32_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockRecvfrom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockRecvfrom) */ {
 public:
  inline Command_SockRecvfrom() : Command_SockRecvfrom(nullptr) {}
  ~Command_SockRecvfrom() override;
  explicit PROTOBUF_CONSTEXPR Command_SockRecvfrom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockRecvfrom(const Command_SockRecvfrom& from);
  Command_SockRecvfrom(Command_SockRecvfrom&& from) noexcept
    : Command_SockRecvfrom() {
    *this = ::std::move(from);
  }

  inline Command_SockRecvfrom& operator=(const Command_SockRecvfrom& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockRecvfrom& operator=(Command_SockRecvfrom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockRecvfrom& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockRecvfrom* internal_default_instance() {
    return reinterpret_cast<const Command_SockRecvfrom*>(
               &_Command_SockRecvfrom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(Command_SockRecvfrom& a, Command_SockRecvfrom& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockRecvfrom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockRecvfrom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockRecvfrom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockRecvfrom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockRecvfrom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockRecvfrom& from) {
    Command_SockRecvfrom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockRecvfrom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockRecvfrom";
  }
  protected:
  explicit Command_SockRecvfrom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMaxlenFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 maxlen = 2;
  void clear_maxlen();
  uint32_t maxlen() const;
  void set_maxlen(uint32_t value);
  private:
  uint32_t _internal_maxlen() const;
  void _internal_set_maxlen(uint32_t value);
  public:

  // uint32 flags = 3;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockRecvfrom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t maxlen_;
    uint32_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockRecvmsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockRecvmsg) */ {
 public:
  inline Command_SockRecvmsg() : Command_SockRecvmsg(nullptr) {}
  ~Command_SockRecvmsg() override;
  explicit PROTOBUF_CONSTEXPR Command_SockRecvmsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockRecvmsg(const Command_SockRecvmsg& from);
  Command_SockRecvmsg(Command_SockRecvmsg&& from) noexcept
    : Command_SockRecvmsg() {
    *this = ::std::move(from);
  }

  inline Command_SockRecvmsg& operator=(const Command_SockRecvmsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockRecvmsg& operator=(Command_SockRecvmsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockRecvmsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockRecvmsg* internal_default_instance() {
    return reinterpret_cast<const Command_SockRecvmsg*>(
               &_Command_SockRecvmsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(Command_SockRecvmsg& a, Command_SockRecvmsg& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockRecvmsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockRecvmsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockRecvmsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockRecvmsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockRecvmsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockRecvmsg& from) {
    Command_SockRecvmsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockRecvmsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockRecvmsg";
  }
  protected:
  explicit Command_SockRecvmsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMaxlenFieldNumber = 2,
    kAncbufsizeFieldNumber = 3,
    kFlagsFieldNumber = 4,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 maxlen = 2;
  void clear_maxlen();
  uint32_t maxlen() const;
  void set_maxlen(uint32_t value);
  private:
  uint32_t _internal_maxlen() const;
  void _internal_set_maxlen(uint32_t value);
  public:

  // uint32 ancbufsize = 3;
  void clear_ancbufsize();
  uint32_t ancbufsize() const;
  void set_ancbufsize(uint32_t value);
  private:
  uint32_t _internal_ancbufsize() const;
  void _internal_set_ancbufsize(uint32_t value);
  public:

  // uint32 flags = 4;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockRecvmsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t maxlen_;
    uint32_t ancbufsize_;
    uint32_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockRecvInto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockRecvInto) */ {
 public:
  inline Command_SockRecvInto() : Command_SockRecvInto(nullptr) {}
  ~Command_SockRecvInto() override;
  explicit PROTOBUF_CONSTEXPR Command_SockRecvInto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockRecvInto(const Command_SockRecvInto& from);
  Command_SockRecvInto(Command_SockRecvInto&& from) noexcept
    : Command_SockRecvInto() {
    *this = ::std::move(from);
  }

  inline Command_SockRecvInto& operator=(const Command_SockRecvInto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockRecvInto& operator=(Command_SockRecvInto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockRecvInto& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockRecvInto* internal_default_instance() {
    return reinterpret_cast<const Command_SockRecvInto*>(
               &_Command_SockRecvInto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(Command_SockRecvInto& a, Command_SockRecvInto& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockRecvInto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockRecvInto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockRecvInto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockRecvInto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockRecvInto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockRecvInto& from) {
    Command_SockRecvInto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockRecvInto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockRecvInto";
  }
  protected:
  explicit Command_SockRecvInto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNbytesFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 nbytes = 2;
  void clear_nbytes();
  uint32_t nbytes() const;
  void set_nbytes(uint32_t value);
  private:
  uint32_t _internal_nbytes() const;
  void _internal_set_nbytes(uint32_t value);
  public:

  // uint32 flags = 3;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockRecvInto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t nbytes_;
    uint32_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockRecvfromInto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockRecvfromInto) */ {
 public:
  inline Command_SockRecvfromInto() : Command_SockRecvfromInto(nullptr) {}
  ~Command_SockRecvfromInto() override;
  explicit PROTOBUF_CONSTEXPR Command_SockRecvfromInto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockRecvfromInto(const Command_SockRecvfromInto& from);
  Command_SockRecvfromInto(Command_SockRecvfromInto&& from) noexcept
    : Command_SockRecvfromInto() {
    *this = ::std::move(from);
  }

  inline Command_SockRecvfromInto& operator=(const Command_SockRecvfromInto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockRecvfromInto& operator=(Command_SockRecvfromInto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockRecvfromInto& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockRecvfromInto* internal_default_instance() {
    return reinterpret_cast<const Command_SockRecvfromInto*>(
               &_Command_SockRecvfromInto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(Command_SockRecvfromInto& a, Command_SockRecvfromInto& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockRecvfromInto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockRecvfromInto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockRecvfromInto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockRecvfromInto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockRecvfromInto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockRecvfromInto& from) {
    Command_SockRecvfromInto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockRecvfromInto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockRecvfromInto";
  }
  protected:
  explicit Command_SockRecvfromInto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNbytesFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 nbytes = 2;
  void clear_nbytes();
  uint32_t nbytes() const;
  void set_nbytes(uint32_t value);
  private:
  uint32_t _internal_nbytes() const;
  void _internal_set_nbytes(uint32_t value);
  public:

  // uint32 flags = 3;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockRecvfromInto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t nbytes_;
    uint32_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockRecvmsgInto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockRecvmsgInto) */ {
 public:
  inline Command_SockRecvmsgInto() : Command_SockRecvmsgInto(nullptr) {}
  ~Command_SockRecvmsgInto() override;
  explicit PROTOBUF_CONSTEXPR Command_SockRecvmsgInto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockRecvmsgInto(const Command_SockRecvmsgInto& from);
  Command_SockRecvmsgInto(Command_SockRecvmsgInto&& from) noexcept
    : Command_SockRecvmsgInto() {
    *this = ::std::move(from);
  }

  inline Command_SockRecvmsgInto& operator=(const Command_SockRecvmsgInto& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockRecvmsgInto& operator=(Command_SockRecvmsgInto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockRecvmsgInto& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockRecvmsgInto* internal_default_instance() {
    return reinterpret_cast<const Command_SockRecvmsgInto*>(
               &_Command_SockRecvmsgInto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(Command_SockRecvmsgInto& a, Command_SockRecvmsgInto& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockRecvmsgInto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockRecvmsgInto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockRecvmsgInto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockRecvmsgInto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockRecvmsgInto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockRecvmsgInto& from) {
    Command_SockRecvmsgInto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockRecvmsgInto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockRecvmsgInto";
  }
  protected:
  explicit Command_SockRecvmsgInto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNbytesFieldNumber = 2,
    kAncbufsizeFieldNumber = 3,
    kFlagsFieldNumber = 4,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 nbytes = 2;
  void clear_nbytes();
  uint32_t nbytes() const;
  void set_nbytes(uint32_t value);
  private:
  uint32_t _internal_nbytes() const;
  void _internal_set_nbytes(uint32_t value);
  public:

  // uint32 ancbufsize = 3;
  void clear_ancbufsize();
  uint32_t ancbufsize() const;
  void set_ancbufsize(uint32_t value);
  private:
  uint32_t _internal_ancbufsize() const;
  void _internal_set_ancbufsize(uint32_t value);
  public:

  // uint32 flags = 4;
  void clear_flags();
  uint32_t flags() const;
  void set_flags(uint32_t value);
  private:
  uint32_t _internal_flags() const;
  void _internal_set_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockRecvmsgInto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t nbytes_;
    uint32_t ancbufsize_;
    uint32_t flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockSettimeout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockSettimeout) */ {
 public:
  inline Command_SockSettimeout() : Command_SockSettimeout(nullptr) {}
  ~Command_SockSettimeout() override;
  explicit PROTOBUF_CONSTEXPR Command_SockSettimeout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockSettimeout(const Command_SockSettimeout& from);
  Command_SockSettimeout(Command_SockSettimeout&& from) noexcept
    : Command_SockSettimeout() {
    *this = ::std::move(from);
  }

  inline Command_SockSettimeout& operator=(const Command_SockSettimeout& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockSettimeout& operator=(Command_SockSettimeout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockSettimeout& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockSettimeout* internal_default_instance() {
    return reinterpret_cast<const Command_SockSettimeout*>(
               &_Command_SockSettimeout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(Command_SockSettimeout& a, Command_SockSettimeout& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockSettimeout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockSettimeout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockSettimeout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockSettimeout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockSettimeout& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockSettimeout& from) {
    Command_SockSettimeout::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockSettimeout* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockSettimeout";
  }
  protected:
  explicit Command_SockSettimeout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeoutFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // double timeout = 2;
  void clear_timeout();
  double timeout() const;
  void set_timeout(double value);
  private:
  double _internal_timeout() const;
  void _internal_set_timeout(double value);
  public:

  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockSettimeout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double timeout_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command_SockSetblocking final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command.SockSetblocking) */ {
 public:
  inline Command_SockSetblocking() : Command_SockSetblocking(nullptr) {}
  ~Command_SockSetblocking() override;
  explicit PROTOBUF_CONSTEXPR Command_SockSetblocking(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command_SockSetblocking(const Command_SockSetblocking& from);
  Command_SockSetblocking(Command_SockSetblocking&& from) noexcept
    : Command_SockSetblocking() {
    *this = ::std::move(from);
  }

  inline Command_SockSetblocking& operator=(const Command_SockSetblocking& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command_SockSetblocking& operator=(Command_SockSetblocking&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command_SockSetblocking& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command_SockSetblocking* internal_default_instance() {
    return reinterpret_cast<const Command_SockSetblocking*>(
               &_Command_SockSetblocking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(Command_SockSetblocking& a, Command_SockSetblocking& b) {
    a.Swap(&b);
  }
  inline void Swap(Command_SockSetblocking* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command_SockSetblocking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command_SockSetblocking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command_SockSetblocking>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command_SockSetblocking& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command_SockSetblocking& from) {
    Command_SockSetblocking::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command_SockSetblocking* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command.SockSetblocking";
  }
  protected:
  explicit Command_SockSetblocking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kBlockingFieldNumber = 2,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // bool blocking = 2;
  void clear_blocking();
  bool blocking() const;
  void set_blocking(bool value);
  private:
  bool _internal_blocking() const;
  void _internal_set_blocking(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Command.SockSetblocking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    bool blocking_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Command final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  ~Command() override;
  explicit PROTOBUF_CONSTEXPR Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  enum CmdCase {
    kSockSocket = 1,
    kSockSocketpair = 2,
    kSockDup = 3,
    kSockClose = 4,
    kInetPton = 5,
    kInetNtop = 6,
    kInetAton = 7,
    kInetNtoa = 8,
    kHtons = 9,
    kHtonl = 10,
    kNtohs = 11,
    kNtohl = 12,
    kGetaddrinfo = 13,
    kGetnameinfo = 14,
    kIfNameindex = 15,
    kIfNametoindex = 16,
    kIfIndextoname = 17,
    kGethostbyname = 18,
    kGethostbynameEx = 19,
    kGethostbyaddr = 20,
    kGetservbyname = 21,
    kGetservbyport = 22,
    kSockAccept = 23,
    kSockBind = 24,
    kSockListen = 25,
    kSockConnect = 26,
    kSockConnectEx = 27,
    kSockShutdown = 28,
    kSockSetsockopt = 29,
    kSockGetsockopt = 30,
    kSockSend = 31,
    kSockSendto = 32,
    kSockSendall = 33,
    kSockSendmsg = 34,
    kSockRecv = 35,
    kSockRecvfrom = 36,
    kSockRecvmsg = 37,
    kSockRecvInto = 38,
    kSockRecvfromInto = 39,
    kSockRecvmsgInto = 40,
    kSockSettimeout = 41,
    kSockSetblocking = 42,
    CMD_NOT_SET = 0,
  };

  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command& from) {
    Command::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Command_SockSocket SockSocket;
  typedef Command_SockSocketpair SockSocketpair;
  typedef Command_SockDup SockDup;
  typedef Command_SockClose SockClose;
  typedef Command_InetPton InetPton;
  typedef Command_InetNtop InetNtop;
  typedef Command_InetAton InetAton;
  typedef Command_InetNtoa InetNtoa;
  typedef Command_Htons Htons;
  typedef Command_Htonl Htonl;
  typedef Command_Ntohs Ntohs;
  typedef Command_Ntohl Ntohl;
  typedef Command_Getaddrinfo Getaddrinfo;
  typedef Command_Getnameinfo Getnameinfo;
  typedef Command_IfNameindex IfNameindex;
  typedef Command_IfNametoindex IfNametoindex;
  typedef Command_IfIndextoname IfIndextoname;
  typedef Command_Gethostbyname Gethostbyname;
  typedef Command_GethostbynameEx GethostbynameEx;
  typedef Command_Gethostbyaddr Gethostbyaddr;
  typedef Command_Getservbyname Getservbyname;
  typedef Command_Getservbyport Getservbyport;
  typedef Command_SockAccept SockAccept;
  typedef Command_SockBind SockBind;
  typedef Command_SockListen SockListen;
  typedef Command_SockConnect SockConnect;
  typedef Command_SockConnectEx SockConnectEx;
  typedef Command_SockShutdown SockShutdown;
  typedef Command_SockSetsockopt SockSetsockopt;
  typedef Command_SockGetsockopt SockGetsockopt;
  typedef Command_SockSend SockSend;
  typedef Command_SockSendto SockSendto;
  typedef Command_SockSendall SockSendall;
  typedef Command_SockSendmsg SockSendmsg;
  typedef Command_SockRecv SockRecv;
  typedef Command_SockRecvfrom SockRecvfrom;
  typedef Command_SockRecvmsg SockRecvmsg;
  typedef Command_SockRecvInto SockRecvInto;
  typedef Command_SockRecvfromInto SockRecvfromInto;
  typedef Command_SockRecvmsgInto SockRecvmsgInto;
  typedef Command_SockSettimeout SockSettimeout;
  typedef Command_SockSetblocking SockSetblocking;

  // accessors -------------------------------------------------------

  enum : int {
    kSockSocketFieldNumber = 1,
    kSockSocketpairFieldNumber = 2,
    kSockDupFieldNumber = 3,
    kSockCloseFieldNumber = 4,
    kInetPtonFieldNumber = 5,
    kInetNtopFieldNumber = 6,
    kInetAtonFieldNumber = 7,
    kInetNtoaFieldNumber = 8,
    kHtonsFieldNumber = 9,
    kHtonlFieldNumber = 10,
    kNtohsFieldNumber = 11,
    kNtohlFieldNumber = 12,
    kGetaddrinfoFieldNumber = 13,
    kGetnameinfoFieldNumber = 14,
    kIfNameindexFieldNumber = 15,
    kIfNametoindexFieldNumber = 16,
    kIfIndextonameFieldNumber = 17,
    kGethostbynameFieldNumber = 18,
    kGethostbynameExFieldNumber = 19,
    kGethostbyaddrFieldNumber = 20,
    kGetservbynameFieldNumber = 21,
    kGetservbyportFieldNumber = 22,
    kSockAcceptFieldNumber = 23,
    kSockBindFieldNumber = 24,
    kSockListenFieldNumber = 25,
    kSockConnectFieldNumber = 26,
    kSockConnectExFieldNumber = 27,
    kSockShutdownFieldNumber = 28,
    kSockSetsockoptFieldNumber = 29,
    kSockGetsockoptFieldNumber = 30,
    kSockSendFieldNumber = 31,
    kSockSendtoFieldNumber = 32,
    kSockSendallFieldNumber = 33,
    kSockSendmsgFieldNumber = 34,
    kSockRecvFieldNumber = 35,
    kSockRecvfromFieldNumber = 36,
    kSockRecvmsgFieldNumber = 37,
    kSockRecvIntoFieldNumber = 38,
    kSockRecvfromIntoFieldNumber = 39,
    kSockRecvmsgIntoFieldNumber = 40,
    kSockSettimeoutFieldNumber = 41,
    kSockSetblockingFieldNumber = 42,
  };
  // .Command.SockSocket sock_socket = 1;
  bool has_sock_socket() const;
  private:
  bool _internal_has_sock_socket() const;
  public:
  void clear_sock_socket();
  const ::Command_SockSocket& sock_socket() const;
  PROTOBUF_NODISCARD ::Command_SockSocket* release_sock_socket();
  ::Command_SockSocket* mutable_sock_socket();
  void set_allocated_sock_socket(::Command_SockSocket* sock_socket);
  private:
  const ::Command_SockSocket& _internal_sock_socket() const;
  ::Command_SockSocket* _internal_mutable_sock_socket();
  public:
  void unsafe_arena_set_allocated_sock_socket(
      ::Command_SockSocket* sock_socket);
  ::Command_SockSocket* unsafe_arena_release_sock_socket();

  // .Command.SockSocketpair sock_socketpair = 2;
  bool has_sock_socketpair() const;
  private:
  bool _internal_has_sock_socketpair() const;
  public:
  void clear_sock_socketpair();
  const ::Command_SockSocketpair& sock_socketpair() const;
  PROTOBUF_NODISCARD ::Command_SockSocketpair* release_sock_socketpair();
  ::Command_SockSocketpair* mutable_sock_socketpair();
  void set_allocated_sock_socketpair(::Command_SockSocketpair* sock_socketpair);
  private:
  const ::Command_SockSocketpair& _internal_sock_socketpair() const;
  ::Command_SockSocketpair* _internal_mutable_sock_socketpair();
  public:
  void unsafe_arena_set_allocated_sock_socketpair(
      ::Command_SockSocketpair* sock_socketpair);
  ::Command_SockSocketpair* unsafe_arena_release_sock_socketpair();

  // .Command.SockDup sock_dup = 3;
  bool has_sock_dup() const;
  private:
  bool _internal_has_sock_dup() const;
  public:
  void clear_sock_dup();
  const ::Command_SockDup& sock_dup() const;
  PROTOBUF_NODISCARD ::Command_SockDup* release_sock_dup();
  ::Command_SockDup* mutable_sock_dup();
  void set_allocated_sock_dup(::Command_SockDup* sock_dup);
  private:
  const ::Command_SockDup& _internal_sock_dup() const;
  ::Command_SockDup* _internal_mutable_sock_dup();
  public:
  void unsafe_arena_set_allocated_sock_dup(
      ::Command_SockDup* sock_dup);
  ::Command_SockDup* unsafe_arena_release_sock_dup();

  // .Command.SockClose sock_close = 4;
  bool has_sock_close() const;
  private:
  bool _internal_has_sock_close() const;
  public:
  void clear_sock_close();
  const ::Command_SockClose& sock_close() const;
  PROTOBUF_NODISCARD ::Command_SockClose* release_sock_close();
  ::Command_SockClose* mutable_sock_close();
  void set_allocated_sock_close(::Command_SockClose* sock_close);
  private:
  const ::Command_SockClose& _internal_sock_close() const;
  ::Command_SockClose* _internal_mutable_sock_close();
  public:
  void unsafe_arena_set_allocated_sock_close(
      ::Command_SockClose* sock_close);
  ::Command_SockClose* unsafe_arena_release_sock_close();

  // .Command.InetPton inet_pton = 5;
  bool has_inet_pton() const;
  private:
  bool _internal_has_inet_pton() const;
  public:
  void clear_inet_pton();
  const ::Command_InetPton& inet_pton() const;
  PROTOBUF_NODISCARD ::Command_InetPton* release_inet_pton();
  ::Command_InetPton* mutable_inet_pton();
  void set_allocated_inet_pton(::Command_InetPton* inet_pton);
  private:
  const ::Command_InetPton& _internal_inet_pton() const;
  ::Command_InetPton* _internal_mutable_inet_pton();
  public:
  void unsafe_arena_set_allocated_inet_pton(
      ::Command_InetPton* inet_pton);
  ::Command_InetPton* unsafe_arena_release_inet_pton();

  // .Command.InetNtop inet_ntop = 6;
  bool has_inet_ntop() const;
  private:
  bool _internal_has_inet_ntop() const;
  public:
  void clear_inet_ntop();
  const ::Command_InetNtop& inet_ntop() const;
  PROTOBUF_NODISCARD ::Command_InetNtop* release_inet_ntop();
  ::Command_InetNtop* mutable_inet_ntop();
  void set_allocated_inet_ntop(::Command_InetNtop* inet_ntop);
  private:
  const ::Command_InetNtop& _internal_inet_ntop() const;
  ::Command_InetNtop* _internal_mutable_inet_ntop();
  public:
  void unsafe_arena_set_allocated_inet_ntop(
      ::Command_InetNtop* inet_ntop);
  ::Command_InetNtop* unsafe_arena_release_inet_ntop();

  // .Command.InetAton inet_aton = 7;
  bool has_inet_aton() const;
  private:
  bool _internal_has_inet_aton() const;
  public:
  void clear_inet_aton();
  const ::Command_InetAton& inet_aton() const;
  PROTOBUF_NODISCARD ::Command_InetAton* release_inet_aton();
  ::Command_InetAton* mutable_inet_aton();
  void set_allocated_inet_aton(::Command_InetAton* inet_aton);
  private:
  const ::Command_InetAton& _internal_inet_aton() const;
  ::Command_InetAton* _internal_mutable_inet_aton();
  public:
  void unsafe_arena_set_allocated_inet_aton(
      ::Command_InetAton* inet_aton);
  ::Command_InetAton* unsafe_arena_release_inet_aton();

  // .Command.InetNtoa inet_ntoa = 8;
  bool has_inet_ntoa() const;
  private:
  bool _internal_has_inet_ntoa() const;
  public:
  void clear_inet_ntoa();
  const ::Command_InetNtoa& inet_ntoa() const;
  PROTOBUF_NODISCARD ::Command_InetNtoa* release_inet_ntoa();
  ::Command_InetNtoa* mutable_inet_ntoa();
  void set_allocated_inet_ntoa(::Command_InetNtoa* inet_ntoa);
  private:
  const ::Command_InetNtoa& _internal_inet_ntoa() const;
  ::Command_InetNtoa* _internal_mutable_inet_ntoa();
  public:
  void unsafe_arena_set_allocated_inet_ntoa(
      ::Command_InetNtoa* inet_ntoa);
  ::Command_InetNtoa* unsafe_arena_release_inet_ntoa();

  // .Command.Htons htons = 9;
  bool has_htons() const;
  private:
  bool _internal_has_htons() const;
  public:
  void clear_htons();
  const ::Command_Htons& htons() const;
  PROTOBUF_NODISCARD ::Command_Htons* release_htons();
  ::Command_Htons* mutable_htons();
  void set_allocated_htons(::Command_Htons* htons);
  private:
  const ::Command_Htons& _internal_htons() const;
  ::Command_Htons* _internal_mutable_htons();
  public:
  void unsafe_arena_set_allocated_htons(
      ::Command_Htons* htons);
  ::Command_Htons* unsafe_arena_release_htons();

  // .Command.Htonl htonl = 10;
  bool has_htonl() const;
  private:
  bool _internal_has_htonl() const;
  public:
  void clear_htonl();
  const ::Command_Htonl& htonl() const;
  PROTOBUF_NODISCARD ::Command_Htonl* release_htonl();
  ::Command_Htonl* mutable_htonl();
  void set_allocated_htonl(::Command_Htonl* htonl);
  private:
  const ::Command_Htonl& _internal_htonl() const;
  ::Command_Htonl* _internal_mutable_htonl();
  public:
  void unsafe_arena_set_allocated_htonl(
      ::Command_Htonl* htonl);
  ::Command_Htonl* unsafe_arena_release_htonl();

  // .Command.Ntohs ntohs = 11;
  bool has_ntohs() const;
  private:
  bool _internal_has_ntohs() const;
  public:
  void clear_ntohs();
  const ::Command_Ntohs& ntohs() const;
  PROTOBUF_NODISCARD ::Command_Ntohs* release_ntohs();
  ::Command_Ntohs* mutable_ntohs();
  void set_allocated_ntohs(::Command_Ntohs* ntohs);
  private:
  const ::Command_Ntohs& _internal_ntohs() const;
  ::Command_Ntohs* _internal_mutable_ntohs();
  public:
  void unsafe_arena_set_allocated_ntohs(
      ::Command_Ntohs* ntohs);
  ::Command_Ntohs* unsafe_arena_release_ntohs();

  // .Command.Ntohl ntohl = 12;
  bool has_ntohl() const;
  private:
  bool _internal_has_ntohl() const;
  public:
  void clear_ntohl();
  const ::Command_Ntohl& ntohl() const;
  PROTOBUF_NODISCARD ::Command_Ntohl* release_ntohl();
  ::Command_Ntohl* mutable_ntohl();
  void set_allocated_ntohl(::Command_Ntohl* ntohl);
  private:
  const ::Command_Ntohl& _internal_ntohl() const;
  ::Command_Ntohl* _internal_mutable_ntohl();
  public:
  void unsafe_arena_set_allocated_ntohl(
      ::Command_Ntohl* ntohl);
  ::Command_Ntohl* unsafe_arena_release_ntohl();

  // .Command.Getaddrinfo getaddrinfo = 13;
  bool has_getaddrinfo() const;
  private:
  bool _internal_has_getaddrinfo() const;
  public:
  void clear_getaddrinfo();
  const ::Command_Getaddrinfo& getaddrinfo() const;
  PROTOBUF_NODISCARD ::Command_Getaddrinfo* release_getaddrinfo();
  ::Command_Getaddrinfo* mutable_getaddrinfo();
  void set_allocated_getaddrinfo(::Command_Getaddrinfo* getaddrinfo);
  private:
  const ::Command_Getaddrinfo& _internal_getaddrinfo() const;
  ::Command_Getaddrinfo* _internal_mutable_getaddrinfo();
  public:
  void unsafe_arena_set_allocated_getaddrinfo(
      ::Command_Getaddrinfo* getaddrinfo);
  ::Command_Getaddrinfo* unsafe_arena_release_getaddrinfo();

  // .Command.Getnameinfo getnameinfo = 14;
  bool has_getnameinfo() const;
  private:
  bool _internal_has_getnameinfo() const;
  public:
  void clear_getnameinfo();
  const ::Command_Getnameinfo& getnameinfo() const;
  PROTOBUF_NODISCARD ::Command_Getnameinfo* release_getnameinfo();
  ::Command_Getnameinfo* mutable_getnameinfo();
  void set_allocated_getnameinfo(::Command_Getnameinfo* getnameinfo);
  private:
  const ::Command_Getnameinfo& _internal_getnameinfo() const;
  ::Command_Getnameinfo* _internal_mutable_getnameinfo();
  public:
  void unsafe_arena_set_allocated_getnameinfo(
      ::Command_Getnameinfo* getnameinfo);
  ::Command_Getnameinfo* unsafe_arena_release_getnameinfo();

  // .Command.IfNameindex if_nameindex = 15;
  bool has_if_nameindex() const;
  private:
  bool _internal_has_if_nameindex() const;
  public:
  void clear_if_nameindex();
  const ::Command_IfNameindex& if_nameindex() const;
  PROTOBUF_NODISCARD ::Command_IfNameindex* release_if_nameindex();
  ::Command_IfNameindex* mutable_if_nameindex();
  void set_allocated_if_nameindex(::Command_IfNameindex* if_nameindex);
  private:
  const ::Command_IfNameindex& _internal_if_nameindex() const;
  ::Command_IfNameindex* _internal_mutable_if_nameindex();
  public:
  void unsafe_arena_set_allocated_if_nameindex(
      ::Command_IfNameindex* if_nameindex);
  ::Command_IfNameindex* unsafe_arena_release_if_nameindex();

  // .Command.IfNametoindex if_nametoindex = 16;
  bool has_if_nametoindex() const;
  private:
  bool _internal_has_if_nametoindex() const;
  public:
  void clear_if_nametoindex();
  const ::Command_IfNametoindex& if_nametoindex() const;
  PROTOBUF_NODISCARD ::Command_IfNametoindex* release_if_nametoindex();
  ::Command_IfNametoindex* mutable_if_nametoindex();
  void set_allocated_if_nametoindex(::Command_IfNametoindex* if_nametoindex);
  private:
  const ::Command_IfNametoindex& _internal_if_nametoindex() const;
  ::Command_IfNametoindex* _internal_mutable_if_nametoindex();
  public:
  void unsafe_arena_set_allocated_if_nametoindex(
      ::Command_IfNametoindex* if_nametoindex);
  ::Command_IfNametoindex* unsafe_arena_release_if_nametoindex();

  // .Command.IfIndextoname if_indextoname = 17;
  bool has_if_indextoname() const;
  private:
  bool _internal_has_if_indextoname() const;
  public:
  void clear_if_indextoname();
  const ::Command_IfIndextoname& if_indextoname() const;
  PROTOBUF_NODISCARD ::Command_IfIndextoname* release_if_indextoname();
  ::Command_IfIndextoname* mutable_if_indextoname();
  void set_allocated_if_indextoname(::Command_IfIndextoname* if_indextoname);
  private:
  const ::Command_IfIndextoname& _internal_if_indextoname() const;
  ::Command_IfIndextoname* _internal_mutable_if_indextoname();
  public:
  void unsafe_arena_set_allocated_if_indextoname(
      ::Command_IfIndextoname* if_indextoname);
  ::Command_IfIndextoname* unsafe_arena_release_if_indextoname();

  // .Command.Gethostbyname gethostbyname = 18;
  bool has_gethostbyname() const;
  private:
  bool _internal_has_gethostbyname() const;
  public:
  void clear_gethostbyname();
  const ::Command_Gethostbyname& gethostbyname() const;
  PROTOBUF_NODISCARD ::Command_Gethostbyname* release_gethostbyname();
  ::Command_Gethostbyname* mutable_gethostbyname();
  void set_allocated_gethostbyname(::Command_Gethostbyname* gethostbyname);
  private:
  const ::Command_Gethostbyname& _internal_gethostbyname() const;
  ::Command_Gethostbyname* _internal_mutable_gethostbyname();
  public:
  void unsafe_arena_set_allocated_gethostbyname(
      ::Command_Gethostbyname* gethostbyname);
  ::Command_Gethostbyname* unsafe_arena_release_gethostbyname();

  // .Command.GethostbynameEx gethostbyname_ex = 19;
  bool has_gethostbyname_ex() const;
  private:
  bool _internal_has_gethostbyname_ex() const;
  public:
  void clear_gethostbyname_ex();
  const ::Command_GethostbynameEx& gethostbyname_ex() const;
  PROTOBUF_NODISCARD ::Command_GethostbynameEx* release_gethostbyname_ex();
  ::Command_GethostbynameEx* mutable_gethostbyname_ex();
  void set_allocated_gethostbyname_ex(::Command_GethostbynameEx* gethostbyname_ex);
  private:
  const ::Command_GethostbynameEx& _internal_gethostbyname_ex() const;
  ::Command_GethostbynameEx* _internal_mutable_gethostbyname_ex();
  public:
  void unsafe_arena_set_allocated_gethostbyname_ex(
      ::Command_GethostbynameEx* gethostbyname_ex);
  ::Command_GethostbynameEx* unsafe_arena_release_gethostbyname_ex();

  // .Command.Gethostbyaddr gethostbyaddr = 20;
  bool has_gethostbyaddr() const;
  private:
  bool _internal_has_gethostbyaddr() const;
  public:
  void clear_gethostbyaddr();
  const ::Command_Gethostbyaddr& gethostbyaddr() const;
  PROTOBUF_NODISCARD ::Command_Gethostbyaddr* release_gethostbyaddr();
  ::Command_Gethostbyaddr* mutable_gethostbyaddr();
  void set_allocated_gethostbyaddr(::Command_Gethostbyaddr* gethostbyaddr);
  private:
  const ::Command_Gethostbyaddr& _internal_gethostbyaddr() const;
  ::Command_Gethostbyaddr* _internal_mutable_gethostbyaddr();
  public:
  void unsafe_arena_set_allocated_gethostbyaddr(
      ::Command_Gethostbyaddr* gethostbyaddr);
  ::Command_Gethostbyaddr* unsafe_arena_release_gethostbyaddr();

  // .Command.Getservbyname getservbyname = 21;
  bool has_getservbyname() const;
  private:
  bool _internal_has_getservbyname() const;
  public:
  void clear_getservbyname();
  const ::Command_Getservbyname& getservbyname() const;
  PROTOBUF_NODISCARD ::Command_Getservbyname* release_getservbyname();
  ::Command_Getservbyname* mutable_getservbyname();
  void set_allocated_getservbyname(::Command_Getservbyname* getservbyname);
  private:
  const ::Command_Getservbyname& _internal_getservbyname() const;
  ::Command_Getservbyname* _internal_mutable_getservbyname();
  public:
  void unsafe_arena_set_allocated_getservbyname(
      ::Command_Getservbyname* getservbyname);
  ::Command_Getservbyname* unsafe_arena_release_getservbyname();

  // .Command.Getservbyport getservbyport = 22;
  bool has_getservbyport() const;
  private:
  bool _internal_has_getservbyport() const;
  public:
  void clear_getservbyport();
  const ::Command_Getservbyport& getservbyport() const;
  PROTOBUF_NODISCARD ::Command_Getservbyport* release_getservbyport();
  ::Command_Getservbyport* mutable_getservbyport();
  void set_allocated_getservbyport(::Command_Getservbyport* getservbyport);
  private:
  const ::Command_Getservbyport& _internal_getservbyport() const;
  ::Command_Getservbyport* _internal_mutable_getservbyport();
  public:
  void unsafe_arena_set_allocated_getservbyport(
      ::Command_Getservbyport* getservbyport);
  ::Command_Getservbyport* unsafe_arena_release_getservbyport();

  // .Command.SockAccept sock_accept = 23;
  bool has_sock_accept() const;
  private:
  bool _internal_has_sock_accept() const;
  public:
  void clear_sock_accept();
  const ::Command_SockAccept& sock_accept() const;
  PROTOBUF_NODISCARD ::Command_SockAccept* release_sock_accept();
  ::Command_SockAccept* mutable_sock_accept();
  void set_allocated_sock_accept(::Command_SockAccept* sock_accept);
  private:
  const ::Command_SockAccept& _internal_sock_accept() const;
  ::Command_SockAccept* _internal_mutable_sock_accept();
  public:
  void unsafe_arena_set_allocated_sock_accept(
      ::Command_SockAccept* sock_accept);
  ::Command_SockAccept* unsafe_arena_release_sock_accept();

  // .Command.SockBind sock_bind = 24;
  bool has_sock_bind() const;
  private:
  bool _internal_has_sock_bind() const;
  public:
  void clear_sock_bind();
  const ::Command_SockBind& sock_bind() const;
  PROTOBUF_NODISCARD ::Command_SockBind* release_sock_bind();
  ::Command_SockBind* mutable_sock_bind();
  void set_allocated_sock_bind(::Command_SockBind* sock_bind);
  private:
  const ::Command_SockBind& _internal_sock_bind() const;
  ::Command_SockBind* _internal_mutable_sock_bind();
  public:
  void unsafe_arena_set_allocated_sock_bind(
      ::Command_SockBind* sock_bind);
  ::Command_SockBind* unsafe_arena_release_sock_bind();

  // .Command.SockListen sock_listen = 25;
  bool has_sock_listen() const;
  private:
  bool _internal_has_sock_listen() const;
  public:
  void clear_sock_listen();
  const ::Command_SockListen& sock_listen() const;
  PROTOBUF_NODISCARD ::Command_SockListen* release_sock_listen();
  ::Command_SockListen* mutable_sock_listen();
  void set_allocated_sock_listen(::Command_SockListen* sock_listen);
  private:
  const ::Command_SockListen& _internal_sock_listen() const;
  ::Command_SockListen* _internal_mutable_sock_listen();
  public:
  void unsafe_arena_set_allocated_sock_listen(
      ::Command_SockListen* sock_listen);
  ::Command_SockListen* unsafe_arena_release_sock_listen();

  // .Command.SockConnect sock_connect = 26;
  bool has_sock_connect() const;
  private:
  bool _internal_has_sock_connect() const;
  public:
  void clear_sock_connect();
  const ::Command_SockConnect& sock_connect() const;
  PROTOBUF_NODISCARD ::Command_SockConnect* release_sock_connect();
  ::Command_SockConnect* mutable_sock_connect();
  void set_allocated_sock_connect(::Command_SockConnect* sock_connect);
  private:
  const ::Command_SockConnect& _internal_sock_connect() const;
  ::Command_SockConnect* _internal_mutable_sock_connect();
  public:
  void unsafe_arena_set_allocated_sock_connect(
      ::Command_SockConnect* sock_connect);
  ::Command_SockConnect* unsafe_arena_release_sock_connect();

  // .Command.SockConnectEx sock_connect_ex = 27;
  bool has_sock_connect_ex() const;
  private:
  bool _internal_has_sock_connect_ex() const;
  public:
  void clear_sock_connect_ex();
  const ::Command_SockConnectEx& sock_connect_ex() const;
  PROTOBUF_NODISCARD ::Command_SockConnectEx* release_sock_connect_ex();
  ::Command_SockConnectEx* mutable_sock_connect_ex();
  void set_allocated_sock_connect_ex(::Command_SockConnectEx* sock_connect_ex);
  private:
  const ::Command_SockConnectEx& _internal_sock_connect_ex() const;
  ::Command_SockConnectEx* _internal_mutable_sock_connect_ex();
  public:
  void unsafe_arena_set_allocated_sock_connect_ex(
      ::Command_SockConnectEx* sock_connect_ex);
  ::Command_SockConnectEx* unsafe_arena_release_sock_connect_ex();

  // .Command.SockShutdown sock_shutdown = 28;
  bool has_sock_shutdown() const;
  private:
  bool _internal_has_sock_shutdown() const;
  public:
  void clear_sock_shutdown();
  const ::Command_SockShutdown& sock_shutdown() const;
  PROTOBUF_NODISCARD ::Command_SockShutdown* release_sock_shutdown();
  ::Command_SockShutdown* mutable_sock_shutdown();
  void set_allocated_sock_shutdown(::Command_SockShutdown* sock_shutdown);
  private:
  const ::Command_SockShutdown& _internal_sock_shutdown() const;
  ::Command_SockShutdown* _internal_mutable_sock_shutdown();
  public:
  void unsafe_arena_set_allocated_sock_shutdown(
      ::Command_SockShutdown* sock_shutdown);
  ::Command_SockShutdown* unsafe_arena_release_sock_shutdown();

  // .Command.SockSetsockopt sock_setsockopt = 29;
  bool has_sock_setsockopt() const;
  private:
  bool _internal_has_sock_setsockopt() const;
  public:
  void clear_sock_setsockopt();
  const ::Command_SockSetsockopt& sock_setsockopt() const;
  PROTOBUF_NODISCARD ::Command_SockSetsockopt* release_sock_setsockopt();
  ::Command_SockSetsockopt* mutable_sock_setsockopt();
  void set_allocated_sock_setsockopt(::Command_SockSetsockopt* sock_setsockopt);
  private:
  const ::Command_SockSetsockopt& _internal_sock_setsockopt() const;
  ::Command_SockSetsockopt* _internal_mutable_sock_setsockopt();
  public:
  void unsafe_arena_set_allocated_sock_setsockopt(
      ::Command_SockSetsockopt* sock_setsockopt);
  ::Command_SockSetsockopt* unsafe_arena_release_sock_setsockopt();

  // .Command.SockGetsockopt sock_getsockopt = 30;
  bool has_sock_getsockopt() const;
  private:
  bool _internal_has_sock_getsockopt() const;
  public:
  void clear_sock_getsockopt();
  const ::Command_SockGetsockopt& sock_getsockopt() const;
  PROTOBUF_NODISCARD ::Command_SockGetsockopt* release_sock_getsockopt();
  ::Command_SockGetsockopt* mutable_sock_getsockopt();
  void set_allocated_sock_getsockopt(::Command_SockGetsockopt* sock_getsockopt);
  private:
  const ::Command_SockGetsockopt& _internal_sock_getsockopt() const;
  ::Command_SockGetsockopt* _internal_mutable_sock_getsockopt();
  public:
  void unsafe_arena_set_allocated_sock_getsockopt(
      ::Command_SockGetsockopt* sock_getsockopt);
  ::Command_SockGetsockopt* unsafe_arena_release_sock_getsockopt();

  // .Command.SockSend sock_send = 31;
  bool has_sock_send() const;
  private:
  bool _internal_has_sock_send() const;
  public:
  void clear_sock_send();
  const ::Command_SockSend& sock_send() const;
  PROTOBUF_NODISCARD ::Command_SockSend* release_sock_send();
  ::Command_SockSend* mutable_sock_send();
  void set_allocated_sock_send(::Command_SockSend* sock_send);
  private:
  const ::Command_SockSend& _internal_sock_send() const;
  ::Command_SockSend* _internal_mutable_sock_send();
  public:
  void unsafe_arena_set_allocated_sock_send(
      ::Command_SockSend* sock_send);
  ::Command_SockSend* unsafe_arena_release_sock_send();

  // .Command.SockSendto sock_sendto = 32;
  bool has_sock_sendto() const;
  private:
  bool _internal_has_sock_sendto() const;
  public:
  void clear_sock_sendto();
  const ::Command_SockSendto& sock_sendto() const;
  PROTOBUF_NODISCARD ::Command_SockSendto* release_sock_sendto();
  ::Command_SockSendto* mutable_sock_sendto();
  void set_allocated_sock_sendto(::Command_SockSendto* sock_sendto);
  private:
  const ::Command_SockSendto& _internal_sock_sendto() const;
  ::Command_SockSendto* _internal_mutable_sock_sendto();
  public:
  void unsafe_arena_set_allocated_sock_sendto(
      ::Command_SockSendto* sock_sendto);
  ::Command_SockSendto* unsafe_arena_release_sock_sendto();

  // .Command.SockSendall sock_sendall = 33;
  bool has_sock_sendall() const;
  private:
  bool _internal_has_sock_sendall() const;
  public:
  void clear_sock_sendall();
  const ::Command_SockSendall& sock_sendall() const;
  PROTOBUF_NODISCARD ::Command_SockSendall* release_sock_sendall();
  ::Command_SockSendall* mutable_sock_sendall();
  void set_allocated_sock_sendall(::Command_SockSendall* sock_sendall);
  private:
  const ::Command_SockSendall& _internal_sock_sendall() const;
  ::Command_SockSendall* _internal_mutable_sock_sendall();
  public:
  void unsafe_arena_set_allocated_sock_sendall(
      ::Command_SockSendall* sock_sendall);
  ::Command_SockSendall* unsafe_arena_release_sock_sendall();

  // .Command.SockSendmsg sock_sendmsg = 34;
  bool has_sock_sendmsg() const;
  private:
  bool _internal_has_sock_sendmsg() const;
  public:
  void clear_sock_sendmsg();
  const ::Command_SockSendmsg& sock_sendmsg() const;
  PROTOBUF_NODISCARD ::Command_SockSendmsg* release_sock_sendmsg();
  ::Command_SockSendmsg* mutable_sock_sendmsg();
  void set_allocated_sock_sendmsg(::Command_SockSendmsg* sock_sendmsg);
  private:
  const ::Command_SockSendmsg& _internal_sock_sendmsg() const;
  ::Command_SockSendmsg* _internal_mutable_sock_sendmsg();
  public:
  void unsafe_arena_set_allocated_sock_sendmsg(
      ::Command_SockSendmsg* sock_sendmsg);
  ::Command_SockSendmsg* unsafe_arena_release_sock_sendmsg();

  // .Command.SockRecv sock_recv = 35;
  bool has_sock_recv() const;
  private:
  bool _internal_has_sock_recv() const;
  public:
  void clear_sock_recv();
  const ::Command_SockRecv& sock_recv() const;
  PROTOBUF_NODISCARD ::Command_SockRecv* release_sock_recv();
  ::Command_SockRecv* mutable_sock_recv();
  void set_allocated_sock_recv(::Command_SockRecv* sock_recv);
  private:
  const ::Command_SockRecv& _internal_sock_recv() const;
  ::Command_SockRecv* _internal_mutable_sock_recv();
  public:
  void unsafe_arena_set_allocated_sock_recv(
      ::Command_SockRecv* sock_recv);
  ::Command_SockRecv* unsafe_arena_release_sock_recv();

  // .Command.SockRecvfrom sock_recvfrom = 36;
  bool has_sock_recvfrom() const;
  private:
  bool _internal_has_sock_recvfrom() const;
  public:
  void clear_sock_recvfrom();
  const ::Command_SockRecvfrom& sock_recvfrom() const;
  PROTOBUF_NODISCARD ::Command_SockRecvfrom* release_sock_recvfrom();
  ::Command_SockRecvfrom* mutable_sock_recvfrom();
  void set_allocated_sock_recvfrom(::Command_SockRecvfrom* sock_recvfrom);
  private:
  const ::Command_SockRecvfrom& _internal_sock_recvfrom() const;
  ::Command_SockRecvfrom* _internal_mutable_sock_recvfrom();
  public:
  void unsafe_arena_set_allocated_sock_recvfrom(
      ::Command_SockRecvfrom* sock_recvfrom);
  ::Command_SockRecvfrom* unsafe_arena_release_sock_recvfrom();

  // .Command.SockRecvmsg sock_recvmsg = 37;
  bool has_sock_recvmsg() const;
  private:
  bool _internal_has_sock_recvmsg() const;
  public:
  void clear_sock_recvmsg();
  const ::Command_SockRecvmsg& sock_recvmsg() const;
  PROTOBUF_NODISCARD ::Command_SockRecvmsg* release_sock_recvmsg();
  ::Command_SockRecvmsg* mutable_sock_recvmsg();
  void set_allocated_sock_recvmsg(::Command_SockRecvmsg* sock_recvmsg);
  private:
  const ::Command_SockRecvmsg& _internal_sock_recvmsg() const;
  ::Command_SockRecvmsg* _internal_mutable_sock_recvmsg();
  public:
  void unsafe_arena_set_allocated_sock_recvmsg(
      ::Command_SockRecvmsg* sock_recvmsg);
  ::Command_SockRecvmsg* unsafe_arena_release_sock_recvmsg();

  // .Command.SockRecvInto sock_recv_into = 38;
  bool has_sock_recv_into() const;
  private:
  bool _internal_has_sock_recv_into() const;
  public:
  void clear_sock_recv_into();
  const ::Command_SockRecvInto& sock_recv_into() const;
  PROTOBUF_NODISCARD ::Command_SockRecvInto* release_sock_recv_into();
  ::Command_SockRecvInto* mutable_sock_recv_into();
  void set_allocated_sock_recv_into(::Command_SockRecvInto* sock_recv_into);
  private:
  const ::Command_SockRecvInto& _internal_sock_recv_into() const;
  ::Command_SockRecvInto* _internal_mutable_sock_recv_into();
  public:
  void unsafe_arena_set_allocated_sock_recv_into(
      ::Command_SockRecvInto* sock_recv_into);
  ::Command_SockRecvInto* unsafe_arena_release_sock_recv_into();

  // .Command.SockRecvfromInto sock_recvfrom_into = 39;
  bool has_sock_recvfrom_into() const;
  private:
  bool _internal_has_sock_recvfrom_into() const;
  public:
  void clear_sock_recvfrom_into();
  const ::Command_SockRecvfromInto& sock_recvfrom_into() const;
  PROTOBUF_NODISCARD ::Command_SockRecvfromInto* release_sock_recvfrom_into();
  ::Command_SockRecvfromInto* mutable_sock_recvfrom_into();
  void set_allocated_sock_recvfrom_into(::Command_SockRecvfromInto* sock_recvfrom_into);
  private:
  const ::Command_SockRecvfromInto& _internal_sock_recvfrom_into() const;
  ::Command_SockRecvfromInto* _internal_mutable_sock_recvfrom_into();
  public:
  void unsafe_arena_set_allocated_sock_recvfrom_into(
      ::Command_SockRecvfromInto* sock_recvfrom_into);
  ::Command_SockRecvfromInto* unsafe_arena_release_sock_recvfrom_into();

  // .Command.SockRecvmsgInto sock_recvmsg_into = 40;
  bool has_sock_recvmsg_into() const;
  private:
  bool _internal_has_sock_recvmsg_into() const;
  public:
  void clear_sock_recvmsg_into();
  const ::Command_SockRecvmsgInto& sock_recvmsg_into() const;
  PROTOBUF_NODISCARD ::Command_SockRecvmsgInto* release_sock_recvmsg_into();
  ::Command_SockRecvmsgInto* mutable_sock_recvmsg_into();
  void set_allocated_sock_recvmsg_into(::Command_SockRecvmsgInto* sock_recvmsg_into);
  private:
  const ::Command_SockRecvmsgInto& _internal_sock_recvmsg_into() const;
  ::Command_SockRecvmsgInto* _internal_mutable_sock_recvmsg_into();
  public:
  void unsafe_arena_set_allocated_sock_recvmsg_into(
      ::Command_SockRecvmsgInto* sock_recvmsg_into);
  ::Command_SockRecvmsgInto* unsafe_arena_release_sock_recvmsg_into();

  // .Command.SockSettimeout sock_settimeout = 41;
  bool has_sock_settimeout() const;
  private:
  bool _internal_has_sock_settimeout() const;
  public:
  void clear_sock_settimeout();
  const ::Command_SockSettimeout& sock_settimeout() const;
  PROTOBUF_NODISCARD ::Command_SockSettimeout* release_sock_settimeout();
  ::Command_SockSettimeout* mutable_sock_settimeout();
  void set_allocated_sock_settimeout(::Command_SockSettimeout* sock_settimeout);
  private:
  const ::Command_SockSettimeout& _internal_sock_settimeout() const;
  ::Command_SockSettimeout* _internal_mutable_sock_settimeout();
  public:
  void unsafe_arena_set_allocated_sock_settimeout(
      ::Command_SockSettimeout* sock_settimeout);
  ::Command_SockSettimeout* unsafe_arena_release_sock_settimeout();

  // .Command.SockSetblocking sock_setblocking = 42;
  bool has_sock_setblocking() const;
  private:
  bool _internal_has_sock_setblocking() const;
  public:
  void clear_sock_setblocking();
  const ::Command_SockSetblocking& sock_setblocking() const;
  PROTOBUF_NODISCARD ::Command_SockSetblocking* release_sock_setblocking();
  ::Command_SockSetblocking* mutable_sock_setblocking();
  void set_allocated_sock_setblocking(::Command_SockSetblocking* sock_setblocking);
  private:
  const ::Command_SockSetblocking& _internal_sock_setblocking() const;
  ::Command_SockSetblocking* _internal_mutable_sock_setblocking();
  public:
  void unsafe_arena_set_allocated_sock_setblocking(
      ::Command_SockSetblocking* sock_setblocking);
  ::Command_SockSetblocking* unsafe_arena_release_sock_setblocking();

  void clear_cmd();
  CmdCase cmd_case() const;
  // @@protoc_insertion_point(class_scope:Command)
 private:
  class _Internal;
  void set_has_sock_socket();
  void set_has_sock_socketpair();
  void set_has_sock_dup();
  void set_has_sock_close();
  void set_has_inet_pton();
  void set_has_inet_ntop();
  void set_has_inet_aton();
  void set_has_inet_ntoa();
  void set_has_htons();
  void set_has_htonl();
  void set_has_ntohs();
  void set_has_ntohl();
  void set_has_getaddrinfo();
  void set_has_getnameinfo();
  void set_has_if_nameindex();
  void set_has_if_nametoindex();
  void set_has_if_indextoname();
  void set_has_gethostbyname();
  void set_has_gethostbyname_ex();
  void set_has_gethostbyaddr();
  void set_has_getservbyname();
  void set_has_getservbyport();
  void set_has_sock_accept();
  void set_has_sock_bind();
  void set_has_sock_listen();
  void set_has_sock_connect();
  void set_has_sock_connect_ex();
  void set_has_sock_shutdown();
  void set_has_sock_setsockopt();
  void set_has_sock_getsockopt();
  void set_has_sock_send();
  void set_has_sock_sendto();
  void set_has_sock_sendall();
  void set_has_sock_sendmsg();
  void set_has_sock_recv();
  void set_has_sock_recvfrom();
  void set_has_sock_recvmsg();
  void set_has_sock_recv_into();
  void set_has_sock_recvfrom_into();
  void set_has_sock_recvmsg_into();
  void set_has_sock_settimeout();
  void set_has_sock_setblocking();

  inline bool has_cmd() const;
  inline void clear_has_cmd();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union CmdUnion {
      constexpr CmdUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::Command_SockSocket* sock_socket_;
      ::Command_SockSocketpair* sock_socketpair_;
      ::Command_SockDup* sock_dup_;
      ::Command_SockClose* sock_close_;
      ::Command_InetPton* inet_pton_;
      ::Command_InetNtop* inet_ntop_;
      ::Command_InetAton* inet_aton_;
      ::Command_InetNtoa* inet_ntoa_;
      ::Command_Htons* htons_;
      ::Command_Htonl* htonl_;
      ::Command_Ntohs* ntohs_;
      ::Command_Ntohl* ntohl_;
      ::Command_Getaddrinfo* getaddrinfo_;
      ::Command_Getnameinfo* getnameinfo_;
      ::Command_IfNameindex* if_nameindex_;
      ::Command_IfNametoindex* if_nametoindex_;
      ::Command_IfIndextoname* if_indextoname_;
      ::Command_Gethostbyname* gethostbyname_;
      ::Command_GethostbynameEx* gethostbyname_ex_;
      ::Command_Gethostbyaddr* gethostbyaddr_;
      ::Command_Getservbyname* getservbyname_;
      ::Command_Getservbyport* getservbyport_;
      ::Command_SockAccept* sock_accept_;
      ::Command_SockBind* sock_bind_;
      ::Command_SockListen* sock_listen_;
      ::Command_SockConnect* sock_connect_;
      ::Command_SockConnectEx* sock_connect_ex_;
      ::Command_SockShutdown* sock_shutdown_;
      ::Command_SockSetsockopt* sock_setsockopt_;
      ::Command_SockGetsockopt* sock_getsockopt_;
      ::Command_SockSend* sock_send_;
      ::Command_SockSendto* sock_sendto_;
      ::Command_SockSendall* sock_sendall_;
      ::Command_SockSendmsg* sock_sendmsg_;
      ::Command_SockRecv* sock_recv_;
      ::Command_SockRecvfrom* sock_recvfrom_;
      ::Command_SockRecvmsg* sock_recvmsg_;
      ::Command_SockRecvInto* sock_recv_into_;
      ::Command_SockRecvfromInto* sock_recvfrom_into_;
      ::Command_SockRecvmsgInto* sock_recvmsg_into_;
      ::Command_SockSettimeout* sock_settimeout_;
      ::Command_SockSetblocking* sock_setblocking_;
    } cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Program final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Program) */ {
 public:
  inline Program() : Program(nullptr) {}
  ~Program() override;
  explicit PROTOBUF_CONSTEXPR Program(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Program(const Program& from);
  Program(Program&& from) noexcept
    : Program() {
    *this = ::std::move(from);
  }

  inline Program& operator=(const Program& from) {
    CopyFrom(from);
    return *this;
  }
  inline Program& operator=(Program&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Program& default_instance() {
    return *internal_default_instance();
  }
  static inline const Program* internal_default_instance() {
    return reinterpret_cast<const Program*>(
               &_Program_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(Program& a, Program& b) {
    a.Swap(&b);
  }
  inline void Swap(Program* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Program* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Program* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Program>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Program& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Program& from) {
    Program::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Program* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Program";
  }
  protected:
  explicit Program(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdsFieldNumber = 2,
    kInitFieldNumber = 1,
  };
  // repeated .Command cmds = 2;
  int cmds_size() const;
  private:
  int _internal_cmds_size() const;
  public:
  void clear_cmds();
  ::Command* mutable_cmds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Command >*
      mutable_cmds();
  private:
  const ::Command& _internal_cmds(int index) const;
  ::Command* _internal_add_cmds();
  public:
  const ::Command& cmds(int index) const;
  ::Command* add_cmds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Command >&
      cmds() const;

  // .Header init = 1;
  bool has_init() const;
  private:
  bool _internal_has_init() const;
  public:
  void clear_init();
  const ::Header& init() const;
  PROTOBUF_NODISCARD ::Header* release_init();
  ::Header* mutable_init();
  void set_allocated_init(::Header* init);
  private:
  const ::Header& _internal_init() const;
  ::Header* _internal_mutable_init();
  public:
  void unsafe_arena_set_allocated_init(
      ::Header* init);
  ::Header* unsafe_arena_release_init();

  // @@protoc_insertion_point(class_scope:Program)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Command > cmds_;
    ::Header* init_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_socket_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header_SockInit

// uint32 id = 1;
inline void Header_SockInit::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Header_SockInit::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Header_SockInit::id() const {
  // @@protoc_insertion_point(field_get:Header.SockInit.id)
  return _internal_id();
}
inline void Header_SockInit::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Header_SockInit::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Header.SockInit.id)
}

// uint32 family = 2;
inline void Header_SockInit::clear_family() {
  _impl_.family_ = 0u;
}
inline uint32_t Header_SockInit::_internal_family() const {
  return _impl_.family_;
}
inline uint32_t Header_SockInit::family() const {
  // @@protoc_insertion_point(field_get:Header.SockInit.family)
  return _internal_family();
}
inline void Header_SockInit::_internal_set_family(uint32_t value) {
  
  _impl_.family_ = value;
}
inline void Header_SockInit::set_family(uint32_t value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:Header.SockInit.family)
}

// uint32 type = 3;
inline void Header_SockInit::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t Header_SockInit::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t Header_SockInit::type() const {
  // @@protoc_insertion_point(field_get:Header.SockInit.type)
  return _internal_type();
}
inline void Header_SockInit::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void Header_SockInit::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Header.SockInit.type)
}

// bytes preload_send = 4;
inline void Header_SockInit::clear_preload_send() {
  _impl_.preload_send_.ClearToEmpty();
}
inline const std::string& Header_SockInit::preload_send() const {
  // @@protoc_insertion_point(field_get:Header.SockInit.preload_send)
  return _internal_preload_send();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header_SockInit::set_preload_send(ArgT0&& arg0, ArgT... args) {
 
 _impl_.preload_send_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Header.SockInit.preload_send)
}
inline std::string* Header_SockInit::mutable_preload_send() {
  std::string* _s = _internal_mutable_preload_send();
  // @@protoc_insertion_point(field_mutable:Header.SockInit.preload_send)
  return _s;
}
inline const std::string& Header_SockInit::_internal_preload_send() const {
  return _impl_.preload_send_.Get();
}
inline void Header_SockInit::_internal_set_preload_send(const std::string& value) {
  
  _impl_.preload_send_.Set(value, GetArenaForAllocation());
}
inline std::string* Header_SockInit::_internal_mutable_preload_send() {
  
  return _impl_.preload_send_.Mutable(GetArenaForAllocation());
}
inline std::string* Header_SockInit::release_preload_send() {
  // @@protoc_insertion_point(field_release:Header.SockInit.preload_send)
  return _impl_.preload_send_.Release();
}
inline void Header_SockInit::set_allocated_preload_send(std::string* preload_send) {
  if (preload_send != nullptr) {
    
  } else {
    
  }
  _impl_.preload_send_.SetAllocated(preload_send, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.preload_send_.IsDefault()) {
    _impl_.preload_send_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Header.SockInit.preload_send)
}

// -------------------------------------------------------------------

// Header

// repeated .Header.SockInit socks = 1;
inline int Header::_internal_socks_size() const {
  return _impl_.socks_.size();
}
inline int Header::socks_size() const {
  return _internal_socks_size();
}
inline void Header::clear_socks() {
  _impl_.socks_.Clear();
}
inline ::Header_SockInit* Header::mutable_socks(int index) {
  // @@protoc_insertion_point(field_mutable:Header.socks)
  return _impl_.socks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Header_SockInit >*
Header::mutable_socks() {
  // @@protoc_insertion_point(field_mutable_list:Header.socks)
  return &_impl_.socks_;
}
inline const ::Header_SockInit& Header::_internal_socks(int index) const {
  return _impl_.socks_.Get(index);
}
inline const ::Header_SockInit& Header::socks(int index) const {
  // @@protoc_insertion_point(field_get:Header.socks)
  return _internal_socks(index);
}
inline ::Header_SockInit* Header::_internal_add_socks() {
  return _impl_.socks_.Add();
}
inline ::Header_SockInit* Header::add_socks() {
  ::Header_SockInit* _add = _internal_add_socks();
  // @@protoc_insertion_point(field_add:Header.socks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Header_SockInit >&
Header::socks() const {
  // @@protoc_insertion_point(field_list:Header.socks)
  return _impl_.socks_;
}

// -------------------------------------------------------------------

// Command_SockSocket

// uint32 family = 1;
inline void Command_SockSocket::clear_family() {
  _impl_.family_ = 0u;
}
inline uint32_t Command_SockSocket::_internal_family() const {
  return _impl_.family_;
}
inline uint32_t Command_SockSocket::family() const {
  // @@protoc_insertion_point(field_get:Command.SockSocket.family)
  return _internal_family();
}
inline void Command_SockSocket::_internal_set_family(uint32_t value) {
  
  _impl_.family_ = value;
}
inline void Command_SockSocket::set_family(uint32_t value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:Command.SockSocket.family)
}

// uint32 type = 2;
inline void Command_SockSocket::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t Command_SockSocket::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t Command_SockSocket::type() const {
  // @@protoc_insertion_point(field_get:Command.SockSocket.type)
  return _internal_type();
}
inline void Command_SockSocket::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void Command_SockSocket::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Command.SockSocket.type)
}

// uint32 proto = 3;
inline void Command_SockSocket::clear_proto() {
  _impl_.proto_ = 0u;
}
inline uint32_t Command_SockSocket::_internal_proto() const {
  return _impl_.proto_;
}
inline uint32_t Command_SockSocket::proto() const {
  // @@protoc_insertion_point(field_get:Command.SockSocket.proto)
  return _internal_proto();
}
inline void Command_SockSocket::_internal_set_proto(uint32_t value) {
  
  _impl_.proto_ = value;
}
inline void Command_SockSocket::set_proto(uint32_t value) {
  _internal_set_proto(value);
  // @@protoc_insertion_point(field_set:Command.SockSocket.proto)
}

// uint32 target_id = 4;
inline void Command_SockSocket::clear_target_id() {
  _impl_.target_id_ = 0u;
}
inline uint32_t Command_SockSocket::_internal_target_id() const {
  return _impl_.target_id_;
}
inline uint32_t Command_SockSocket::target_id() const {
  // @@protoc_insertion_point(field_get:Command.SockSocket.target_id)
  return _internal_target_id();
}
inline void Command_SockSocket::_internal_set_target_id(uint32_t value) {
  
  _impl_.target_id_ = value;
}
inline void Command_SockSocket::set_target_id(uint32_t value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:Command.SockSocket.target_id)
}

// -------------------------------------------------------------------

// Command_SockSocketpair

// uint32 family = 1;
inline void Command_SockSocketpair::clear_family() {
  _impl_.family_ = 0u;
}
inline uint32_t Command_SockSocketpair::_internal_family() const {
  return _impl_.family_;
}
inline uint32_t Command_SockSocketpair::family() const {
  // @@protoc_insertion_point(field_get:Command.SockSocketpair.family)
  return _internal_family();
}
inline void Command_SockSocketpair::_internal_set_family(uint32_t value) {
  
  _impl_.family_ = value;
}
inline void Command_SockSocketpair::set_family(uint32_t value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:Command.SockSocketpair.family)
}

// uint32 type = 2;
inline void Command_SockSocketpair::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t Command_SockSocketpair::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t Command_SockSocketpair::type() const {
  // @@protoc_insertion_point(field_get:Command.SockSocketpair.type)
  return _internal_type();
}
inline void Command_SockSocketpair::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void Command_SockSocketpair::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Command.SockSocketpair.type)
}

// uint32 proto = 3;
inline void Command_SockSocketpair::clear_proto() {
  _impl_.proto_ = 0u;
}
inline uint32_t Command_SockSocketpair::_internal_proto() const {
  return _impl_.proto_;
}
inline uint32_t Command_SockSocketpair::proto() const {
  // @@protoc_insertion_point(field_get:Command.SockSocketpair.proto)
  return _internal_proto();
}
inline void Command_SockSocketpair::_internal_set_proto(uint32_t value) {
  
  _impl_.proto_ = value;
}
inline void Command_SockSocketpair::set_proto(uint32_t value) {
  _internal_set_proto(value);
  // @@protoc_insertion_point(field_set:Command.SockSocketpair.proto)
}

// uint32 id1 = 4;
inline void Command_SockSocketpair::clear_id1() {
  _impl_.id1_ = 0u;
}
inline uint32_t Command_SockSocketpair::_internal_id1() const {
  return _impl_.id1_;
}
inline uint32_t Command_SockSocketpair::id1() const {
  // @@protoc_insertion_point(field_get:Command.SockSocketpair.id1)
  return _internal_id1();
}
inline void Command_SockSocketpair::_internal_set_id1(uint32_t value) {
  
  _impl_.id1_ = value;
}
inline void Command_SockSocketpair::set_id1(uint32_t value) {
  _internal_set_id1(value);
  // @@protoc_insertion_point(field_set:Command.SockSocketpair.id1)
}

// uint32 id2 = 5;
inline void Command_SockSocketpair::clear_id2() {
  _impl_.id2_ = 0u;
}
inline uint32_t Command_SockSocketpair::_internal_id2() const {
  return _impl_.id2_;
}
inline uint32_t Command_SockSocketpair::id2() const {
  // @@protoc_insertion_point(field_get:Command.SockSocketpair.id2)
  return _internal_id2();
}
inline void Command_SockSocketpair::_internal_set_id2(uint32_t value) {
  
  _impl_.id2_ = value;
}
inline void Command_SockSocketpair::set_id2(uint32_t value) {
  _internal_set_id2(value);
  // @@protoc_insertion_point(field_set:Command.SockSocketpair.id2)
}

// -------------------------------------------------------------------

// Command_SockDup

// uint32 src_id = 1;
inline void Command_SockDup::clear_src_id() {
  _impl_.src_id_ = 0u;
}
inline uint32_t Command_SockDup::_internal_src_id() const {
  return _impl_.src_id_;
}
inline uint32_t Command_SockDup::src_id() const {
  // @@protoc_insertion_point(field_get:Command.SockDup.src_id)
  return _internal_src_id();
}
inline void Command_SockDup::_internal_set_src_id(uint32_t value) {
  
  _impl_.src_id_ = value;
}
inline void Command_SockDup::set_src_id(uint32_t value) {
  _internal_set_src_id(value);
  // @@protoc_insertion_point(field_set:Command.SockDup.src_id)
}

// uint32 dst_id = 2;
inline void Command_SockDup::clear_dst_id() {
  _impl_.dst_id_ = 0u;
}
inline uint32_t Command_SockDup::_internal_dst_id() const {
  return _impl_.dst_id_;
}
inline uint32_t Command_SockDup::dst_id() const {
  // @@protoc_insertion_point(field_get:Command.SockDup.dst_id)
  return _internal_dst_id();
}
inline void Command_SockDup::_internal_set_dst_id(uint32_t value) {
  
  _impl_.dst_id_ = value;
}
inline void Command_SockDup::set_dst_id(uint32_t value) {
  _internal_set_dst_id(value);
  // @@protoc_insertion_point(field_set:Command.SockDup.dst_id)
}

// -------------------------------------------------------------------

// Command_SockClose

// uint32 id = 1;
inline void Command_SockClose::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockClose::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockClose::id() const {
  // @@protoc_insertion_point(field_get:Command.SockClose.id)
  return _internal_id();
}
inline void Command_SockClose::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockClose::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockClose.id)
}

// -------------------------------------------------------------------

// Command_InetPton

// uint32 family = 1;
inline void Command_InetPton::clear_family() {
  _impl_.family_ = 0u;
}
inline uint32_t Command_InetPton::_internal_family() const {
  return _impl_.family_;
}
inline uint32_t Command_InetPton::family() const {
  // @@protoc_insertion_point(field_get:Command.InetPton.family)
  return _internal_family();
}
inline void Command_InetPton::_internal_set_family(uint32_t value) {
  
  _impl_.family_ = value;
}
inline void Command_InetPton::set_family(uint32_t value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:Command.InetPton.family)
}

// string text = 2;
inline void Command_InetPton::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& Command_InetPton::text() const {
  // @@protoc_insertion_point(field_get:Command.InetPton.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_InetPton::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.InetPton.text)
}
inline std::string* Command_InetPton::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:Command.InetPton.text)
  return _s;
}
inline const std::string& Command_InetPton::_internal_text() const {
  return _impl_.text_.Get();
}
inline void Command_InetPton::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_InetPton::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_InetPton::release_text() {
  // @@protoc_insertion_point(field_release:Command.InetPton.text)
  return _impl_.text_.Release();
}
inline void Command_InetPton::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.InetPton.text)
}

// -------------------------------------------------------------------

// Command_InetNtop

// uint32 family = 1;
inline void Command_InetNtop::clear_family() {
  _impl_.family_ = 0u;
}
inline uint32_t Command_InetNtop::_internal_family() const {
  return _impl_.family_;
}
inline uint32_t Command_InetNtop::family() const {
  // @@protoc_insertion_point(field_get:Command.InetNtop.family)
  return _internal_family();
}
inline void Command_InetNtop::_internal_set_family(uint32_t value) {
  
  _impl_.family_ = value;
}
inline void Command_InetNtop::set_family(uint32_t value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:Command.InetNtop.family)
}

// bytes packed = 2;
inline void Command_InetNtop::clear_packed() {
  _impl_.packed_.ClearToEmpty();
}
inline const std::string& Command_InetNtop::packed() const {
  // @@protoc_insertion_point(field_get:Command.InetNtop.packed)
  return _internal_packed();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_InetNtop::set_packed(ArgT0&& arg0, ArgT... args) {
 
 _impl_.packed_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.InetNtop.packed)
}
inline std::string* Command_InetNtop::mutable_packed() {
  std::string* _s = _internal_mutable_packed();
  // @@protoc_insertion_point(field_mutable:Command.InetNtop.packed)
  return _s;
}
inline const std::string& Command_InetNtop::_internal_packed() const {
  return _impl_.packed_.Get();
}
inline void Command_InetNtop::_internal_set_packed(const std::string& value) {
  
  _impl_.packed_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_InetNtop::_internal_mutable_packed() {
  
  return _impl_.packed_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_InetNtop::release_packed() {
  // @@protoc_insertion_point(field_release:Command.InetNtop.packed)
  return _impl_.packed_.Release();
}
inline void Command_InetNtop::set_allocated_packed(std::string* packed) {
  if (packed != nullptr) {
    
  } else {
    
  }
  _impl_.packed_.SetAllocated(packed, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.packed_.IsDefault()) {
    _impl_.packed_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.InetNtop.packed)
}

// -------------------------------------------------------------------

// Command_InetAton

// string text = 1;
inline void Command_InetAton::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& Command_InetAton::text() const {
  // @@protoc_insertion_point(field_get:Command.InetAton.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_InetAton::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.InetAton.text)
}
inline std::string* Command_InetAton::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:Command.InetAton.text)
  return _s;
}
inline const std::string& Command_InetAton::_internal_text() const {
  return _impl_.text_.Get();
}
inline void Command_InetAton::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_InetAton::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_InetAton::release_text() {
  // @@protoc_insertion_point(field_release:Command.InetAton.text)
  return _impl_.text_.Release();
}
inline void Command_InetAton::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.InetAton.text)
}

// -------------------------------------------------------------------

// Command_InetNtoa

// bytes packed = 1;
inline void Command_InetNtoa::clear_packed() {
  _impl_.packed_.ClearToEmpty();
}
inline const std::string& Command_InetNtoa::packed() const {
  // @@protoc_insertion_point(field_get:Command.InetNtoa.packed)
  return _internal_packed();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_InetNtoa::set_packed(ArgT0&& arg0, ArgT... args) {
 
 _impl_.packed_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.InetNtoa.packed)
}
inline std::string* Command_InetNtoa::mutable_packed() {
  std::string* _s = _internal_mutable_packed();
  // @@protoc_insertion_point(field_mutable:Command.InetNtoa.packed)
  return _s;
}
inline const std::string& Command_InetNtoa::_internal_packed() const {
  return _impl_.packed_.Get();
}
inline void Command_InetNtoa::_internal_set_packed(const std::string& value) {
  
  _impl_.packed_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_InetNtoa::_internal_mutable_packed() {
  
  return _impl_.packed_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_InetNtoa::release_packed() {
  // @@protoc_insertion_point(field_release:Command.InetNtoa.packed)
  return _impl_.packed_.Release();
}
inline void Command_InetNtoa::set_allocated_packed(std::string* packed) {
  if (packed != nullptr) {
    
  } else {
    
  }
  _impl_.packed_.SetAllocated(packed, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.packed_.IsDefault()) {
    _impl_.packed_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.InetNtoa.packed)
}

// -------------------------------------------------------------------

// Command_Htons

// uint32 val = 1;
inline void Command_Htons::clear_val() {
  _impl_.val_ = 0u;
}
inline uint32_t Command_Htons::_internal_val() const {
  return _impl_.val_;
}
inline uint32_t Command_Htons::val() const {
  // @@protoc_insertion_point(field_get:Command.Htons.val)
  return _internal_val();
}
inline void Command_Htons::_internal_set_val(uint32_t value) {
  
  _impl_.val_ = value;
}
inline void Command_Htons::set_val(uint32_t value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:Command.Htons.val)
}

// -------------------------------------------------------------------

// Command_Htonl

// uint32 val = 1;
inline void Command_Htonl::clear_val() {
  _impl_.val_ = 0u;
}
inline uint32_t Command_Htonl::_internal_val() const {
  return _impl_.val_;
}
inline uint32_t Command_Htonl::val() const {
  // @@protoc_insertion_point(field_get:Command.Htonl.val)
  return _internal_val();
}
inline void Command_Htonl::_internal_set_val(uint32_t value) {
  
  _impl_.val_ = value;
}
inline void Command_Htonl::set_val(uint32_t value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:Command.Htonl.val)
}

// -------------------------------------------------------------------

// Command_Ntohs

// uint32 val = 1;
inline void Command_Ntohs::clear_val() {
  _impl_.val_ = 0u;
}
inline uint32_t Command_Ntohs::_internal_val() const {
  return _impl_.val_;
}
inline uint32_t Command_Ntohs::val() const {
  // @@protoc_insertion_point(field_get:Command.Ntohs.val)
  return _internal_val();
}
inline void Command_Ntohs::_internal_set_val(uint32_t value) {
  
  _impl_.val_ = value;
}
inline void Command_Ntohs::set_val(uint32_t value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:Command.Ntohs.val)
}

// -------------------------------------------------------------------

// Command_Ntohl

// uint32 val = 1;
inline void Command_Ntohl::clear_val() {
  _impl_.val_ = 0u;
}
inline uint32_t Command_Ntohl::_internal_val() const {
  return _impl_.val_;
}
inline uint32_t Command_Ntohl::val() const {
  // @@protoc_insertion_point(field_get:Command.Ntohl.val)
  return _internal_val();
}
inline void Command_Ntohl::_internal_set_val(uint32_t value) {
  
  _impl_.val_ = value;
}
inline void Command_Ntohl::set_val(uint32_t value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:Command.Ntohl.val)
}

// -------------------------------------------------------------------

// Command_Getaddrinfo

// string host = 1;
inline void Command_Getaddrinfo::clear_host() {
  _impl_.host_.ClearToEmpty();
}
inline const std::string& Command_Getaddrinfo::host() const {
  // @@protoc_insertion_point(field_get:Command.Getaddrinfo.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Getaddrinfo::set_host(ArgT0&& arg0, ArgT... args) {
 
 _impl_.host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.Getaddrinfo.host)
}
inline std::string* Command_Getaddrinfo::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:Command.Getaddrinfo.host)
  return _s;
}
inline const std::string& Command_Getaddrinfo::_internal_host() const {
  return _impl_.host_.Get();
}
inline void Command_Getaddrinfo::_internal_set_host(const std::string& value) {
  
  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Getaddrinfo::_internal_mutable_host() {
  
  return _impl_.host_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Getaddrinfo::release_host() {
  // @@protoc_insertion_point(field_release:Command.Getaddrinfo.host)
  return _impl_.host_.Release();
}
inline void Command_Getaddrinfo::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  _impl_.host_.SetAllocated(host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.host_.IsDefault()) {
    _impl_.host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.Getaddrinfo.host)
}

// string service = 2;
inline void Command_Getaddrinfo::clear_service() {
  _impl_.service_.ClearToEmpty();
}
inline const std::string& Command_Getaddrinfo::service() const {
  // @@protoc_insertion_point(field_get:Command.Getaddrinfo.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Getaddrinfo::set_service(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.Getaddrinfo.service)
}
inline std::string* Command_Getaddrinfo::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:Command.Getaddrinfo.service)
  return _s;
}
inline const std::string& Command_Getaddrinfo::_internal_service() const {
  return _impl_.service_.Get();
}
inline void Command_Getaddrinfo::_internal_set_service(const std::string& value) {
  
  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Getaddrinfo::_internal_mutable_service() {
  
  return _impl_.service_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Getaddrinfo::release_service() {
  // @@protoc_insertion_point(field_release:Command.Getaddrinfo.service)
  return _impl_.service_.Release();
}
inline void Command_Getaddrinfo::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  _impl_.service_.SetAllocated(service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.Getaddrinfo.service)
}

// uint32 family = 3;
inline void Command_Getaddrinfo::clear_family() {
  _impl_.family_ = 0u;
}
inline uint32_t Command_Getaddrinfo::_internal_family() const {
  return _impl_.family_;
}
inline uint32_t Command_Getaddrinfo::family() const {
  // @@protoc_insertion_point(field_get:Command.Getaddrinfo.family)
  return _internal_family();
}
inline void Command_Getaddrinfo::_internal_set_family(uint32_t value) {
  
  _impl_.family_ = value;
}
inline void Command_Getaddrinfo::set_family(uint32_t value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:Command.Getaddrinfo.family)
}

// uint32 type = 4;
inline void Command_Getaddrinfo::clear_type() {
  _impl_.type_ = 0u;
}
inline uint32_t Command_Getaddrinfo::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t Command_Getaddrinfo::type() const {
  // @@protoc_insertion_point(field_get:Command.Getaddrinfo.type)
  return _internal_type();
}
inline void Command_Getaddrinfo::_internal_set_type(uint32_t value) {
  
  _impl_.type_ = value;
}
inline void Command_Getaddrinfo::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Command.Getaddrinfo.type)
}

// uint32 proto = 5;
inline void Command_Getaddrinfo::clear_proto() {
  _impl_.proto_ = 0u;
}
inline uint32_t Command_Getaddrinfo::_internal_proto() const {
  return _impl_.proto_;
}
inline uint32_t Command_Getaddrinfo::proto() const {
  // @@protoc_insertion_point(field_get:Command.Getaddrinfo.proto)
  return _internal_proto();
}
inline void Command_Getaddrinfo::_internal_set_proto(uint32_t value) {
  
  _impl_.proto_ = value;
}
inline void Command_Getaddrinfo::set_proto(uint32_t value) {
  _internal_set_proto(value);
  // @@protoc_insertion_point(field_set:Command.Getaddrinfo.proto)
}

// uint32 flags = 6;
inline void Command_Getaddrinfo::clear_flags() {
  _impl_.flags_ = 0u;
}
inline uint32_t Command_Getaddrinfo::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t Command_Getaddrinfo::flags() const {
  // @@protoc_insertion_point(field_get:Command.Getaddrinfo.flags)
  return _internal_flags();
}
inline void Command_Getaddrinfo::_internal_set_flags(uint32_t value) {
  
  _impl_.flags_ = value;
}
inline void Command_Getaddrinfo::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Command.Getaddrinfo.flags)
}

// -------------------------------------------------------------------

// Command_Getnameinfo

// bytes sockaddr = 1;
inline void Command_Getnameinfo::clear_sockaddr() {
  _impl_.sockaddr_.ClearToEmpty();
}
inline const std::string& Command_Getnameinfo::sockaddr() const {
  // @@protoc_insertion_point(field_get:Command.Getnameinfo.sockaddr)
  return _internal_sockaddr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Getnameinfo::set_sockaddr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sockaddr_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.Getnameinfo.sockaddr)
}
inline std::string* Command_Getnameinfo::mutable_sockaddr() {
  std::string* _s = _internal_mutable_sockaddr();
  // @@protoc_insertion_point(field_mutable:Command.Getnameinfo.sockaddr)
  return _s;
}
inline const std::string& Command_Getnameinfo::_internal_sockaddr() const {
  return _impl_.sockaddr_.Get();
}
inline void Command_Getnameinfo::_internal_set_sockaddr(const std::string& value) {
  
  _impl_.sockaddr_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Getnameinfo::_internal_mutable_sockaddr() {
  
  return _impl_.sockaddr_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Getnameinfo::release_sockaddr() {
  // @@protoc_insertion_point(field_release:Command.Getnameinfo.sockaddr)
  return _impl_.sockaddr_.Release();
}
inline void Command_Getnameinfo::set_allocated_sockaddr(std::string* sockaddr) {
  if (sockaddr != nullptr) {
    
  } else {
    
  }
  _impl_.sockaddr_.SetAllocated(sockaddr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sockaddr_.IsDefault()) {
    _impl_.sockaddr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.Getnameinfo.sockaddr)
}

// uint32 flags = 2;
inline void Command_Getnameinfo::clear_flags() {
  _impl_.flags_ = 0u;
}
inline uint32_t Command_Getnameinfo::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t Command_Getnameinfo::flags() const {
  // @@protoc_insertion_point(field_get:Command.Getnameinfo.flags)
  return _internal_flags();
}
inline void Command_Getnameinfo::_internal_set_flags(uint32_t value) {
  
  _impl_.flags_ = value;
}
inline void Command_Getnameinfo::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Command.Getnameinfo.flags)
}

// -------------------------------------------------------------------

// Command_IfNameindex

// -------------------------------------------------------------------

// Command_IfNametoindex

// string name = 1;
inline void Command_IfNametoindex::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Command_IfNametoindex::name() const {
  // @@protoc_insertion_point(field_get:Command.IfNametoindex.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_IfNametoindex::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.IfNametoindex.name)
}
inline std::string* Command_IfNametoindex::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Command.IfNametoindex.name)
  return _s;
}
inline const std::string& Command_IfNametoindex::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Command_IfNametoindex::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_IfNametoindex::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_IfNametoindex::release_name() {
  // @@protoc_insertion_point(field_release:Command.IfNametoindex.name)
  return _impl_.name_.Release();
}
inline void Command_IfNametoindex::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.IfNametoindex.name)
}

// -------------------------------------------------------------------

// Command_IfIndextoname

// uint32 index = 1;
inline void Command_IfIndextoname::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t Command_IfIndextoname::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t Command_IfIndextoname::index() const {
  // @@protoc_insertion_point(field_get:Command.IfIndextoname.index)
  return _internal_index();
}
inline void Command_IfIndextoname::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void Command_IfIndextoname::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Command.IfIndextoname.index)
}

// -------------------------------------------------------------------

// Command_Gethostbyname

// string name = 1;
inline void Command_Gethostbyname::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Command_Gethostbyname::name() const {
  // @@protoc_insertion_point(field_get:Command.Gethostbyname.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Gethostbyname::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.Gethostbyname.name)
}
inline std::string* Command_Gethostbyname::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Command.Gethostbyname.name)
  return _s;
}
inline const std::string& Command_Gethostbyname::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Command_Gethostbyname::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Gethostbyname::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Gethostbyname::release_name() {
  // @@protoc_insertion_point(field_release:Command.Gethostbyname.name)
  return _impl_.name_.Release();
}
inline void Command_Gethostbyname::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.Gethostbyname.name)
}

// -------------------------------------------------------------------

// Command_GethostbynameEx

// string name = 1;
inline void Command_GethostbynameEx::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Command_GethostbynameEx::name() const {
  // @@protoc_insertion_point(field_get:Command.GethostbynameEx.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_GethostbynameEx::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.GethostbynameEx.name)
}
inline std::string* Command_GethostbynameEx::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Command.GethostbynameEx.name)
  return _s;
}
inline const std::string& Command_GethostbynameEx::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Command_GethostbynameEx::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_GethostbynameEx::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_GethostbynameEx::release_name() {
  // @@protoc_insertion_point(field_release:Command.GethostbynameEx.name)
  return _impl_.name_.Release();
}
inline void Command_GethostbynameEx::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.GethostbynameEx.name)
}

// -------------------------------------------------------------------

// Command_Gethostbyaddr

// string addr = 1;
inline void Command_Gethostbyaddr::clear_addr() {
  _impl_.addr_.ClearToEmpty();
}
inline const std::string& Command_Gethostbyaddr::addr() const {
  // @@protoc_insertion_point(field_get:Command.Gethostbyaddr.addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Gethostbyaddr::set_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.Gethostbyaddr.addr)
}
inline std::string* Command_Gethostbyaddr::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:Command.Gethostbyaddr.addr)
  return _s;
}
inline const std::string& Command_Gethostbyaddr::_internal_addr() const {
  return _impl_.addr_.Get();
}
inline void Command_Gethostbyaddr::_internal_set_addr(const std::string& value) {
  
  _impl_.addr_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Gethostbyaddr::_internal_mutable_addr() {
  
  return _impl_.addr_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Gethostbyaddr::release_addr() {
  // @@protoc_insertion_point(field_release:Command.Gethostbyaddr.addr)
  return _impl_.addr_.Release();
}
inline void Command_Gethostbyaddr::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  _impl_.addr_.SetAllocated(addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.addr_.IsDefault()) {
    _impl_.addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.Gethostbyaddr.addr)
}

// -------------------------------------------------------------------

// Command_Getservbyname

// string name = 1;
inline void Command_Getservbyname::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Command_Getservbyname::name() const {
  // @@protoc_insertion_point(field_get:Command.Getservbyname.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Getservbyname::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.Getservbyname.name)
}
inline std::string* Command_Getservbyname::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Command.Getservbyname.name)
  return _s;
}
inline const std::string& Command_Getservbyname::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Command_Getservbyname::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Getservbyname::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Getservbyname::release_name() {
  // @@protoc_insertion_point(field_release:Command.Getservbyname.name)
  return _impl_.name_.Release();
}
inline void Command_Getservbyname::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.Getservbyname.name)
}

// string proto = 2;
inline void Command_Getservbyname::clear_proto() {
  _impl_.proto_.ClearToEmpty();
}
inline const std::string& Command_Getservbyname::proto() const {
  // @@protoc_insertion_point(field_get:Command.Getservbyname.proto)
  return _internal_proto();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Getservbyname::set_proto(ArgT0&& arg0, ArgT... args) {
 
 _impl_.proto_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.Getservbyname.proto)
}
inline std::string* Command_Getservbyname::mutable_proto() {
  std::string* _s = _internal_mutable_proto();
  // @@protoc_insertion_point(field_mutable:Command.Getservbyname.proto)
  return _s;
}
inline const std::string& Command_Getservbyname::_internal_proto() const {
  return _impl_.proto_.Get();
}
inline void Command_Getservbyname::_internal_set_proto(const std::string& value) {
  
  _impl_.proto_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Getservbyname::_internal_mutable_proto() {
  
  return _impl_.proto_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Getservbyname::release_proto() {
  // @@protoc_insertion_point(field_release:Command.Getservbyname.proto)
  return _impl_.proto_.Release();
}
inline void Command_Getservbyname::set_allocated_proto(std::string* proto) {
  if (proto != nullptr) {
    
  } else {
    
  }
  _impl_.proto_.SetAllocated(proto, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proto_.IsDefault()) {
    _impl_.proto_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.Getservbyname.proto)
}

// -------------------------------------------------------------------

// Command_Getservbyport

// uint32 port = 1;
inline void Command_Getservbyport::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t Command_Getservbyport::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t Command_Getservbyport::port() const {
  // @@protoc_insertion_point(field_get:Command.Getservbyport.port)
  return _internal_port();
}
inline void Command_Getservbyport::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void Command_Getservbyport::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:Command.Getservbyport.port)
}

// string proto = 2;
inline void Command_Getservbyport::clear_proto() {
  _impl_.proto_.ClearToEmpty();
}
inline const std::string& Command_Getservbyport::proto() const {
  // @@protoc_insertion_point(field_get:Command.Getservbyport.proto)
  return _internal_proto();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_Getservbyport::set_proto(ArgT0&& arg0, ArgT... args) {
 
 _impl_.proto_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.Getservbyport.proto)
}
inline std::string* Command_Getservbyport::mutable_proto() {
  std::string* _s = _internal_mutable_proto();
  // @@protoc_insertion_point(field_mutable:Command.Getservbyport.proto)
  return _s;
}
inline const std::string& Command_Getservbyport::_internal_proto() const {
  return _impl_.proto_.Get();
}
inline void Command_Getservbyport::_internal_set_proto(const std::string& value) {
  
  _impl_.proto_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_Getservbyport::_internal_mutable_proto() {
  
  return _impl_.proto_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_Getservbyport::release_proto() {
  // @@protoc_insertion_point(field_release:Command.Getservbyport.proto)
  return _impl_.proto_.Release();
}
inline void Command_Getservbyport::set_allocated_proto(std::string* proto) {
  if (proto != nullptr) {
    
  } else {
    
  }
  _impl_.proto_.SetAllocated(proto, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proto_.IsDefault()) {
    _impl_.proto_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.Getservbyport.proto)
}

// -------------------------------------------------------------------

// Command_SockAccept

// uint32 id = 1;
inline void Command_SockAccept::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockAccept::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockAccept::id() const {
  // @@protoc_insertion_point(field_get:Command.SockAccept.id)
  return _internal_id();
}
inline void Command_SockAccept::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockAccept::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockAccept.id)
}

// uint32 new_id = 2;
inline void Command_SockAccept::clear_new_id() {
  _impl_.new_id_ = 0u;
}
inline uint32_t Command_SockAccept::_internal_new_id() const {
  return _impl_.new_id_;
}
inline uint32_t Command_SockAccept::new_id() const {
  // @@protoc_insertion_point(field_get:Command.SockAccept.new_id)
  return _internal_new_id();
}
inline void Command_SockAccept::_internal_set_new_id(uint32_t value) {
  
  _impl_.new_id_ = value;
}
inline void Command_SockAccept::set_new_id(uint32_t value) {
  _internal_set_new_id(value);
  // @@protoc_insertion_point(field_set:Command.SockAccept.new_id)
}

// -------------------------------------------------------------------

// Command_SockBind

// uint32 id = 1;
inline void Command_SockBind::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockBind::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockBind::id() const {
  // @@protoc_insertion_point(field_get:Command.SockBind.id)
  return _internal_id();
}
inline void Command_SockBind::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockBind::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockBind.id)
}

// bytes addr = 2;
inline void Command_SockBind::clear_addr() {
  _impl_.addr_.ClearToEmpty();
}
inline const std::string& Command_SockBind::addr() const {
  // @@protoc_insertion_point(field_get:Command.SockBind.addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_SockBind::set_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.addr_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.SockBind.addr)
}
inline std::string* Command_SockBind::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:Command.SockBind.addr)
  return _s;
}
inline const std::string& Command_SockBind::_internal_addr() const {
  return _impl_.addr_.Get();
}
inline void Command_SockBind::_internal_set_addr(const std::string& value) {
  
  _impl_.addr_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_SockBind::_internal_mutable_addr() {
  
  return _impl_.addr_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_SockBind::release_addr() {
  // @@protoc_insertion_point(field_release:Command.SockBind.addr)
  return _impl_.addr_.Release();
}
inline void Command_SockBind::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  _impl_.addr_.SetAllocated(addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.addr_.IsDefault()) {
    _impl_.addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.SockBind.addr)
}

// -------------------------------------------------------------------

// Command_SockListen

// uint32 id = 1;
inline void Command_SockListen::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockListen::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockListen::id() const {
  // @@protoc_insertion_point(field_get:Command.SockListen.id)
  return _internal_id();
}
inline void Command_SockListen::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockListen::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockListen.id)
}

// uint32 backlog = 2;
inline void Command_SockListen::clear_backlog() {
  _impl_.backlog_ = 0u;
}
inline uint32_t Command_SockListen::_internal_backlog() const {
  return _impl_.backlog_;
}
inline uint32_t Command_SockListen::backlog() const {
  // @@protoc_insertion_point(field_get:Command.SockListen.backlog)
  return _internal_backlog();
}
inline void Command_SockListen::_internal_set_backlog(uint32_t value) {
  
  _impl_.backlog_ = value;
}
inline void Command_SockListen::set_backlog(uint32_t value) {
  _internal_set_backlog(value);
  // @@protoc_insertion_point(field_set:Command.SockListen.backlog)
}

// -------------------------------------------------------------------

// Command_SockConnect

// uint32 id = 1;
inline void Command_SockConnect::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockConnect::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockConnect::id() const {
  // @@protoc_insertion_point(field_get:Command.SockConnect.id)
  return _internal_id();
}
inline void Command_SockConnect::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockConnect::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockConnect.id)
}

// bytes addr = 2;
inline void Command_SockConnect::clear_addr() {
  _impl_.addr_.ClearToEmpty();
}
inline const std::string& Command_SockConnect::addr() const {
  // @@protoc_insertion_point(field_get:Command.SockConnect.addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_SockConnect::set_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.addr_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.SockConnect.addr)
}
inline std::string* Command_SockConnect::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:Command.SockConnect.addr)
  return _s;
}
inline const std::string& Command_SockConnect::_internal_addr() const {
  return _impl_.addr_.Get();
}
inline void Command_SockConnect::_internal_set_addr(const std::string& value) {
  
  _impl_.addr_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_SockConnect::_internal_mutable_addr() {
  
  return _impl_.addr_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_SockConnect::release_addr() {
  // @@protoc_insertion_point(field_release:Command.SockConnect.addr)
  return _impl_.addr_.Release();
}
inline void Command_SockConnect::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  _impl_.addr_.SetAllocated(addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.addr_.IsDefault()) {
    _impl_.addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.SockConnect.addr)
}

// -------------------------------------------------------------------

// Command_SockConnectEx

// uint32 id = 1;
inline void Command_SockConnectEx::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockConnectEx::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockConnectEx::id() const {
  // @@protoc_insertion_point(field_get:Command.SockConnectEx.id)
  return _internal_id();
}
inline void Command_SockConnectEx::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockConnectEx::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockConnectEx.id)
}

// bytes addr = 2;
inline void Command_SockConnectEx::clear_addr() {
  _impl_.addr_.ClearToEmpty();
}
inline const std::string& Command_SockConnectEx::addr() const {
  // @@protoc_insertion_point(field_get:Command.SockConnectEx.addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_SockConnectEx::set_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.addr_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.SockConnectEx.addr)
}
inline std::string* Command_SockConnectEx::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:Command.SockConnectEx.addr)
  return _s;
}
inline const std::string& Command_SockConnectEx::_internal_addr() const {
  return _impl_.addr_.Get();
}
inline void Command_SockConnectEx::_internal_set_addr(const std::string& value) {
  
  _impl_.addr_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_SockConnectEx::_internal_mutable_addr() {
  
  return _impl_.addr_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_SockConnectEx::release_addr() {
  // @@protoc_insertion_point(field_release:Command.SockConnectEx.addr)
  return _impl_.addr_.Release();
}
inline void Command_SockConnectEx::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  _impl_.addr_.SetAllocated(addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.addr_.IsDefault()) {
    _impl_.addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.SockConnectEx.addr)
}

// -------------------------------------------------------------------

// Command_SockShutdown

// uint32 id = 1;
inline void Command_SockShutdown::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockShutdown::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockShutdown::id() const {
  // @@protoc_insertion_point(field_get:Command.SockShutdown.id)
  return _internal_id();
}
inline void Command_SockShutdown::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockShutdown::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockShutdown.id)
}

// uint32 how = 2;
inline void Command_SockShutdown::clear_how() {
  _impl_.how_ = 0u;
}
inline uint32_t Command_SockShutdown::_internal_how() const {
  return _impl_.how_;
}
inline uint32_t Command_SockShutdown::how() const {
  // @@protoc_insertion_point(field_get:Command.SockShutdown.how)
  return _internal_how();
}
inline void Command_SockShutdown::_internal_set_how(uint32_t value) {
  
  _impl_.how_ = value;
}
inline void Command_SockShutdown::set_how(uint32_t value) {
  _internal_set_how(value);
  // @@protoc_insertion_point(field_set:Command.SockShutdown.how)
}

// -------------------------------------------------------------------

// Command_SockSetsockopt

// uint32 id = 1;
inline void Command_SockSetsockopt::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockSetsockopt::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockSetsockopt::id() const {
  // @@protoc_insertion_point(field_get:Command.SockSetsockopt.id)
  return _internal_id();
}
inline void Command_SockSetsockopt::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockSetsockopt::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockSetsockopt.id)
}

// uint32 level = 2;
inline void Command_SockSetsockopt::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t Command_SockSetsockopt::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t Command_SockSetsockopt::level() const {
  // @@protoc_insertion_point(field_get:Command.SockSetsockopt.level)
  return _internal_level();
}
inline void Command_SockSetsockopt::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void Command_SockSetsockopt::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Command.SockSetsockopt.level)
}

// uint32 opt = 3;
inline void Command_SockSetsockopt::clear_opt() {
  _impl_.opt_ = 0u;
}
inline uint32_t Command_SockSetsockopt::_internal_opt() const {
  return _impl_.opt_;
}
inline uint32_t Command_SockSetsockopt::opt() const {
  // @@protoc_insertion_point(field_get:Command.SockSetsockopt.opt)
  return _internal_opt();
}
inline void Command_SockSetsockopt::_internal_set_opt(uint32_t value) {
  
  _impl_.opt_ = value;
}
inline void Command_SockSetsockopt::set_opt(uint32_t value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:Command.SockSetsockopt.opt)
}

// bytes val = 4;
inline void Command_SockSetsockopt::clear_val() {
  _impl_.val_.ClearToEmpty();
}
inline const std::string& Command_SockSetsockopt::val() const {
  // @@protoc_insertion_point(field_get:Command.SockSetsockopt.val)
  return _internal_val();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_SockSetsockopt::set_val(ArgT0&& arg0, ArgT... args) {
 
 _impl_.val_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.SockSetsockopt.val)
}
inline std::string* Command_SockSetsockopt::mutable_val() {
  std::string* _s = _internal_mutable_val();
  // @@protoc_insertion_point(field_mutable:Command.SockSetsockopt.val)
  return _s;
}
inline const std::string& Command_SockSetsockopt::_internal_val() const {
  return _impl_.val_.Get();
}
inline void Command_SockSetsockopt::_internal_set_val(const std::string& value) {
  
  _impl_.val_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_SockSetsockopt::_internal_mutable_val() {
  
  return _impl_.val_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_SockSetsockopt::release_val() {
  // @@protoc_insertion_point(field_release:Command.SockSetsockopt.val)
  return _impl_.val_.Release();
}
inline void Command_SockSetsockopt::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    
  } else {
    
  }
  _impl_.val_.SetAllocated(val, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.val_.IsDefault()) {
    _impl_.val_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.SockSetsockopt.val)
}

// -------------------------------------------------------------------

// Command_SockGetsockopt

// uint32 id = 1;
inline void Command_SockGetsockopt::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockGetsockopt::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockGetsockopt::id() const {
  // @@protoc_insertion_point(field_get:Command.SockGetsockopt.id)
  return _internal_id();
}
inline void Command_SockGetsockopt::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockGetsockopt::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockGetsockopt.id)
}

// uint32 level = 2;
inline void Command_SockGetsockopt::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t Command_SockGetsockopt::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t Command_SockGetsockopt::level() const {
  // @@protoc_insertion_point(field_get:Command.SockGetsockopt.level)
  return _internal_level();
}
inline void Command_SockGetsockopt::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void Command_SockGetsockopt::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Command.SockGetsockopt.level)
}

// uint32 opt = 3;
inline void Command_SockGetsockopt::clear_opt() {
  _impl_.opt_ = 0u;
}
inline uint32_t Command_SockGetsockopt::_internal_opt() const {
  return _impl_.opt_;
}
inline uint32_t Command_SockGetsockopt::opt() const {
  // @@protoc_insertion_point(field_get:Command.SockGetsockopt.opt)
  return _internal_opt();
}
inline void Command_SockGetsockopt::_internal_set_opt(uint32_t value) {
  
  _impl_.opt_ = value;
}
inline void Command_SockGetsockopt::set_opt(uint32_t value) {
  _internal_set_opt(value);
  // @@protoc_insertion_point(field_set:Command.SockGetsockopt.opt)
}

// -------------------------------------------------------------------

// Command_SockSend

// uint32 id = 1;
inline void Command_SockSend::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockSend::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockSend::id() const {
  // @@protoc_insertion_point(field_get:Command.SockSend.id)
  return _internal_id();
}
inline void Command_SockSend::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockSend::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockSend.id)
}

// bytes data = 2;
inline void Command_SockSend::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Command_SockSend::data() const {
  // @@protoc_insertion_point(field_get:Command.SockSend.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_SockSend::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.SockSend.data)
}
inline std::string* Command_SockSend::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Command.SockSend.data)
  return _s;
}
inline const std::string& Command_SockSend::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Command_SockSend::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_SockSend::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_SockSend::release_data() {
  // @@protoc_insertion_point(field_release:Command.SockSend.data)
  return _impl_.data_.Release();
}
inline void Command_SockSend::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.SockSend.data)
}

// uint32 flags = 3;
inline void Command_SockSend::clear_flags() {
  _impl_.flags_ = 0u;
}
inline uint32_t Command_SockSend::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t Command_SockSend::flags() const {
  // @@protoc_insertion_point(field_get:Command.SockSend.flags)
  return _internal_flags();
}
inline void Command_SockSend::_internal_set_flags(uint32_t value) {
  
  _impl_.flags_ = value;
}
inline void Command_SockSend::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Command.SockSend.flags)
}

// -------------------------------------------------------------------

// Command_SockSendto

// uint32 id = 1;
inline void Command_SockSendto::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockSendto::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockSendto::id() const {
  // @@protoc_insertion_point(field_get:Command.SockSendto.id)
  return _internal_id();
}
inline void Command_SockSendto::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockSendto::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockSendto.id)
}

// bytes data = 2;
inline void Command_SockSendto::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Command_SockSendto::data() const {
  // @@protoc_insertion_point(field_get:Command.SockSendto.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_SockSendto::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.SockSendto.data)
}
inline std::string* Command_SockSendto::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Command.SockSendto.data)
  return _s;
}
inline const std::string& Command_SockSendto::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Command_SockSendto::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_SockSendto::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_SockSendto::release_data() {
  // @@protoc_insertion_point(field_release:Command.SockSendto.data)
  return _impl_.data_.Release();
}
inline void Command_SockSendto::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.SockSendto.data)
}

// uint32 flags = 3;
inline void Command_SockSendto::clear_flags() {
  _impl_.flags_ = 0u;
}
inline uint32_t Command_SockSendto::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t Command_SockSendto::flags() const {
  // @@protoc_insertion_point(field_get:Command.SockSendto.flags)
  return _internal_flags();
}
inline void Command_SockSendto::_internal_set_flags(uint32_t value) {
  
  _impl_.flags_ = value;
}
inline void Command_SockSendto::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Command.SockSendto.flags)
}

// bytes addr = 4;
inline void Command_SockSendto::clear_addr() {
  _impl_.addr_.ClearToEmpty();
}
inline const std::string& Command_SockSendto::addr() const {
  // @@protoc_insertion_point(field_get:Command.SockSendto.addr)
  return _internal_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_SockSendto::set_addr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.addr_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.SockSendto.addr)
}
inline std::string* Command_SockSendto::mutable_addr() {
  std::string* _s = _internal_mutable_addr();
  // @@protoc_insertion_point(field_mutable:Command.SockSendto.addr)
  return _s;
}
inline const std::string& Command_SockSendto::_internal_addr() const {
  return _impl_.addr_.Get();
}
inline void Command_SockSendto::_internal_set_addr(const std::string& value) {
  
  _impl_.addr_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_SockSendto::_internal_mutable_addr() {
  
  return _impl_.addr_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_SockSendto::release_addr() {
  // @@protoc_insertion_point(field_release:Command.SockSendto.addr)
  return _impl_.addr_.Release();
}
inline void Command_SockSendto::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  _impl_.addr_.SetAllocated(addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.addr_.IsDefault()) {
    _impl_.addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.SockSendto.addr)
}

// -------------------------------------------------------------------

// Command_SockSendall

// uint32 id = 1;
inline void Command_SockSendall::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockSendall::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockSendall::id() const {
  // @@protoc_insertion_point(field_get:Command.SockSendall.id)
  return _internal_id();
}
inline void Command_SockSendall::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockSendall::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockSendall.id)
}

// bytes data = 2;
inline void Command_SockSendall::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Command_SockSendall::data() const {
  // @@protoc_insertion_point(field_get:Command.SockSendall.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_SockSendall::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.SockSendall.data)
}
inline std::string* Command_SockSendall::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Command.SockSendall.data)
  return _s;
}
inline const std::string& Command_SockSendall::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Command_SockSendall::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_SockSendall::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_SockSendall::release_data() {
  // @@protoc_insertion_point(field_release:Command.SockSendall.data)
  return _impl_.data_.Release();
}
inline void Command_SockSendall::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.SockSendall.data)
}

// uint32 flags = 3;
inline void Command_SockSendall::clear_flags() {
  _impl_.flags_ = 0u;
}
inline uint32_t Command_SockSendall::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t Command_SockSendall::flags() const {
  // @@protoc_insertion_point(field_get:Command.SockSendall.flags)
  return _internal_flags();
}
inline void Command_SockSendall::_internal_set_flags(uint32_t value) {
  
  _impl_.flags_ = value;
}
inline void Command_SockSendall::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Command.SockSendall.flags)
}

// -------------------------------------------------------------------

// Command_SockSendmsg

// uint32 id = 1;
inline void Command_SockSendmsg::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockSendmsg::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockSendmsg::id() const {
  // @@protoc_insertion_point(field_get:Command.SockSendmsg.id)
  return _internal_id();
}
inline void Command_SockSendmsg::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockSendmsg::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockSendmsg.id)
}

// bytes data = 2;
inline void Command_SockSendmsg::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Command_SockSendmsg::data() const {
  // @@protoc_insertion_point(field_get:Command.SockSendmsg.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Command_SockSendmsg::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Command.SockSendmsg.data)
}
inline std::string* Command_SockSendmsg::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:Command.SockSendmsg.data)
  return _s;
}
inline const std::string& Command_SockSendmsg::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Command_SockSendmsg::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Command_SockSendmsg::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Command_SockSendmsg::release_data() {
  // @@protoc_insertion_point(field_release:Command.SockSendmsg.data)
  return _impl_.data_.Release();
}
inline void Command_SockSendmsg::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Command.SockSendmsg.data)
}

// uint32 flags = 3;
inline void Command_SockSendmsg::clear_flags() {
  _impl_.flags_ = 0u;
}
inline uint32_t Command_SockSendmsg::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t Command_SockSendmsg::flags() const {
  // @@protoc_insertion_point(field_get:Command.SockSendmsg.flags)
  return _internal_flags();
}
inline void Command_SockSendmsg::_internal_set_flags(uint32_t value) {
  
  _impl_.flags_ = value;
}
inline void Command_SockSendmsg::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Command.SockSendmsg.flags)
}

// -------------------------------------------------------------------

// Command_SockRecv

// uint32 id = 1;
inline void Command_SockRecv::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockRecv::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockRecv::id() const {
  // @@protoc_insertion_point(field_get:Command.SockRecv.id)
  return _internal_id();
}
inline void Command_SockRecv::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockRecv::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockRecv.id)
}

// uint32 maxlen = 2;
inline void Command_SockRecv::clear_maxlen() {
  _impl_.maxlen_ = 0u;
}
inline uint32_t Command_SockRecv::_internal_maxlen() const {
  return _impl_.maxlen_;
}
inline uint32_t Command_SockRecv::maxlen() const {
  // @@protoc_insertion_point(field_get:Command.SockRecv.maxlen)
  return _internal_maxlen();
}
inline void Command_SockRecv::_internal_set_maxlen(uint32_t value) {
  
  _impl_.maxlen_ = value;
}
inline void Command_SockRecv::set_maxlen(uint32_t value) {
  _internal_set_maxlen(value);
  // @@protoc_insertion_point(field_set:Command.SockRecv.maxlen)
}

// uint32 flags = 3;
inline void Command_SockRecv::clear_flags() {
  _impl_.flags_ = 0u;
}
inline uint32_t Command_SockRecv::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t Command_SockRecv::flags() const {
  // @@protoc_insertion_point(field_get:Command.SockRecv.flags)
  return _internal_flags();
}
inline void Command_SockRecv::_internal_set_flags(uint32_t value) {
  
  _impl_.flags_ = value;
}
inline void Command_SockRecv::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Command.SockRecv.flags)
}

// -------------------------------------------------------------------

// Command_SockRecvfrom

// uint32 id = 1;
inline void Command_SockRecvfrom::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockRecvfrom::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockRecvfrom::id() const {
  // @@protoc_insertion_point(field_get:Command.SockRecvfrom.id)
  return _internal_id();
}
inline void Command_SockRecvfrom::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockRecvfrom::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockRecvfrom.id)
}

// uint32 maxlen = 2;
inline void Command_SockRecvfrom::clear_maxlen() {
  _impl_.maxlen_ = 0u;
}
inline uint32_t Command_SockRecvfrom::_internal_maxlen() const {
  return _impl_.maxlen_;
}
inline uint32_t Command_SockRecvfrom::maxlen() const {
  // @@protoc_insertion_point(field_get:Command.SockRecvfrom.maxlen)
  return _internal_maxlen();
}
inline void Command_SockRecvfrom::_internal_set_maxlen(uint32_t value) {
  
  _impl_.maxlen_ = value;
}
inline void Command_SockRecvfrom::set_maxlen(uint32_t value) {
  _internal_set_maxlen(value);
  // @@protoc_insertion_point(field_set:Command.SockRecvfrom.maxlen)
}

// uint32 flags = 3;
inline void Command_SockRecvfrom::clear_flags() {
  _impl_.flags_ = 0u;
}
inline uint32_t Command_SockRecvfrom::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t Command_SockRecvfrom::flags() const {
  // @@protoc_insertion_point(field_get:Command.SockRecvfrom.flags)
  return _internal_flags();
}
inline void Command_SockRecvfrom::_internal_set_flags(uint32_t value) {
  
  _impl_.flags_ = value;
}
inline void Command_SockRecvfrom::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Command.SockRecvfrom.flags)
}

// -------------------------------------------------------------------

// Command_SockRecvmsg

// uint32 id = 1;
inline void Command_SockRecvmsg::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockRecvmsg::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockRecvmsg::id() const {
  // @@protoc_insertion_point(field_get:Command.SockRecvmsg.id)
  return _internal_id();
}
inline void Command_SockRecvmsg::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockRecvmsg::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockRecvmsg.id)
}

// uint32 maxlen = 2;
inline void Command_SockRecvmsg::clear_maxlen() {
  _impl_.maxlen_ = 0u;
}
inline uint32_t Command_SockRecvmsg::_internal_maxlen() const {
  return _impl_.maxlen_;
}
inline uint32_t Command_SockRecvmsg::maxlen() const {
  // @@protoc_insertion_point(field_get:Command.SockRecvmsg.maxlen)
  return _internal_maxlen();
}
inline void Command_SockRecvmsg::_internal_set_maxlen(uint32_t value) {
  
  _impl_.maxlen_ = value;
}
inline void Command_SockRecvmsg::set_maxlen(uint32_t value) {
  _internal_set_maxlen(value);
  // @@protoc_insertion_point(field_set:Command.SockRecvmsg.maxlen)
}

// uint32 ancbufsize = 3;
inline void Command_SockRecvmsg::clear_ancbufsize() {
  _impl_.ancbufsize_ = 0u;
}
inline uint32_t Command_SockRecvmsg::_internal_ancbufsize() const {
  return _impl_.ancbufsize_;
}
inline uint32_t Command_SockRecvmsg::ancbufsize() const {
  // @@protoc_insertion_point(field_get:Command.SockRecvmsg.ancbufsize)
  return _internal_ancbufsize();
}
inline void Command_SockRecvmsg::_internal_set_ancbufsize(uint32_t value) {
  
  _impl_.ancbufsize_ = value;
}
inline void Command_SockRecvmsg::set_ancbufsize(uint32_t value) {
  _internal_set_ancbufsize(value);
  // @@protoc_insertion_point(field_set:Command.SockRecvmsg.ancbufsize)
}

// uint32 flags = 4;
inline void Command_SockRecvmsg::clear_flags() {
  _impl_.flags_ = 0u;
}
inline uint32_t Command_SockRecvmsg::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t Command_SockRecvmsg::flags() const {
  // @@protoc_insertion_point(field_get:Command.SockRecvmsg.flags)
  return _internal_flags();
}
inline void Command_SockRecvmsg::_internal_set_flags(uint32_t value) {
  
  _impl_.flags_ = value;
}
inline void Command_SockRecvmsg::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Command.SockRecvmsg.flags)
}

// -------------------------------------------------------------------

// Command_SockRecvInto

// uint32 id = 1;
inline void Command_SockRecvInto::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockRecvInto::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockRecvInto::id() const {
  // @@protoc_insertion_point(field_get:Command.SockRecvInto.id)
  return _internal_id();
}
inline void Command_SockRecvInto::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockRecvInto::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockRecvInto.id)
}

// uint32 nbytes = 2;
inline void Command_SockRecvInto::clear_nbytes() {
  _impl_.nbytes_ = 0u;
}
inline uint32_t Command_SockRecvInto::_internal_nbytes() const {
  return _impl_.nbytes_;
}
inline uint32_t Command_SockRecvInto::nbytes() const {
  // @@protoc_insertion_point(field_get:Command.SockRecvInto.nbytes)
  return _internal_nbytes();
}
inline void Command_SockRecvInto::_internal_set_nbytes(uint32_t value) {
  
  _impl_.nbytes_ = value;
}
inline void Command_SockRecvInto::set_nbytes(uint32_t value) {
  _internal_set_nbytes(value);
  // @@protoc_insertion_point(field_set:Command.SockRecvInto.nbytes)
}

// uint32 flags = 3;
inline void Command_SockRecvInto::clear_flags() {
  _impl_.flags_ = 0u;
}
inline uint32_t Command_SockRecvInto::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t Command_SockRecvInto::flags() const {
  // @@protoc_insertion_point(field_get:Command.SockRecvInto.flags)
  return _internal_flags();
}
inline void Command_SockRecvInto::_internal_set_flags(uint32_t value) {
  
  _impl_.flags_ = value;
}
inline void Command_SockRecvInto::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Command.SockRecvInto.flags)
}

// -------------------------------------------------------------------

// Command_SockRecvfromInto

// uint32 id = 1;
inline void Command_SockRecvfromInto::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockRecvfromInto::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockRecvfromInto::id() const {
  // @@protoc_insertion_point(field_get:Command.SockRecvfromInto.id)
  return _internal_id();
}
inline void Command_SockRecvfromInto::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockRecvfromInto::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockRecvfromInto.id)
}

// uint32 nbytes = 2;
inline void Command_SockRecvfromInto::clear_nbytes() {
  _impl_.nbytes_ = 0u;
}
inline uint32_t Command_SockRecvfromInto::_internal_nbytes() const {
  return _impl_.nbytes_;
}
inline uint32_t Command_SockRecvfromInto::nbytes() const {
  // @@protoc_insertion_point(field_get:Command.SockRecvfromInto.nbytes)
  return _internal_nbytes();
}
inline void Command_SockRecvfromInto::_internal_set_nbytes(uint32_t value) {
  
  _impl_.nbytes_ = value;
}
inline void Command_SockRecvfromInto::set_nbytes(uint32_t value) {
  _internal_set_nbytes(value);
  // @@protoc_insertion_point(field_set:Command.SockRecvfromInto.nbytes)
}

// uint32 flags = 3;
inline void Command_SockRecvfromInto::clear_flags() {
  _impl_.flags_ = 0u;
}
inline uint32_t Command_SockRecvfromInto::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t Command_SockRecvfromInto::flags() const {
  // @@protoc_insertion_point(field_get:Command.SockRecvfromInto.flags)
  return _internal_flags();
}
inline void Command_SockRecvfromInto::_internal_set_flags(uint32_t value) {
  
  _impl_.flags_ = value;
}
inline void Command_SockRecvfromInto::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Command.SockRecvfromInto.flags)
}

// -------------------------------------------------------------------

// Command_SockRecvmsgInto

// uint32 id = 1;
inline void Command_SockRecvmsgInto::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockRecvmsgInto::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockRecvmsgInto::id() const {
  // @@protoc_insertion_point(field_get:Command.SockRecvmsgInto.id)
  return _internal_id();
}
inline void Command_SockRecvmsgInto::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockRecvmsgInto::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockRecvmsgInto.id)
}

// uint32 nbytes = 2;
inline void Command_SockRecvmsgInto::clear_nbytes() {
  _impl_.nbytes_ = 0u;
}
inline uint32_t Command_SockRecvmsgInto::_internal_nbytes() const {
  return _impl_.nbytes_;
}
inline uint32_t Command_SockRecvmsgInto::nbytes() const {
  // @@protoc_insertion_point(field_get:Command.SockRecvmsgInto.nbytes)
  return _internal_nbytes();
}
inline void Command_SockRecvmsgInto::_internal_set_nbytes(uint32_t value) {
  
  _impl_.nbytes_ = value;
}
inline void Command_SockRecvmsgInto::set_nbytes(uint32_t value) {
  _internal_set_nbytes(value);
  // @@protoc_insertion_point(field_set:Command.SockRecvmsgInto.nbytes)
}

// uint32 ancbufsize = 3;
inline void Command_SockRecvmsgInto::clear_ancbufsize() {
  _impl_.ancbufsize_ = 0u;
}
inline uint32_t Command_SockRecvmsgInto::_internal_ancbufsize() const {
  return _impl_.ancbufsize_;
}
inline uint32_t Command_SockRecvmsgInto::ancbufsize() const {
  // @@protoc_insertion_point(field_get:Command.SockRecvmsgInto.ancbufsize)
  return _internal_ancbufsize();
}
inline void Command_SockRecvmsgInto::_internal_set_ancbufsize(uint32_t value) {
  
  _impl_.ancbufsize_ = value;
}
inline void Command_SockRecvmsgInto::set_ancbufsize(uint32_t value) {
  _internal_set_ancbufsize(value);
  // @@protoc_insertion_point(field_set:Command.SockRecvmsgInto.ancbufsize)
}

// uint32 flags = 4;
inline void Command_SockRecvmsgInto::clear_flags() {
  _impl_.flags_ = 0u;
}
inline uint32_t Command_SockRecvmsgInto::_internal_flags() const {
  return _impl_.flags_;
}
inline uint32_t Command_SockRecvmsgInto::flags() const {
  // @@protoc_insertion_point(field_get:Command.SockRecvmsgInto.flags)
  return _internal_flags();
}
inline void Command_SockRecvmsgInto::_internal_set_flags(uint32_t value) {
  
  _impl_.flags_ = value;
}
inline void Command_SockRecvmsgInto::set_flags(uint32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Command.SockRecvmsgInto.flags)
}

// -------------------------------------------------------------------

// Command_SockSettimeout

// uint32 id = 1;
inline void Command_SockSettimeout::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockSettimeout::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockSettimeout::id() const {
  // @@protoc_insertion_point(field_get:Command.SockSettimeout.id)
  return _internal_id();
}
inline void Command_SockSettimeout::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockSettimeout::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockSettimeout.id)
}

// double timeout = 2;
inline void Command_SockSettimeout::clear_timeout() {
  _impl_.timeout_ = 0;
}
inline double Command_SockSettimeout::_internal_timeout() const {
  return _impl_.timeout_;
}
inline double Command_SockSettimeout::timeout() const {
  // @@protoc_insertion_point(field_get:Command.SockSettimeout.timeout)
  return _internal_timeout();
}
inline void Command_SockSettimeout::_internal_set_timeout(double value) {
  
  _impl_.timeout_ = value;
}
inline void Command_SockSettimeout::set_timeout(double value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:Command.SockSettimeout.timeout)
}

// -------------------------------------------------------------------

// Command_SockSetblocking

// uint32 id = 1;
inline void Command_SockSetblocking::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t Command_SockSetblocking::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Command_SockSetblocking::id() const {
  // @@protoc_insertion_point(field_get:Command.SockSetblocking.id)
  return _internal_id();
}
inline void Command_SockSetblocking::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void Command_SockSetblocking::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Command.SockSetblocking.id)
}

// bool blocking = 2;
inline void Command_SockSetblocking::clear_blocking() {
  _impl_.blocking_ = false;
}
inline bool Command_SockSetblocking::_internal_blocking() const {
  return _impl_.blocking_;
}
inline bool Command_SockSetblocking::blocking() const {
  // @@protoc_insertion_point(field_get:Command.SockSetblocking.blocking)
  return _internal_blocking();
}
inline void Command_SockSetblocking::_internal_set_blocking(bool value) {
  
  _impl_.blocking_ = value;
}
inline void Command_SockSetblocking::set_blocking(bool value) {
  _internal_set_blocking(value);
  // @@protoc_insertion_point(field_set:Command.SockSetblocking.blocking)
}

// -------------------------------------------------------------------

// Command

// .Command.SockSocket sock_socket = 1;
inline bool Command::_internal_has_sock_socket() const {
  return cmd_case() == kSockSocket;
}
inline bool Command::has_sock_socket() const {
  return _internal_has_sock_socket();
}
inline void Command::set_has_sock_socket() {
  _impl_._oneof_case_[0] = kSockSocket;
}
inline void Command::clear_sock_socket() {
  if (_internal_has_sock_socket()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_socket_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockSocket* Command::release_sock_socket() {
  // @@protoc_insertion_point(field_release:Command.sock_socket)
  if (_internal_has_sock_socket()) {
    clear_has_cmd();
    ::Command_SockSocket* temp = _impl_.cmd_.sock_socket_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_socket_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockSocket& Command::_internal_sock_socket() const {
  return _internal_has_sock_socket()
      ? *_impl_.cmd_.sock_socket_
      : reinterpret_cast< ::Command_SockSocket&>(::_Command_SockSocket_default_instance_);
}
inline const ::Command_SockSocket& Command::sock_socket() const {
  // @@protoc_insertion_point(field_get:Command.sock_socket)
  return _internal_sock_socket();
}
inline ::Command_SockSocket* Command::unsafe_arena_release_sock_socket() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_socket)
  if (_internal_has_sock_socket()) {
    clear_has_cmd();
    ::Command_SockSocket* temp = _impl_.cmd_.sock_socket_;
    _impl_.cmd_.sock_socket_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_socket(::Command_SockSocket* sock_socket) {
  clear_cmd();
  if (sock_socket) {
    set_has_sock_socket();
    _impl_.cmd_.sock_socket_ = sock_socket;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_socket)
}
inline ::Command_SockSocket* Command::_internal_mutable_sock_socket() {
  if (!_internal_has_sock_socket()) {
    clear_cmd();
    set_has_sock_socket();
    _impl_.cmd_.sock_socket_ = CreateMaybeMessage< ::Command_SockSocket >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_socket_;
}
inline ::Command_SockSocket* Command::mutable_sock_socket() {
  ::Command_SockSocket* _msg = _internal_mutable_sock_socket();
  // @@protoc_insertion_point(field_mutable:Command.sock_socket)
  return _msg;
}

// .Command.SockSocketpair sock_socketpair = 2;
inline bool Command::_internal_has_sock_socketpair() const {
  return cmd_case() == kSockSocketpair;
}
inline bool Command::has_sock_socketpair() const {
  return _internal_has_sock_socketpair();
}
inline void Command::set_has_sock_socketpair() {
  _impl_._oneof_case_[0] = kSockSocketpair;
}
inline void Command::clear_sock_socketpair() {
  if (_internal_has_sock_socketpair()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_socketpair_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockSocketpair* Command::release_sock_socketpair() {
  // @@protoc_insertion_point(field_release:Command.sock_socketpair)
  if (_internal_has_sock_socketpair()) {
    clear_has_cmd();
    ::Command_SockSocketpair* temp = _impl_.cmd_.sock_socketpair_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_socketpair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockSocketpair& Command::_internal_sock_socketpair() const {
  return _internal_has_sock_socketpair()
      ? *_impl_.cmd_.sock_socketpair_
      : reinterpret_cast< ::Command_SockSocketpair&>(::_Command_SockSocketpair_default_instance_);
}
inline const ::Command_SockSocketpair& Command::sock_socketpair() const {
  // @@protoc_insertion_point(field_get:Command.sock_socketpair)
  return _internal_sock_socketpair();
}
inline ::Command_SockSocketpair* Command::unsafe_arena_release_sock_socketpair() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_socketpair)
  if (_internal_has_sock_socketpair()) {
    clear_has_cmd();
    ::Command_SockSocketpair* temp = _impl_.cmd_.sock_socketpair_;
    _impl_.cmd_.sock_socketpair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_socketpair(::Command_SockSocketpair* sock_socketpair) {
  clear_cmd();
  if (sock_socketpair) {
    set_has_sock_socketpair();
    _impl_.cmd_.sock_socketpair_ = sock_socketpair;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_socketpair)
}
inline ::Command_SockSocketpair* Command::_internal_mutable_sock_socketpair() {
  if (!_internal_has_sock_socketpair()) {
    clear_cmd();
    set_has_sock_socketpair();
    _impl_.cmd_.sock_socketpair_ = CreateMaybeMessage< ::Command_SockSocketpair >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_socketpair_;
}
inline ::Command_SockSocketpair* Command::mutable_sock_socketpair() {
  ::Command_SockSocketpair* _msg = _internal_mutable_sock_socketpair();
  // @@protoc_insertion_point(field_mutable:Command.sock_socketpair)
  return _msg;
}

// .Command.SockDup sock_dup = 3;
inline bool Command::_internal_has_sock_dup() const {
  return cmd_case() == kSockDup;
}
inline bool Command::has_sock_dup() const {
  return _internal_has_sock_dup();
}
inline void Command::set_has_sock_dup() {
  _impl_._oneof_case_[0] = kSockDup;
}
inline void Command::clear_sock_dup() {
  if (_internal_has_sock_dup()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_dup_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockDup* Command::release_sock_dup() {
  // @@protoc_insertion_point(field_release:Command.sock_dup)
  if (_internal_has_sock_dup()) {
    clear_has_cmd();
    ::Command_SockDup* temp = _impl_.cmd_.sock_dup_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_dup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockDup& Command::_internal_sock_dup() const {
  return _internal_has_sock_dup()
      ? *_impl_.cmd_.sock_dup_
      : reinterpret_cast< ::Command_SockDup&>(::_Command_SockDup_default_instance_);
}
inline const ::Command_SockDup& Command::sock_dup() const {
  // @@protoc_insertion_point(field_get:Command.sock_dup)
  return _internal_sock_dup();
}
inline ::Command_SockDup* Command::unsafe_arena_release_sock_dup() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_dup)
  if (_internal_has_sock_dup()) {
    clear_has_cmd();
    ::Command_SockDup* temp = _impl_.cmd_.sock_dup_;
    _impl_.cmd_.sock_dup_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_dup(::Command_SockDup* sock_dup) {
  clear_cmd();
  if (sock_dup) {
    set_has_sock_dup();
    _impl_.cmd_.sock_dup_ = sock_dup;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_dup)
}
inline ::Command_SockDup* Command::_internal_mutable_sock_dup() {
  if (!_internal_has_sock_dup()) {
    clear_cmd();
    set_has_sock_dup();
    _impl_.cmd_.sock_dup_ = CreateMaybeMessage< ::Command_SockDup >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_dup_;
}
inline ::Command_SockDup* Command::mutable_sock_dup() {
  ::Command_SockDup* _msg = _internal_mutable_sock_dup();
  // @@protoc_insertion_point(field_mutable:Command.sock_dup)
  return _msg;
}

// .Command.SockClose sock_close = 4;
inline bool Command::_internal_has_sock_close() const {
  return cmd_case() == kSockClose;
}
inline bool Command::has_sock_close() const {
  return _internal_has_sock_close();
}
inline void Command::set_has_sock_close() {
  _impl_._oneof_case_[0] = kSockClose;
}
inline void Command::clear_sock_close() {
  if (_internal_has_sock_close()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_close_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockClose* Command::release_sock_close() {
  // @@protoc_insertion_point(field_release:Command.sock_close)
  if (_internal_has_sock_close()) {
    clear_has_cmd();
    ::Command_SockClose* temp = _impl_.cmd_.sock_close_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_close_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockClose& Command::_internal_sock_close() const {
  return _internal_has_sock_close()
      ? *_impl_.cmd_.sock_close_
      : reinterpret_cast< ::Command_SockClose&>(::_Command_SockClose_default_instance_);
}
inline const ::Command_SockClose& Command::sock_close() const {
  // @@protoc_insertion_point(field_get:Command.sock_close)
  return _internal_sock_close();
}
inline ::Command_SockClose* Command::unsafe_arena_release_sock_close() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_close)
  if (_internal_has_sock_close()) {
    clear_has_cmd();
    ::Command_SockClose* temp = _impl_.cmd_.sock_close_;
    _impl_.cmd_.sock_close_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_close(::Command_SockClose* sock_close) {
  clear_cmd();
  if (sock_close) {
    set_has_sock_close();
    _impl_.cmd_.sock_close_ = sock_close;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_close)
}
inline ::Command_SockClose* Command::_internal_mutable_sock_close() {
  if (!_internal_has_sock_close()) {
    clear_cmd();
    set_has_sock_close();
    _impl_.cmd_.sock_close_ = CreateMaybeMessage< ::Command_SockClose >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_close_;
}
inline ::Command_SockClose* Command::mutable_sock_close() {
  ::Command_SockClose* _msg = _internal_mutable_sock_close();
  // @@protoc_insertion_point(field_mutable:Command.sock_close)
  return _msg;
}

// .Command.InetPton inet_pton = 5;
inline bool Command::_internal_has_inet_pton() const {
  return cmd_case() == kInetPton;
}
inline bool Command::has_inet_pton() const {
  return _internal_has_inet_pton();
}
inline void Command::set_has_inet_pton() {
  _impl_._oneof_case_[0] = kInetPton;
}
inline void Command::clear_inet_pton() {
  if (_internal_has_inet_pton()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.inet_pton_;
    }
    clear_has_cmd();
  }
}
inline ::Command_InetPton* Command::release_inet_pton() {
  // @@protoc_insertion_point(field_release:Command.inet_pton)
  if (_internal_has_inet_pton()) {
    clear_has_cmd();
    ::Command_InetPton* temp = _impl_.cmd_.inet_pton_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.inet_pton_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_InetPton& Command::_internal_inet_pton() const {
  return _internal_has_inet_pton()
      ? *_impl_.cmd_.inet_pton_
      : reinterpret_cast< ::Command_InetPton&>(::_Command_InetPton_default_instance_);
}
inline const ::Command_InetPton& Command::inet_pton() const {
  // @@protoc_insertion_point(field_get:Command.inet_pton)
  return _internal_inet_pton();
}
inline ::Command_InetPton* Command::unsafe_arena_release_inet_pton() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.inet_pton)
  if (_internal_has_inet_pton()) {
    clear_has_cmd();
    ::Command_InetPton* temp = _impl_.cmd_.inet_pton_;
    _impl_.cmd_.inet_pton_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_inet_pton(::Command_InetPton* inet_pton) {
  clear_cmd();
  if (inet_pton) {
    set_has_inet_pton();
    _impl_.cmd_.inet_pton_ = inet_pton;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.inet_pton)
}
inline ::Command_InetPton* Command::_internal_mutable_inet_pton() {
  if (!_internal_has_inet_pton()) {
    clear_cmd();
    set_has_inet_pton();
    _impl_.cmd_.inet_pton_ = CreateMaybeMessage< ::Command_InetPton >(GetArenaForAllocation());
  }
  return _impl_.cmd_.inet_pton_;
}
inline ::Command_InetPton* Command::mutable_inet_pton() {
  ::Command_InetPton* _msg = _internal_mutable_inet_pton();
  // @@protoc_insertion_point(field_mutable:Command.inet_pton)
  return _msg;
}

// .Command.InetNtop inet_ntop = 6;
inline bool Command::_internal_has_inet_ntop() const {
  return cmd_case() == kInetNtop;
}
inline bool Command::has_inet_ntop() const {
  return _internal_has_inet_ntop();
}
inline void Command::set_has_inet_ntop() {
  _impl_._oneof_case_[0] = kInetNtop;
}
inline void Command::clear_inet_ntop() {
  if (_internal_has_inet_ntop()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.inet_ntop_;
    }
    clear_has_cmd();
  }
}
inline ::Command_InetNtop* Command::release_inet_ntop() {
  // @@protoc_insertion_point(field_release:Command.inet_ntop)
  if (_internal_has_inet_ntop()) {
    clear_has_cmd();
    ::Command_InetNtop* temp = _impl_.cmd_.inet_ntop_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.inet_ntop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_InetNtop& Command::_internal_inet_ntop() const {
  return _internal_has_inet_ntop()
      ? *_impl_.cmd_.inet_ntop_
      : reinterpret_cast< ::Command_InetNtop&>(::_Command_InetNtop_default_instance_);
}
inline const ::Command_InetNtop& Command::inet_ntop() const {
  // @@protoc_insertion_point(field_get:Command.inet_ntop)
  return _internal_inet_ntop();
}
inline ::Command_InetNtop* Command::unsafe_arena_release_inet_ntop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.inet_ntop)
  if (_internal_has_inet_ntop()) {
    clear_has_cmd();
    ::Command_InetNtop* temp = _impl_.cmd_.inet_ntop_;
    _impl_.cmd_.inet_ntop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_inet_ntop(::Command_InetNtop* inet_ntop) {
  clear_cmd();
  if (inet_ntop) {
    set_has_inet_ntop();
    _impl_.cmd_.inet_ntop_ = inet_ntop;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.inet_ntop)
}
inline ::Command_InetNtop* Command::_internal_mutable_inet_ntop() {
  if (!_internal_has_inet_ntop()) {
    clear_cmd();
    set_has_inet_ntop();
    _impl_.cmd_.inet_ntop_ = CreateMaybeMessage< ::Command_InetNtop >(GetArenaForAllocation());
  }
  return _impl_.cmd_.inet_ntop_;
}
inline ::Command_InetNtop* Command::mutable_inet_ntop() {
  ::Command_InetNtop* _msg = _internal_mutable_inet_ntop();
  // @@protoc_insertion_point(field_mutable:Command.inet_ntop)
  return _msg;
}

// .Command.InetAton inet_aton = 7;
inline bool Command::_internal_has_inet_aton() const {
  return cmd_case() == kInetAton;
}
inline bool Command::has_inet_aton() const {
  return _internal_has_inet_aton();
}
inline void Command::set_has_inet_aton() {
  _impl_._oneof_case_[0] = kInetAton;
}
inline void Command::clear_inet_aton() {
  if (_internal_has_inet_aton()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.inet_aton_;
    }
    clear_has_cmd();
  }
}
inline ::Command_InetAton* Command::release_inet_aton() {
  // @@protoc_insertion_point(field_release:Command.inet_aton)
  if (_internal_has_inet_aton()) {
    clear_has_cmd();
    ::Command_InetAton* temp = _impl_.cmd_.inet_aton_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.inet_aton_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_InetAton& Command::_internal_inet_aton() const {
  return _internal_has_inet_aton()
      ? *_impl_.cmd_.inet_aton_
      : reinterpret_cast< ::Command_InetAton&>(::_Command_InetAton_default_instance_);
}
inline const ::Command_InetAton& Command::inet_aton() const {
  // @@protoc_insertion_point(field_get:Command.inet_aton)
  return _internal_inet_aton();
}
inline ::Command_InetAton* Command::unsafe_arena_release_inet_aton() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.inet_aton)
  if (_internal_has_inet_aton()) {
    clear_has_cmd();
    ::Command_InetAton* temp = _impl_.cmd_.inet_aton_;
    _impl_.cmd_.inet_aton_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_inet_aton(::Command_InetAton* inet_aton) {
  clear_cmd();
  if (inet_aton) {
    set_has_inet_aton();
    _impl_.cmd_.inet_aton_ = inet_aton;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.inet_aton)
}
inline ::Command_InetAton* Command::_internal_mutable_inet_aton() {
  if (!_internal_has_inet_aton()) {
    clear_cmd();
    set_has_inet_aton();
    _impl_.cmd_.inet_aton_ = CreateMaybeMessage< ::Command_InetAton >(GetArenaForAllocation());
  }
  return _impl_.cmd_.inet_aton_;
}
inline ::Command_InetAton* Command::mutable_inet_aton() {
  ::Command_InetAton* _msg = _internal_mutable_inet_aton();
  // @@protoc_insertion_point(field_mutable:Command.inet_aton)
  return _msg;
}

// .Command.InetNtoa inet_ntoa = 8;
inline bool Command::_internal_has_inet_ntoa() const {
  return cmd_case() == kInetNtoa;
}
inline bool Command::has_inet_ntoa() const {
  return _internal_has_inet_ntoa();
}
inline void Command::set_has_inet_ntoa() {
  _impl_._oneof_case_[0] = kInetNtoa;
}
inline void Command::clear_inet_ntoa() {
  if (_internal_has_inet_ntoa()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.inet_ntoa_;
    }
    clear_has_cmd();
  }
}
inline ::Command_InetNtoa* Command::release_inet_ntoa() {
  // @@protoc_insertion_point(field_release:Command.inet_ntoa)
  if (_internal_has_inet_ntoa()) {
    clear_has_cmd();
    ::Command_InetNtoa* temp = _impl_.cmd_.inet_ntoa_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.inet_ntoa_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_InetNtoa& Command::_internal_inet_ntoa() const {
  return _internal_has_inet_ntoa()
      ? *_impl_.cmd_.inet_ntoa_
      : reinterpret_cast< ::Command_InetNtoa&>(::_Command_InetNtoa_default_instance_);
}
inline const ::Command_InetNtoa& Command::inet_ntoa() const {
  // @@protoc_insertion_point(field_get:Command.inet_ntoa)
  return _internal_inet_ntoa();
}
inline ::Command_InetNtoa* Command::unsafe_arena_release_inet_ntoa() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.inet_ntoa)
  if (_internal_has_inet_ntoa()) {
    clear_has_cmd();
    ::Command_InetNtoa* temp = _impl_.cmd_.inet_ntoa_;
    _impl_.cmd_.inet_ntoa_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_inet_ntoa(::Command_InetNtoa* inet_ntoa) {
  clear_cmd();
  if (inet_ntoa) {
    set_has_inet_ntoa();
    _impl_.cmd_.inet_ntoa_ = inet_ntoa;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.inet_ntoa)
}
inline ::Command_InetNtoa* Command::_internal_mutable_inet_ntoa() {
  if (!_internal_has_inet_ntoa()) {
    clear_cmd();
    set_has_inet_ntoa();
    _impl_.cmd_.inet_ntoa_ = CreateMaybeMessage< ::Command_InetNtoa >(GetArenaForAllocation());
  }
  return _impl_.cmd_.inet_ntoa_;
}
inline ::Command_InetNtoa* Command::mutable_inet_ntoa() {
  ::Command_InetNtoa* _msg = _internal_mutable_inet_ntoa();
  // @@protoc_insertion_point(field_mutable:Command.inet_ntoa)
  return _msg;
}

// .Command.Htons htons = 9;
inline bool Command::_internal_has_htons() const {
  return cmd_case() == kHtons;
}
inline bool Command::has_htons() const {
  return _internal_has_htons();
}
inline void Command::set_has_htons() {
  _impl_._oneof_case_[0] = kHtons;
}
inline void Command::clear_htons() {
  if (_internal_has_htons()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.htons_;
    }
    clear_has_cmd();
  }
}
inline ::Command_Htons* Command::release_htons() {
  // @@protoc_insertion_point(field_release:Command.htons)
  if (_internal_has_htons()) {
    clear_has_cmd();
    ::Command_Htons* temp = _impl_.cmd_.htons_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.htons_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_Htons& Command::_internal_htons() const {
  return _internal_has_htons()
      ? *_impl_.cmd_.htons_
      : reinterpret_cast< ::Command_Htons&>(::_Command_Htons_default_instance_);
}
inline const ::Command_Htons& Command::htons() const {
  // @@protoc_insertion_point(field_get:Command.htons)
  return _internal_htons();
}
inline ::Command_Htons* Command::unsafe_arena_release_htons() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.htons)
  if (_internal_has_htons()) {
    clear_has_cmd();
    ::Command_Htons* temp = _impl_.cmd_.htons_;
    _impl_.cmd_.htons_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_htons(::Command_Htons* htons) {
  clear_cmd();
  if (htons) {
    set_has_htons();
    _impl_.cmd_.htons_ = htons;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.htons)
}
inline ::Command_Htons* Command::_internal_mutable_htons() {
  if (!_internal_has_htons()) {
    clear_cmd();
    set_has_htons();
    _impl_.cmd_.htons_ = CreateMaybeMessage< ::Command_Htons >(GetArenaForAllocation());
  }
  return _impl_.cmd_.htons_;
}
inline ::Command_Htons* Command::mutable_htons() {
  ::Command_Htons* _msg = _internal_mutable_htons();
  // @@protoc_insertion_point(field_mutable:Command.htons)
  return _msg;
}

// .Command.Htonl htonl = 10;
inline bool Command::_internal_has_htonl() const {
  return cmd_case() == kHtonl;
}
inline bool Command::has_htonl() const {
  return _internal_has_htonl();
}
inline void Command::set_has_htonl() {
  _impl_._oneof_case_[0] = kHtonl;
}
inline void Command::clear_htonl() {
  if (_internal_has_htonl()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.htonl_;
    }
    clear_has_cmd();
  }
}
inline ::Command_Htonl* Command::release_htonl() {
  // @@protoc_insertion_point(field_release:Command.htonl)
  if (_internal_has_htonl()) {
    clear_has_cmd();
    ::Command_Htonl* temp = _impl_.cmd_.htonl_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.htonl_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_Htonl& Command::_internal_htonl() const {
  return _internal_has_htonl()
      ? *_impl_.cmd_.htonl_
      : reinterpret_cast< ::Command_Htonl&>(::_Command_Htonl_default_instance_);
}
inline const ::Command_Htonl& Command::htonl() const {
  // @@protoc_insertion_point(field_get:Command.htonl)
  return _internal_htonl();
}
inline ::Command_Htonl* Command::unsafe_arena_release_htonl() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.htonl)
  if (_internal_has_htonl()) {
    clear_has_cmd();
    ::Command_Htonl* temp = _impl_.cmd_.htonl_;
    _impl_.cmd_.htonl_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_htonl(::Command_Htonl* htonl) {
  clear_cmd();
  if (htonl) {
    set_has_htonl();
    _impl_.cmd_.htonl_ = htonl;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.htonl)
}
inline ::Command_Htonl* Command::_internal_mutable_htonl() {
  if (!_internal_has_htonl()) {
    clear_cmd();
    set_has_htonl();
    _impl_.cmd_.htonl_ = CreateMaybeMessage< ::Command_Htonl >(GetArenaForAllocation());
  }
  return _impl_.cmd_.htonl_;
}
inline ::Command_Htonl* Command::mutable_htonl() {
  ::Command_Htonl* _msg = _internal_mutable_htonl();
  // @@protoc_insertion_point(field_mutable:Command.htonl)
  return _msg;
}

// .Command.Ntohs ntohs = 11;
inline bool Command::_internal_has_ntohs() const {
  return cmd_case() == kNtohs;
}
inline bool Command::has_ntohs() const {
  return _internal_has_ntohs();
}
inline void Command::set_has_ntohs() {
  _impl_._oneof_case_[0] = kNtohs;
}
inline void Command::clear_ntohs() {
  if (_internal_has_ntohs()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.ntohs_;
    }
    clear_has_cmd();
  }
}
inline ::Command_Ntohs* Command::release_ntohs() {
  // @@protoc_insertion_point(field_release:Command.ntohs)
  if (_internal_has_ntohs()) {
    clear_has_cmd();
    ::Command_Ntohs* temp = _impl_.cmd_.ntohs_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.ntohs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_Ntohs& Command::_internal_ntohs() const {
  return _internal_has_ntohs()
      ? *_impl_.cmd_.ntohs_
      : reinterpret_cast< ::Command_Ntohs&>(::_Command_Ntohs_default_instance_);
}
inline const ::Command_Ntohs& Command::ntohs() const {
  // @@protoc_insertion_point(field_get:Command.ntohs)
  return _internal_ntohs();
}
inline ::Command_Ntohs* Command::unsafe_arena_release_ntohs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.ntohs)
  if (_internal_has_ntohs()) {
    clear_has_cmd();
    ::Command_Ntohs* temp = _impl_.cmd_.ntohs_;
    _impl_.cmd_.ntohs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_ntohs(::Command_Ntohs* ntohs) {
  clear_cmd();
  if (ntohs) {
    set_has_ntohs();
    _impl_.cmd_.ntohs_ = ntohs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.ntohs)
}
inline ::Command_Ntohs* Command::_internal_mutable_ntohs() {
  if (!_internal_has_ntohs()) {
    clear_cmd();
    set_has_ntohs();
    _impl_.cmd_.ntohs_ = CreateMaybeMessage< ::Command_Ntohs >(GetArenaForAllocation());
  }
  return _impl_.cmd_.ntohs_;
}
inline ::Command_Ntohs* Command::mutable_ntohs() {
  ::Command_Ntohs* _msg = _internal_mutable_ntohs();
  // @@protoc_insertion_point(field_mutable:Command.ntohs)
  return _msg;
}

// .Command.Ntohl ntohl = 12;
inline bool Command::_internal_has_ntohl() const {
  return cmd_case() == kNtohl;
}
inline bool Command::has_ntohl() const {
  return _internal_has_ntohl();
}
inline void Command::set_has_ntohl() {
  _impl_._oneof_case_[0] = kNtohl;
}
inline void Command::clear_ntohl() {
  if (_internal_has_ntohl()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.ntohl_;
    }
    clear_has_cmd();
  }
}
inline ::Command_Ntohl* Command::release_ntohl() {
  // @@protoc_insertion_point(field_release:Command.ntohl)
  if (_internal_has_ntohl()) {
    clear_has_cmd();
    ::Command_Ntohl* temp = _impl_.cmd_.ntohl_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.ntohl_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_Ntohl& Command::_internal_ntohl() const {
  return _internal_has_ntohl()
      ? *_impl_.cmd_.ntohl_
      : reinterpret_cast< ::Command_Ntohl&>(::_Command_Ntohl_default_instance_);
}
inline const ::Command_Ntohl& Command::ntohl() const {
  // @@protoc_insertion_point(field_get:Command.ntohl)
  return _internal_ntohl();
}
inline ::Command_Ntohl* Command::unsafe_arena_release_ntohl() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.ntohl)
  if (_internal_has_ntohl()) {
    clear_has_cmd();
    ::Command_Ntohl* temp = _impl_.cmd_.ntohl_;
    _impl_.cmd_.ntohl_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_ntohl(::Command_Ntohl* ntohl) {
  clear_cmd();
  if (ntohl) {
    set_has_ntohl();
    _impl_.cmd_.ntohl_ = ntohl;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.ntohl)
}
inline ::Command_Ntohl* Command::_internal_mutable_ntohl() {
  if (!_internal_has_ntohl()) {
    clear_cmd();
    set_has_ntohl();
    _impl_.cmd_.ntohl_ = CreateMaybeMessage< ::Command_Ntohl >(GetArenaForAllocation());
  }
  return _impl_.cmd_.ntohl_;
}
inline ::Command_Ntohl* Command::mutable_ntohl() {
  ::Command_Ntohl* _msg = _internal_mutable_ntohl();
  // @@protoc_insertion_point(field_mutable:Command.ntohl)
  return _msg;
}

// .Command.Getaddrinfo getaddrinfo = 13;
inline bool Command::_internal_has_getaddrinfo() const {
  return cmd_case() == kGetaddrinfo;
}
inline bool Command::has_getaddrinfo() const {
  return _internal_has_getaddrinfo();
}
inline void Command::set_has_getaddrinfo() {
  _impl_._oneof_case_[0] = kGetaddrinfo;
}
inline void Command::clear_getaddrinfo() {
  if (_internal_has_getaddrinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.getaddrinfo_;
    }
    clear_has_cmd();
  }
}
inline ::Command_Getaddrinfo* Command::release_getaddrinfo() {
  // @@protoc_insertion_point(field_release:Command.getaddrinfo)
  if (_internal_has_getaddrinfo()) {
    clear_has_cmd();
    ::Command_Getaddrinfo* temp = _impl_.cmd_.getaddrinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.getaddrinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_Getaddrinfo& Command::_internal_getaddrinfo() const {
  return _internal_has_getaddrinfo()
      ? *_impl_.cmd_.getaddrinfo_
      : reinterpret_cast< ::Command_Getaddrinfo&>(::_Command_Getaddrinfo_default_instance_);
}
inline const ::Command_Getaddrinfo& Command::getaddrinfo() const {
  // @@protoc_insertion_point(field_get:Command.getaddrinfo)
  return _internal_getaddrinfo();
}
inline ::Command_Getaddrinfo* Command::unsafe_arena_release_getaddrinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.getaddrinfo)
  if (_internal_has_getaddrinfo()) {
    clear_has_cmd();
    ::Command_Getaddrinfo* temp = _impl_.cmd_.getaddrinfo_;
    _impl_.cmd_.getaddrinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_getaddrinfo(::Command_Getaddrinfo* getaddrinfo) {
  clear_cmd();
  if (getaddrinfo) {
    set_has_getaddrinfo();
    _impl_.cmd_.getaddrinfo_ = getaddrinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.getaddrinfo)
}
inline ::Command_Getaddrinfo* Command::_internal_mutable_getaddrinfo() {
  if (!_internal_has_getaddrinfo()) {
    clear_cmd();
    set_has_getaddrinfo();
    _impl_.cmd_.getaddrinfo_ = CreateMaybeMessage< ::Command_Getaddrinfo >(GetArenaForAllocation());
  }
  return _impl_.cmd_.getaddrinfo_;
}
inline ::Command_Getaddrinfo* Command::mutable_getaddrinfo() {
  ::Command_Getaddrinfo* _msg = _internal_mutable_getaddrinfo();
  // @@protoc_insertion_point(field_mutable:Command.getaddrinfo)
  return _msg;
}

// .Command.Getnameinfo getnameinfo = 14;
inline bool Command::_internal_has_getnameinfo() const {
  return cmd_case() == kGetnameinfo;
}
inline bool Command::has_getnameinfo() const {
  return _internal_has_getnameinfo();
}
inline void Command::set_has_getnameinfo() {
  _impl_._oneof_case_[0] = kGetnameinfo;
}
inline void Command::clear_getnameinfo() {
  if (_internal_has_getnameinfo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.getnameinfo_;
    }
    clear_has_cmd();
  }
}
inline ::Command_Getnameinfo* Command::release_getnameinfo() {
  // @@protoc_insertion_point(field_release:Command.getnameinfo)
  if (_internal_has_getnameinfo()) {
    clear_has_cmd();
    ::Command_Getnameinfo* temp = _impl_.cmd_.getnameinfo_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.getnameinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_Getnameinfo& Command::_internal_getnameinfo() const {
  return _internal_has_getnameinfo()
      ? *_impl_.cmd_.getnameinfo_
      : reinterpret_cast< ::Command_Getnameinfo&>(::_Command_Getnameinfo_default_instance_);
}
inline const ::Command_Getnameinfo& Command::getnameinfo() const {
  // @@protoc_insertion_point(field_get:Command.getnameinfo)
  return _internal_getnameinfo();
}
inline ::Command_Getnameinfo* Command::unsafe_arena_release_getnameinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.getnameinfo)
  if (_internal_has_getnameinfo()) {
    clear_has_cmd();
    ::Command_Getnameinfo* temp = _impl_.cmd_.getnameinfo_;
    _impl_.cmd_.getnameinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_getnameinfo(::Command_Getnameinfo* getnameinfo) {
  clear_cmd();
  if (getnameinfo) {
    set_has_getnameinfo();
    _impl_.cmd_.getnameinfo_ = getnameinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.getnameinfo)
}
inline ::Command_Getnameinfo* Command::_internal_mutable_getnameinfo() {
  if (!_internal_has_getnameinfo()) {
    clear_cmd();
    set_has_getnameinfo();
    _impl_.cmd_.getnameinfo_ = CreateMaybeMessage< ::Command_Getnameinfo >(GetArenaForAllocation());
  }
  return _impl_.cmd_.getnameinfo_;
}
inline ::Command_Getnameinfo* Command::mutable_getnameinfo() {
  ::Command_Getnameinfo* _msg = _internal_mutable_getnameinfo();
  // @@protoc_insertion_point(field_mutable:Command.getnameinfo)
  return _msg;
}

// .Command.IfNameindex if_nameindex = 15;
inline bool Command::_internal_has_if_nameindex() const {
  return cmd_case() == kIfNameindex;
}
inline bool Command::has_if_nameindex() const {
  return _internal_has_if_nameindex();
}
inline void Command::set_has_if_nameindex() {
  _impl_._oneof_case_[0] = kIfNameindex;
}
inline void Command::clear_if_nameindex() {
  if (_internal_has_if_nameindex()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.if_nameindex_;
    }
    clear_has_cmd();
  }
}
inline ::Command_IfNameindex* Command::release_if_nameindex() {
  // @@protoc_insertion_point(field_release:Command.if_nameindex)
  if (_internal_has_if_nameindex()) {
    clear_has_cmd();
    ::Command_IfNameindex* temp = _impl_.cmd_.if_nameindex_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.if_nameindex_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_IfNameindex& Command::_internal_if_nameindex() const {
  return _internal_has_if_nameindex()
      ? *_impl_.cmd_.if_nameindex_
      : reinterpret_cast< ::Command_IfNameindex&>(::_Command_IfNameindex_default_instance_);
}
inline const ::Command_IfNameindex& Command::if_nameindex() const {
  // @@protoc_insertion_point(field_get:Command.if_nameindex)
  return _internal_if_nameindex();
}
inline ::Command_IfNameindex* Command::unsafe_arena_release_if_nameindex() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.if_nameindex)
  if (_internal_has_if_nameindex()) {
    clear_has_cmd();
    ::Command_IfNameindex* temp = _impl_.cmd_.if_nameindex_;
    _impl_.cmd_.if_nameindex_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_if_nameindex(::Command_IfNameindex* if_nameindex) {
  clear_cmd();
  if (if_nameindex) {
    set_has_if_nameindex();
    _impl_.cmd_.if_nameindex_ = if_nameindex;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.if_nameindex)
}
inline ::Command_IfNameindex* Command::_internal_mutable_if_nameindex() {
  if (!_internal_has_if_nameindex()) {
    clear_cmd();
    set_has_if_nameindex();
    _impl_.cmd_.if_nameindex_ = CreateMaybeMessage< ::Command_IfNameindex >(GetArenaForAllocation());
  }
  return _impl_.cmd_.if_nameindex_;
}
inline ::Command_IfNameindex* Command::mutable_if_nameindex() {
  ::Command_IfNameindex* _msg = _internal_mutable_if_nameindex();
  // @@protoc_insertion_point(field_mutable:Command.if_nameindex)
  return _msg;
}

// .Command.IfNametoindex if_nametoindex = 16;
inline bool Command::_internal_has_if_nametoindex() const {
  return cmd_case() == kIfNametoindex;
}
inline bool Command::has_if_nametoindex() const {
  return _internal_has_if_nametoindex();
}
inline void Command::set_has_if_nametoindex() {
  _impl_._oneof_case_[0] = kIfNametoindex;
}
inline void Command::clear_if_nametoindex() {
  if (_internal_has_if_nametoindex()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.if_nametoindex_;
    }
    clear_has_cmd();
  }
}
inline ::Command_IfNametoindex* Command::release_if_nametoindex() {
  // @@protoc_insertion_point(field_release:Command.if_nametoindex)
  if (_internal_has_if_nametoindex()) {
    clear_has_cmd();
    ::Command_IfNametoindex* temp = _impl_.cmd_.if_nametoindex_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.if_nametoindex_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_IfNametoindex& Command::_internal_if_nametoindex() const {
  return _internal_has_if_nametoindex()
      ? *_impl_.cmd_.if_nametoindex_
      : reinterpret_cast< ::Command_IfNametoindex&>(::_Command_IfNametoindex_default_instance_);
}
inline const ::Command_IfNametoindex& Command::if_nametoindex() const {
  // @@protoc_insertion_point(field_get:Command.if_nametoindex)
  return _internal_if_nametoindex();
}
inline ::Command_IfNametoindex* Command::unsafe_arena_release_if_nametoindex() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.if_nametoindex)
  if (_internal_has_if_nametoindex()) {
    clear_has_cmd();
    ::Command_IfNametoindex* temp = _impl_.cmd_.if_nametoindex_;
    _impl_.cmd_.if_nametoindex_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_if_nametoindex(::Command_IfNametoindex* if_nametoindex) {
  clear_cmd();
  if (if_nametoindex) {
    set_has_if_nametoindex();
    _impl_.cmd_.if_nametoindex_ = if_nametoindex;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.if_nametoindex)
}
inline ::Command_IfNametoindex* Command::_internal_mutable_if_nametoindex() {
  if (!_internal_has_if_nametoindex()) {
    clear_cmd();
    set_has_if_nametoindex();
    _impl_.cmd_.if_nametoindex_ = CreateMaybeMessage< ::Command_IfNametoindex >(GetArenaForAllocation());
  }
  return _impl_.cmd_.if_nametoindex_;
}
inline ::Command_IfNametoindex* Command::mutable_if_nametoindex() {
  ::Command_IfNametoindex* _msg = _internal_mutable_if_nametoindex();
  // @@protoc_insertion_point(field_mutable:Command.if_nametoindex)
  return _msg;
}

// .Command.IfIndextoname if_indextoname = 17;
inline bool Command::_internal_has_if_indextoname() const {
  return cmd_case() == kIfIndextoname;
}
inline bool Command::has_if_indextoname() const {
  return _internal_has_if_indextoname();
}
inline void Command::set_has_if_indextoname() {
  _impl_._oneof_case_[0] = kIfIndextoname;
}
inline void Command::clear_if_indextoname() {
  if (_internal_has_if_indextoname()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.if_indextoname_;
    }
    clear_has_cmd();
  }
}
inline ::Command_IfIndextoname* Command::release_if_indextoname() {
  // @@protoc_insertion_point(field_release:Command.if_indextoname)
  if (_internal_has_if_indextoname()) {
    clear_has_cmd();
    ::Command_IfIndextoname* temp = _impl_.cmd_.if_indextoname_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.if_indextoname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_IfIndextoname& Command::_internal_if_indextoname() const {
  return _internal_has_if_indextoname()
      ? *_impl_.cmd_.if_indextoname_
      : reinterpret_cast< ::Command_IfIndextoname&>(::_Command_IfIndextoname_default_instance_);
}
inline const ::Command_IfIndextoname& Command::if_indextoname() const {
  // @@protoc_insertion_point(field_get:Command.if_indextoname)
  return _internal_if_indextoname();
}
inline ::Command_IfIndextoname* Command::unsafe_arena_release_if_indextoname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.if_indextoname)
  if (_internal_has_if_indextoname()) {
    clear_has_cmd();
    ::Command_IfIndextoname* temp = _impl_.cmd_.if_indextoname_;
    _impl_.cmd_.if_indextoname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_if_indextoname(::Command_IfIndextoname* if_indextoname) {
  clear_cmd();
  if (if_indextoname) {
    set_has_if_indextoname();
    _impl_.cmd_.if_indextoname_ = if_indextoname;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.if_indextoname)
}
inline ::Command_IfIndextoname* Command::_internal_mutable_if_indextoname() {
  if (!_internal_has_if_indextoname()) {
    clear_cmd();
    set_has_if_indextoname();
    _impl_.cmd_.if_indextoname_ = CreateMaybeMessage< ::Command_IfIndextoname >(GetArenaForAllocation());
  }
  return _impl_.cmd_.if_indextoname_;
}
inline ::Command_IfIndextoname* Command::mutable_if_indextoname() {
  ::Command_IfIndextoname* _msg = _internal_mutable_if_indextoname();
  // @@protoc_insertion_point(field_mutable:Command.if_indextoname)
  return _msg;
}

// .Command.Gethostbyname gethostbyname = 18;
inline bool Command::_internal_has_gethostbyname() const {
  return cmd_case() == kGethostbyname;
}
inline bool Command::has_gethostbyname() const {
  return _internal_has_gethostbyname();
}
inline void Command::set_has_gethostbyname() {
  _impl_._oneof_case_[0] = kGethostbyname;
}
inline void Command::clear_gethostbyname() {
  if (_internal_has_gethostbyname()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.gethostbyname_;
    }
    clear_has_cmd();
  }
}
inline ::Command_Gethostbyname* Command::release_gethostbyname() {
  // @@protoc_insertion_point(field_release:Command.gethostbyname)
  if (_internal_has_gethostbyname()) {
    clear_has_cmd();
    ::Command_Gethostbyname* temp = _impl_.cmd_.gethostbyname_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.gethostbyname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_Gethostbyname& Command::_internal_gethostbyname() const {
  return _internal_has_gethostbyname()
      ? *_impl_.cmd_.gethostbyname_
      : reinterpret_cast< ::Command_Gethostbyname&>(::_Command_Gethostbyname_default_instance_);
}
inline const ::Command_Gethostbyname& Command::gethostbyname() const {
  // @@protoc_insertion_point(field_get:Command.gethostbyname)
  return _internal_gethostbyname();
}
inline ::Command_Gethostbyname* Command::unsafe_arena_release_gethostbyname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.gethostbyname)
  if (_internal_has_gethostbyname()) {
    clear_has_cmd();
    ::Command_Gethostbyname* temp = _impl_.cmd_.gethostbyname_;
    _impl_.cmd_.gethostbyname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_gethostbyname(::Command_Gethostbyname* gethostbyname) {
  clear_cmd();
  if (gethostbyname) {
    set_has_gethostbyname();
    _impl_.cmd_.gethostbyname_ = gethostbyname;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.gethostbyname)
}
inline ::Command_Gethostbyname* Command::_internal_mutable_gethostbyname() {
  if (!_internal_has_gethostbyname()) {
    clear_cmd();
    set_has_gethostbyname();
    _impl_.cmd_.gethostbyname_ = CreateMaybeMessage< ::Command_Gethostbyname >(GetArenaForAllocation());
  }
  return _impl_.cmd_.gethostbyname_;
}
inline ::Command_Gethostbyname* Command::mutable_gethostbyname() {
  ::Command_Gethostbyname* _msg = _internal_mutable_gethostbyname();
  // @@protoc_insertion_point(field_mutable:Command.gethostbyname)
  return _msg;
}

// .Command.GethostbynameEx gethostbyname_ex = 19;
inline bool Command::_internal_has_gethostbyname_ex() const {
  return cmd_case() == kGethostbynameEx;
}
inline bool Command::has_gethostbyname_ex() const {
  return _internal_has_gethostbyname_ex();
}
inline void Command::set_has_gethostbyname_ex() {
  _impl_._oneof_case_[0] = kGethostbynameEx;
}
inline void Command::clear_gethostbyname_ex() {
  if (_internal_has_gethostbyname_ex()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.gethostbyname_ex_;
    }
    clear_has_cmd();
  }
}
inline ::Command_GethostbynameEx* Command::release_gethostbyname_ex() {
  // @@protoc_insertion_point(field_release:Command.gethostbyname_ex)
  if (_internal_has_gethostbyname_ex()) {
    clear_has_cmd();
    ::Command_GethostbynameEx* temp = _impl_.cmd_.gethostbyname_ex_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.gethostbyname_ex_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_GethostbynameEx& Command::_internal_gethostbyname_ex() const {
  return _internal_has_gethostbyname_ex()
      ? *_impl_.cmd_.gethostbyname_ex_
      : reinterpret_cast< ::Command_GethostbynameEx&>(::_Command_GethostbynameEx_default_instance_);
}
inline const ::Command_GethostbynameEx& Command::gethostbyname_ex() const {
  // @@protoc_insertion_point(field_get:Command.gethostbyname_ex)
  return _internal_gethostbyname_ex();
}
inline ::Command_GethostbynameEx* Command::unsafe_arena_release_gethostbyname_ex() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.gethostbyname_ex)
  if (_internal_has_gethostbyname_ex()) {
    clear_has_cmd();
    ::Command_GethostbynameEx* temp = _impl_.cmd_.gethostbyname_ex_;
    _impl_.cmd_.gethostbyname_ex_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_gethostbyname_ex(::Command_GethostbynameEx* gethostbyname_ex) {
  clear_cmd();
  if (gethostbyname_ex) {
    set_has_gethostbyname_ex();
    _impl_.cmd_.gethostbyname_ex_ = gethostbyname_ex;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.gethostbyname_ex)
}
inline ::Command_GethostbynameEx* Command::_internal_mutable_gethostbyname_ex() {
  if (!_internal_has_gethostbyname_ex()) {
    clear_cmd();
    set_has_gethostbyname_ex();
    _impl_.cmd_.gethostbyname_ex_ = CreateMaybeMessage< ::Command_GethostbynameEx >(GetArenaForAllocation());
  }
  return _impl_.cmd_.gethostbyname_ex_;
}
inline ::Command_GethostbynameEx* Command::mutable_gethostbyname_ex() {
  ::Command_GethostbynameEx* _msg = _internal_mutable_gethostbyname_ex();
  // @@protoc_insertion_point(field_mutable:Command.gethostbyname_ex)
  return _msg;
}

// .Command.Gethostbyaddr gethostbyaddr = 20;
inline bool Command::_internal_has_gethostbyaddr() const {
  return cmd_case() == kGethostbyaddr;
}
inline bool Command::has_gethostbyaddr() const {
  return _internal_has_gethostbyaddr();
}
inline void Command::set_has_gethostbyaddr() {
  _impl_._oneof_case_[0] = kGethostbyaddr;
}
inline void Command::clear_gethostbyaddr() {
  if (_internal_has_gethostbyaddr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.gethostbyaddr_;
    }
    clear_has_cmd();
  }
}
inline ::Command_Gethostbyaddr* Command::release_gethostbyaddr() {
  // @@protoc_insertion_point(field_release:Command.gethostbyaddr)
  if (_internal_has_gethostbyaddr()) {
    clear_has_cmd();
    ::Command_Gethostbyaddr* temp = _impl_.cmd_.gethostbyaddr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.gethostbyaddr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_Gethostbyaddr& Command::_internal_gethostbyaddr() const {
  return _internal_has_gethostbyaddr()
      ? *_impl_.cmd_.gethostbyaddr_
      : reinterpret_cast< ::Command_Gethostbyaddr&>(::_Command_Gethostbyaddr_default_instance_);
}
inline const ::Command_Gethostbyaddr& Command::gethostbyaddr() const {
  // @@protoc_insertion_point(field_get:Command.gethostbyaddr)
  return _internal_gethostbyaddr();
}
inline ::Command_Gethostbyaddr* Command::unsafe_arena_release_gethostbyaddr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.gethostbyaddr)
  if (_internal_has_gethostbyaddr()) {
    clear_has_cmd();
    ::Command_Gethostbyaddr* temp = _impl_.cmd_.gethostbyaddr_;
    _impl_.cmd_.gethostbyaddr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_gethostbyaddr(::Command_Gethostbyaddr* gethostbyaddr) {
  clear_cmd();
  if (gethostbyaddr) {
    set_has_gethostbyaddr();
    _impl_.cmd_.gethostbyaddr_ = gethostbyaddr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.gethostbyaddr)
}
inline ::Command_Gethostbyaddr* Command::_internal_mutable_gethostbyaddr() {
  if (!_internal_has_gethostbyaddr()) {
    clear_cmd();
    set_has_gethostbyaddr();
    _impl_.cmd_.gethostbyaddr_ = CreateMaybeMessage< ::Command_Gethostbyaddr >(GetArenaForAllocation());
  }
  return _impl_.cmd_.gethostbyaddr_;
}
inline ::Command_Gethostbyaddr* Command::mutable_gethostbyaddr() {
  ::Command_Gethostbyaddr* _msg = _internal_mutable_gethostbyaddr();
  // @@protoc_insertion_point(field_mutable:Command.gethostbyaddr)
  return _msg;
}

// .Command.Getservbyname getservbyname = 21;
inline bool Command::_internal_has_getservbyname() const {
  return cmd_case() == kGetservbyname;
}
inline bool Command::has_getservbyname() const {
  return _internal_has_getservbyname();
}
inline void Command::set_has_getservbyname() {
  _impl_._oneof_case_[0] = kGetservbyname;
}
inline void Command::clear_getservbyname() {
  if (_internal_has_getservbyname()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.getservbyname_;
    }
    clear_has_cmd();
  }
}
inline ::Command_Getservbyname* Command::release_getservbyname() {
  // @@protoc_insertion_point(field_release:Command.getservbyname)
  if (_internal_has_getservbyname()) {
    clear_has_cmd();
    ::Command_Getservbyname* temp = _impl_.cmd_.getservbyname_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.getservbyname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_Getservbyname& Command::_internal_getservbyname() const {
  return _internal_has_getservbyname()
      ? *_impl_.cmd_.getservbyname_
      : reinterpret_cast< ::Command_Getservbyname&>(::_Command_Getservbyname_default_instance_);
}
inline const ::Command_Getservbyname& Command::getservbyname() const {
  // @@protoc_insertion_point(field_get:Command.getservbyname)
  return _internal_getservbyname();
}
inline ::Command_Getservbyname* Command::unsafe_arena_release_getservbyname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.getservbyname)
  if (_internal_has_getservbyname()) {
    clear_has_cmd();
    ::Command_Getservbyname* temp = _impl_.cmd_.getservbyname_;
    _impl_.cmd_.getservbyname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_getservbyname(::Command_Getservbyname* getservbyname) {
  clear_cmd();
  if (getservbyname) {
    set_has_getservbyname();
    _impl_.cmd_.getservbyname_ = getservbyname;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.getservbyname)
}
inline ::Command_Getservbyname* Command::_internal_mutable_getservbyname() {
  if (!_internal_has_getservbyname()) {
    clear_cmd();
    set_has_getservbyname();
    _impl_.cmd_.getservbyname_ = CreateMaybeMessage< ::Command_Getservbyname >(GetArenaForAllocation());
  }
  return _impl_.cmd_.getservbyname_;
}
inline ::Command_Getservbyname* Command::mutable_getservbyname() {
  ::Command_Getservbyname* _msg = _internal_mutable_getservbyname();
  // @@protoc_insertion_point(field_mutable:Command.getservbyname)
  return _msg;
}

// .Command.Getservbyport getservbyport = 22;
inline bool Command::_internal_has_getservbyport() const {
  return cmd_case() == kGetservbyport;
}
inline bool Command::has_getservbyport() const {
  return _internal_has_getservbyport();
}
inline void Command::set_has_getservbyport() {
  _impl_._oneof_case_[0] = kGetservbyport;
}
inline void Command::clear_getservbyport() {
  if (_internal_has_getservbyport()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.getservbyport_;
    }
    clear_has_cmd();
  }
}
inline ::Command_Getservbyport* Command::release_getservbyport() {
  // @@protoc_insertion_point(field_release:Command.getservbyport)
  if (_internal_has_getservbyport()) {
    clear_has_cmd();
    ::Command_Getservbyport* temp = _impl_.cmd_.getservbyport_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.getservbyport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_Getservbyport& Command::_internal_getservbyport() const {
  return _internal_has_getservbyport()
      ? *_impl_.cmd_.getservbyport_
      : reinterpret_cast< ::Command_Getservbyport&>(::_Command_Getservbyport_default_instance_);
}
inline const ::Command_Getservbyport& Command::getservbyport() const {
  // @@protoc_insertion_point(field_get:Command.getservbyport)
  return _internal_getservbyport();
}
inline ::Command_Getservbyport* Command::unsafe_arena_release_getservbyport() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.getservbyport)
  if (_internal_has_getservbyport()) {
    clear_has_cmd();
    ::Command_Getservbyport* temp = _impl_.cmd_.getservbyport_;
    _impl_.cmd_.getservbyport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_getservbyport(::Command_Getservbyport* getservbyport) {
  clear_cmd();
  if (getservbyport) {
    set_has_getservbyport();
    _impl_.cmd_.getservbyport_ = getservbyport;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.getservbyport)
}
inline ::Command_Getservbyport* Command::_internal_mutable_getservbyport() {
  if (!_internal_has_getservbyport()) {
    clear_cmd();
    set_has_getservbyport();
    _impl_.cmd_.getservbyport_ = CreateMaybeMessage< ::Command_Getservbyport >(GetArenaForAllocation());
  }
  return _impl_.cmd_.getservbyport_;
}
inline ::Command_Getservbyport* Command::mutable_getservbyport() {
  ::Command_Getservbyport* _msg = _internal_mutable_getservbyport();
  // @@protoc_insertion_point(field_mutable:Command.getservbyport)
  return _msg;
}

// .Command.SockAccept sock_accept = 23;
inline bool Command::_internal_has_sock_accept() const {
  return cmd_case() == kSockAccept;
}
inline bool Command::has_sock_accept() const {
  return _internal_has_sock_accept();
}
inline void Command::set_has_sock_accept() {
  _impl_._oneof_case_[0] = kSockAccept;
}
inline void Command::clear_sock_accept() {
  if (_internal_has_sock_accept()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_accept_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockAccept* Command::release_sock_accept() {
  // @@protoc_insertion_point(field_release:Command.sock_accept)
  if (_internal_has_sock_accept()) {
    clear_has_cmd();
    ::Command_SockAccept* temp = _impl_.cmd_.sock_accept_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_accept_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockAccept& Command::_internal_sock_accept() const {
  return _internal_has_sock_accept()
      ? *_impl_.cmd_.sock_accept_
      : reinterpret_cast< ::Command_SockAccept&>(::_Command_SockAccept_default_instance_);
}
inline const ::Command_SockAccept& Command::sock_accept() const {
  // @@protoc_insertion_point(field_get:Command.sock_accept)
  return _internal_sock_accept();
}
inline ::Command_SockAccept* Command::unsafe_arena_release_sock_accept() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_accept)
  if (_internal_has_sock_accept()) {
    clear_has_cmd();
    ::Command_SockAccept* temp = _impl_.cmd_.sock_accept_;
    _impl_.cmd_.sock_accept_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_accept(::Command_SockAccept* sock_accept) {
  clear_cmd();
  if (sock_accept) {
    set_has_sock_accept();
    _impl_.cmd_.sock_accept_ = sock_accept;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_accept)
}
inline ::Command_SockAccept* Command::_internal_mutable_sock_accept() {
  if (!_internal_has_sock_accept()) {
    clear_cmd();
    set_has_sock_accept();
    _impl_.cmd_.sock_accept_ = CreateMaybeMessage< ::Command_SockAccept >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_accept_;
}
inline ::Command_SockAccept* Command::mutable_sock_accept() {
  ::Command_SockAccept* _msg = _internal_mutable_sock_accept();
  // @@protoc_insertion_point(field_mutable:Command.sock_accept)
  return _msg;
}

// .Command.SockBind sock_bind = 24;
inline bool Command::_internal_has_sock_bind() const {
  return cmd_case() == kSockBind;
}
inline bool Command::has_sock_bind() const {
  return _internal_has_sock_bind();
}
inline void Command::set_has_sock_bind() {
  _impl_._oneof_case_[0] = kSockBind;
}
inline void Command::clear_sock_bind() {
  if (_internal_has_sock_bind()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_bind_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockBind* Command::release_sock_bind() {
  // @@protoc_insertion_point(field_release:Command.sock_bind)
  if (_internal_has_sock_bind()) {
    clear_has_cmd();
    ::Command_SockBind* temp = _impl_.cmd_.sock_bind_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_bind_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockBind& Command::_internal_sock_bind() const {
  return _internal_has_sock_bind()
      ? *_impl_.cmd_.sock_bind_
      : reinterpret_cast< ::Command_SockBind&>(::_Command_SockBind_default_instance_);
}
inline const ::Command_SockBind& Command::sock_bind() const {
  // @@protoc_insertion_point(field_get:Command.sock_bind)
  return _internal_sock_bind();
}
inline ::Command_SockBind* Command::unsafe_arena_release_sock_bind() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_bind)
  if (_internal_has_sock_bind()) {
    clear_has_cmd();
    ::Command_SockBind* temp = _impl_.cmd_.sock_bind_;
    _impl_.cmd_.sock_bind_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_bind(::Command_SockBind* sock_bind) {
  clear_cmd();
  if (sock_bind) {
    set_has_sock_bind();
    _impl_.cmd_.sock_bind_ = sock_bind;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_bind)
}
inline ::Command_SockBind* Command::_internal_mutable_sock_bind() {
  if (!_internal_has_sock_bind()) {
    clear_cmd();
    set_has_sock_bind();
    _impl_.cmd_.sock_bind_ = CreateMaybeMessage< ::Command_SockBind >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_bind_;
}
inline ::Command_SockBind* Command::mutable_sock_bind() {
  ::Command_SockBind* _msg = _internal_mutable_sock_bind();
  // @@protoc_insertion_point(field_mutable:Command.sock_bind)
  return _msg;
}

// .Command.SockListen sock_listen = 25;
inline bool Command::_internal_has_sock_listen() const {
  return cmd_case() == kSockListen;
}
inline bool Command::has_sock_listen() const {
  return _internal_has_sock_listen();
}
inline void Command::set_has_sock_listen() {
  _impl_._oneof_case_[0] = kSockListen;
}
inline void Command::clear_sock_listen() {
  if (_internal_has_sock_listen()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_listen_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockListen* Command::release_sock_listen() {
  // @@protoc_insertion_point(field_release:Command.sock_listen)
  if (_internal_has_sock_listen()) {
    clear_has_cmd();
    ::Command_SockListen* temp = _impl_.cmd_.sock_listen_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_listen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockListen& Command::_internal_sock_listen() const {
  return _internal_has_sock_listen()
      ? *_impl_.cmd_.sock_listen_
      : reinterpret_cast< ::Command_SockListen&>(::_Command_SockListen_default_instance_);
}
inline const ::Command_SockListen& Command::sock_listen() const {
  // @@protoc_insertion_point(field_get:Command.sock_listen)
  return _internal_sock_listen();
}
inline ::Command_SockListen* Command::unsafe_arena_release_sock_listen() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_listen)
  if (_internal_has_sock_listen()) {
    clear_has_cmd();
    ::Command_SockListen* temp = _impl_.cmd_.sock_listen_;
    _impl_.cmd_.sock_listen_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_listen(::Command_SockListen* sock_listen) {
  clear_cmd();
  if (sock_listen) {
    set_has_sock_listen();
    _impl_.cmd_.sock_listen_ = sock_listen;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_listen)
}
inline ::Command_SockListen* Command::_internal_mutable_sock_listen() {
  if (!_internal_has_sock_listen()) {
    clear_cmd();
    set_has_sock_listen();
    _impl_.cmd_.sock_listen_ = CreateMaybeMessage< ::Command_SockListen >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_listen_;
}
inline ::Command_SockListen* Command::mutable_sock_listen() {
  ::Command_SockListen* _msg = _internal_mutable_sock_listen();
  // @@protoc_insertion_point(field_mutable:Command.sock_listen)
  return _msg;
}

// .Command.SockConnect sock_connect = 26;
inline bool Command::_internal_has_sock_connect() const {
  return cmd_case() == kSockConnect;
}
inline bool Command::has_sock_connect() const {
  return _internal_has_sock_connect();
}
inline void Command::set_has_sock_connect() {
  _impl_._oneof_case_[0] = kSockConnect;
}
inline void Command::clear_sock_connect() {
  if (_internal_has_sock_connect()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_connect_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockConnect* Command::release_sock_connect() {
  // @@protoc_insertion_point(field_release:Command.sock_connect)
  if (_internal_has_sock_connect()) {
    clear_has_cmd();
    ::Command_SockConnect* temp = _impl_.cmd_.sock_connect_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockConnect& Command::_internal_sock_connect() const {
  return _internal_has_sock_connect()
      ? *_impl_.cmd_.sock_connect_
      : reinterpret_cast< ::Command_SockConnect&>(::_Command_SockConnect_default_instance_);
}
inline const ::Command_SockConnect& Command::sock_connect() const {
  // @@protoc_insertion_point(field_get:Command.sock_connect)
  return _internal_sock_connect();
}
inline ::Command_SockConnect* Command::unsafe_arena_release_sock_connect() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_connect)
  if (_internal_has_sock_connect()) {
    clear_has_cmd();
    ::Command_SockConnect* temp = _impl_.cmd_.sock_connect_;
    _impl_.cmd_.sock_connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_connect(::Command_SockConnect* sock_connect) {
  clear_cmd();
  if (sock_connect) {
    set_has_sock_connect();
    _impl_.cmd_.sock_connect_ = sock_connect;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_connect)
}
inline ::Command_SockConnect* Command::_internal_mutable_sock_connect() {
  if (!_internal_has_sock_connect()) {
    clear_cmd();
    set_has_sock_connect();
    _impl_.cmd_.sock_connect_ = CreateMaybeMessage< ::Command_SockConnect >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_connect_;
}
inline ::Command_SockConnect* Command::mutable_sock_connect() {
  ::Command_SockConnect* _msg = _internal_mutable_sock_connect();
  // @@protoc_insertion_point(field_mutable:Command.sock_connect)
  return _msg;
}

// .Command.SockConnectEx sock_connect_ex = 27;
inline bool Command::_internal_has_sock_connect_ex() const {
  return cmd_case() == kSockConnectEx;
}
inline bool Command::has_sock_connect_ex() const {
  return _internal_has_sock_connect_ex();
}
inline void Command::set_has_sock_connect_ex() {
  _impl_._oneof_case_[0] = kSockConnectEx;
}
inline void Command::clear_sock_connect_ex() {
  if (_internal_has_sock_connect_ex()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_connect_ex_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockConnectEx* Command::release_sock_connect_ex() {
  // @@protoc_insertion_point(field_release:Command.sock_connect_ex)
  if (_internal_has_sock_connect_ex()) {
    clear_has_cmd();
    ::Command_SockConnectEx* temp = _impl_.cmd_.sock_connect_ex_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_connect_ex_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockConnectEx& Command::_internal_sock_connect_ex() const {
  return _internal_has_sock_connect_ex()
      ? *_impl_.cmd_.sock_connect_ex_
      : reinterpret_cast< ::Command_SockConnectEx&>(::_Command_SockConnectEx_default_instance_);
}
inline const ::Command_SockConnectEx& Command::sock_connect_ex() const {
  // @@protoc_insertion_point(field_get:Command.sock_connect_ex)
  return _internal_sock_connect_ex();
}
inline ::Command_SockConnectEx* Command::unsafe_arena_release_sock_connect_ex() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_connect_ex)
  if (_internal_has_sock_connect_ex()) {
    clear_has_cmd();
    ::Command_SockConnectEx* temp = _impl_.cmd_.sock_connect_ex_;
    _impl_.cmd_.sock_connect_ex_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_connect_ex(::Command_SockConnectEx* sock_connect_ex) {
  clear_cmd();
  if (sock_connect_ex) {
    set_has_sock_connect_ex();
    _impl_.cmd_.sock_connect_ex_ = sock_connect_ex;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_connect_ex)
}
inline ::Command_SockConnectEx* Command::_internal_mutable_sock_connect_ex() {
  if (!_internal_has_sock_connect_ex()) {
    clear_cmd();
    set_has_sock_connect_ex();
    _impl_.cmd_.sock_connect_ex_ = CreateMaybeMessage< ::Command_SockConnectEx >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_connect_ex_;
}
inline ::Command_SockConnectEx* Command::mutable_sock_connect_ex() {
  ::Command_SockConnectEx* _msg = _internal_mutable_sock_connect_ex();
  // @@protoc_insertion_point(field_mutable:Command.sock_connect_ex)
  return _msg;
}

// .Command.SockShutdown sock_shutdown = 28;
inline bool Command::_internal_has_sock_shutdown() const {
  return cmd_case() == kSockShutdown;
}
inline bool Command::has_sock_shutdown() const {
  return _internal_has_sock_shutdown();
}
inline void Command::set_has_sock_shutdown() {
  _impl_._oneof_case_[0] = kSockShutdown;
}
inline void Command::clear_sock_shutdown() {
  if (_internal_has_sock_shutdown()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_shutdown_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockShutdown* Command::release_sock_shutdown() {
  // @@protoc_insertion_point(field_release:Command.sock_shutdown)
  if (_internal_has_sock_shutdown()) {
    clear_has_cmd();
    ::Command_SockShutdown* temp = _impl_.cmd_.sock_shutdown_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_shutdown_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockShutdown& Command::_internal_sock_shutdown() const {
  return _internal_has_sock_shutdown()
      ? *_impl_.cmd_.sock_shutdown_
      : reinterpret_cast< ::Command_SockShutdown&>(::_Command_SockShutdown_default_instance_);
}
inline const ::Command_SockShutdown& Command::sock_shutdown() const {
  // @@protoc_insertion_point(field_get:Command.sock_shutdown)
  return _internal_sock_shutdown();
}
inline ::Command_SockShutdown* Command::unsafe_arena_release_sock_shutdown() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_shutdown)
  if (_internal_has_sock_shutdown()) {
    clear_has_cmd();
    ::Command_SockShutdown* temp = _impl_.cmd_.sock_shutdown_;
    _impl_.cmd_.sock_shutdown_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_shutdown(::Command_SockShutdown* sock_shutdown) {
  clear_cmd();
  if (sock_shutdown) {
    set_has_sock_shutdown();
    _impl_.cmd_.sock_shutdown_ = sock_shutdown;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_shutdown)
}
inline ::Command_SockShutdown* Command::_internal_mutable_sock_shutdown() {
  if (!_internal_has_sock_shutdown()) {
    clear_cmd();
    set_has_sock_shutdown();
    _impl_.cmd_.sock_shutdown_ = CreateMaybeMessage< ::Command_SockShutdown >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_shutdown_;
}
inline ::Command_SockShutdown* Command::mutable_sock_shutdown() {
  ::Command_SockShutdown* _msg = _internal_mutable_sock_shutdown();
  // @@protoc_insertion_point(field_mutable:Command.sock_shutdown)
  return _msg;
}

// .Command.SockSetsockopt sock_setsockopt = 29;
inline bool Command::_internal_has_sock_setsockopt() const {
  return cmd_case() == kSockSetsockopt;
}
inline bool Command::has_sock_setsockopt() const {
  return _internal_has_sock_setsockopt();
}
inline void Command::set_has_sock_setsockopt() {
  _impl_._oneof_case_[0] = kSockSetsockopt;
}
inline void Command::clear_sock_setsockopt() {
  if (_internal_has_sock_setsockopt()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_setsockopt_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockSetsockopt* Command::release_sock_setsockopt() {
  // @@protoc_insertion_point(field_release:Command.sock_setsockopt)
  if (_internal_has_sock_setsockopt()) {
    clear_has_cmd();
    ::Command_SockSetsockopt* temp = _impl_.cmd_.sock_setsockopt_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_setsockopt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockSetsockopt& Command::_internal_sock_setsockopt() const {
  return _internal_has_sock_setsockopt()
      ? *_impl_.cmd_.sock_setsockopt_
      : reinterpret_cast< ::Command_SockSetsockopt&>(::_Command_SockSetsockopt_default_instance_);
}
inline const ::Command_SockSetsockopt& Command::sock_setsockopt() const {
  // @@protoc_insertion_point(field_get:Command.sock_setsockopt)
  return _internal_sock_setsockopt();
}
inline ::Command_SockSetsockopt* Command::unsafe_arena_release_sock_setsockopt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_setsockopt)
  if (_internal_has_sock_setsockopt()) {
    clear_has_cmd();
    ::Command_SockSetsockopt* temp = _impl_.cmd_.sock_setsockopt_;
    _impl_.cmd_.sock_setsockopt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_setsockopt(::Command_SockSetsockopt* sock_setsockopt) {
  clear_cmd();
  if (sock_setsockopt) {
    set_has_sock_setsockopt();
    _impl_.cmd_.sock_setsockopt_ = sock_setsockopt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_setsockopt)
}
inline ::Command_SockSetsockopt* Command::_internal_mutable_sock_setsockopt() {
  if (!_internal_has_sock_setsockopt()) {
    clear_cmd();
    set_has_sock_setsockopt();
    _impl_.cmd_.sock_setsockopt_ = CreateMaybeMessage< ::Command_SockSetsockopt >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_setsockopt_;
}
inline ::Command_SockSetsockopt* Command::mutable_sock_setsockopt() {
  ::Command_SockSetsockopt* _msg = _internal_mutable_sock_setsockopt();
  // @@protoc_insertion_point(field_mutable:Command.sock_setsockopt)
  return _msg;
}

// .Command.SockGetsockopt sock_getsockopt = 30;
inline bool Command::_internal_has_sock_getsockopt() const {
  return cmd_case() == kSockGetsockopt;
}
inline bool Command::has_sock_getsockopt() const {
  return _internal_has_sock_getsockopt();
}
inline void Command::set_has_sock_getsockopt() {
  _impl_._oneof_case_[0] = kSockGetsockopt;
}
inline void Command::clear_sock_getsockopt() {
  if (_internal_has_sock_getsockopt()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_getsockopt_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockGetsockopt* Command::release_sock_getsockopt() {
  // @@protoc_insertion_point(field_release:Command.sock_getsockopt)
  if (_internal_has_sock_getsockopt()) {
    clear_has_cmd();
    ::Command_SockGetsockopt* temp = _impl_.cmd_.sock_getsockopt_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_getsockopt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockGetsockopt& Command::_internal_sock_getsockopt() const {
  return _internal_has_sock_getsockopt()
      ? *_impl_.cmd_.sock_getsockopt_
      : reinterpret_cast< ::Command_SockGetsockopt&>(::_Command_SockGetsockopt_default_instance_);
}
inline const ::Command_SockGetsockopt& Command::sock_getsockopt() const {
  // @@protoc_insertion_point(field_get:Command.sock_getsockopt)
  return _internal_sock_getsockopt();
}
inline ::Command_SockGetsockopt* Command::unsafe_arena_release_sock_getsockopt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_getsockopt)
  if (_internal_has_sock_getsockopt()) {
    clear_has_cmd();
    ::Command_SockGetsockopt* temp = _impl_.cmd_.sock_getsockopt_;
    _impl_.cmd_.sock_getsockopt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_getsockopt(::Command_SockGetsockopt* sock_getsockopt) {
  clear_cmd();
  if (sock_getsockopt) {
    set_has_sock_getsockopt();
    _impl_.cmd_.sock_getsockopt_ = sock_getsockopt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_getsockopt)
}
inline ::Command_SockGetsockopt* Command::_internal_mutable_sock_getsockopt() {
  if (!_internal_has_sock_getsockopt()) {
    clear_cmd();
    set_has_sock_getsockopt();
    _impl_.cmd_.sock_getsockopt_ = CreateMaybeMessage< ::Command_SockGetsockopt >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_getsockopt_;
}
inline ::Command_SockGetsockopt* Command::mutable_sock_getsockopt() {
  ::Command_SockGetsockopt* _msg = _internal_mutable_sock_getsockopt();
  // @@protoc_insertion_point(field_mutable:Command.sock_getsockopt)
  return _msg;
}

// .Command.SockSend sock_send = 31;
inline bool Command::_internal_has_sock_send() const {
  return cmd_case() == kSockSend;
}
inline bool Command::has_sock_send() const {
  return _internal_has_sock_send();
}
inline void Command::set_has_sock_send() {
  _impl_._oneof_case_[0] = kSockSend;
}
inline void Command::clear_sock_send() {
  if (_internal_has_sock_send()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_send_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockSend* Command::release_sock_send() {
  // @@protoc_insertion_point(field_release:Command.sock_send)
  if (_internal_has_sock_send()) {
    clear_has_cmd();
    ::Command_SockSend* temp = _impl_.cmd_.sock_send_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockSend& Command::_internal_sock_send() const {
  return _internal_has_sock_send()
      ? *_impl_.cmd_.sock_send_
      : reinterpret_cast< ::Command_SockSend&>(::_Command_SockSend_default_instance_);
}
inline const ::Command_SockSend& Command::sock_send() const {
  // @@protoc_insertion_point(field_get:Command.sock_send)
  return _internal_sock_send();
}
inline ::Command_SockSend* Command::unsafe_arena_release_sock_send() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_send)
  if (_internal_has_sock_send()) {
    clear_has_cmd();
    ::Command_SockSend* temp = _impl_.cmd_.sock_send_;
    _impl_.cmd_.sock_send_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_send(::Command_SockSend* sock_send) {
  clear_cmd();
  if (sock_send) {
    set_has_sock_send();
    _impl_.cmd_.sock_send_ = sock_send;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_send)
}
inline ::Command_SockSend* Command::_internal_mutable_sock_send() {
  if (!_internal_has_sock_send()) {
    clear_cmd();
    set_has_sock_send();
    _impl_.cmd_.sock_send_ = CreateMaybeMessage< ::Command_SockSend >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_send_;
}
inline ::Command_SockSend* Command::mutable_sock_send() {
  ::Command_SockSend* _msg = _internal_mutable_sock_send();
  // @@protoc_insertion_point(field_mutable:Command.sock_send)
  return _msg;
}

// .Command.SockSendto sock_sendto = 32;
inline bool Command::_internal_has_sock_sendto() const {
  return cmd_case() == kSockSendto;
}
inline bool Command::has_sock_sendto() const {
  return _internal_has_sock_sendto();
}
inline void Command::set_has_sock_sendto() {
  _impl_._oneof_case_[0] = kSockSendto;
}
inline void Command::clear_sock_sendto() {
  if (_internal_has_sock_sendto()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_sendto_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockSendto* Command::release_sock_sendto() {
  // @@protoc_insertion_point(field_release:Command.sock_sendto)
  if (_internal_has_sock_sendto()) {
    clear_has_cmd();
    ::Command_SockSendto* temp = _impl_.cmd_.sock_sendto_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_sendto_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockSendto& Command::_internal_sock_sendto() const {
  return _internal_has_sock_sendto()
      ? *_impl_.cmd_.sock_sendto_
      : reinterpret_cast< ::Command_SockSendto&>(::_Command_SockSendto_default_instance_);
}
inline const ::Command_SockSendto& Command::sock_sendto() const {
  // @@protoc_insertion_point(field_get:Command.sock_sendto)
  return _internal_sock_sendto();
}
inline ::Command_SockSendto* Command::unsafe_arena_release_sock_sendto() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_sendto)
  if (_internal_has_sock_sendto()) {
    clear_has_cmd();
    ::Command_SockSendto* temp = _impl_.cmd_.sock_sendto_;
    _impl_.cmd_.sock_sendto_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_sendto(::Command_SockSendto* sock_sendto) {
  clear_cmd();
  if (sock_sendto) {
    set_has_sock_sendto();
    _impl_.cmd_.sock_sendto_ = sock_sendto;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_sendto)
}
inline ::Command_SockSendto* Command::_internal_mutable_sock_sendto() {
  if (!_internal_has_sock_sendto()) {
    clear_cmd();
    set_has_sock_sendto();
    _impl_.cmd_.sock_sendto_ = CreateMaybeMessage< ::Command_SockSendto >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_sendto_;
}
inline ::Command_SockSendto* Command::mutable_sock_sendto() {
  ::Command_SockSendto* _msg = _internal_mutable_sock_sendto();
  // @@protoc_insertion_point(field_mutable:Command.sock_sendto)
  return _msg;
}

// .Command.SockSendall sock_sendall = 33;
inline bool Command::_internal_has_sock_sendall() const {
  return cmd_case() == kSockSendall;
}
inline bool Command::has_sock_sendall() const {
  return _internal_has_sock_sendall();
}
inline void Command::set_has_sock_sendall() {
  _impl_._oneof_case_[0] = kSockSendall;
}
inline void Command::clear_sock_sendall() {
  if (_internal_has_sock_sendall()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_sendall_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockSendall* Command::release_sock_sendall() {
  // @@protoc_insertion_point(field_release:Command.sock_sendall)
  if (_internal_has_sock_sendall()) {
    clear_has_cmd();
    ::Command_SockSendall* temp = _impl_.cmd_.sock_sendall_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_sendall_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockSendall& Command::_internal_sock_sendall() const {
  return _internal_has_sock_sendall()
      ? *_impl_.cmd_.sock_sendall_
      : reinterpret_cast< ::Command_SockSendall&>(::_Command_SockSendall_default_instance_);
}
inline const ::Command_SockSendall& Command::sock_sendall() const {
  // @@protoc_insertion_point(field_get:Command.sock_sendall)
  return _internal_sock_sendall();
}
inline ::Command_SockSendall* Command::unsafe_arena_release_sock_sendall() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_sendall)
  if (_internal_has_sock_sendall()) {
    clear_has_cmd();
    ::Command_SockSendall* temp = _impl_.cmd_.sock_sendall_;
    _impl_.cmd_.sock_sendall_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_sendall(::Command_SockSendall* sock_sendall) {
  clear_cmd();
  if (sock_sendall) {
    set_has_sock_sendall();
    _impl_.cmd_.sock_sendall_ = sock_sendall;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_sendall)
}
inline ::Command_SockSendall* Command::_internal_mutable_sock_sendall() {
  if (!_internal_has_sock_sendall()) {
    clear_cmd();
    set_has_sock_sendall();
    _impl_.cmd_.sock_sendall_ = CreateMaybeMessage< ::Command_SockSendall >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_sendall_;
}
inline ::Command_SockSendall* Command::mutable_sock_sendall() {
  ::Command_SockSendall* _msg = _internal_mutable_sock_sendall();
  // @@protoc_insertion_point(field_mutable:Command.sock_sendall)
  return _msg;
}

// .Command.SockSendmsg sock_sendmsg = 34;
inline bool Command::_internal_has_sock_sendmsg() const {
  return cmd_case() == kSockSendmsg;
}
inline bool Command::has_sock_sendmsg() const {
  return _internal_has_sock_sendmsg();
}
inline void Command::set_has_sock_sendmsg() {
  _impl_._oneof_case_[0] = kSockSendmsg;
}
inline void Command::clear_sock_sendmsg() {
  if (_internal_has_sock_sendmsg()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_sendmsg_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockSendmsg* Command::release_sock_sendmsg() {
  // @@protoc_insertion_point(field_release:Command.sock_sendmsg)
  if (_internal_has_sock_sendmsg()) {
    clear_has_cmd();
    ::Command_SockSendmsg* temp = _impl_.cmd_.sock_sendmsg_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_sendmsg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockSendmsg& Command::_internal_sock_sendmsg() const {
  return _internal_has_sock_sendmsg()
      ? *_impl_.cmd_.sock_sendmsg_
      : reinterpret_cast< ::Command_SockSendmsg&>(::_Command_SockSendmsg_default_instance_);
}
inline const ::Command_SockSendmsg& Command::sock_sendmsg() const {
  // @@protoc_insertion_point(field_get:Command.sock_sendmsg)
  return _internal_sock_sendmsg();
}
inline ::Command_SockSendmsg* Command::unsafe_arena_release_sock_sendmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_sendmsg)
  if (_internal_has_sock_sendmsg()) {
    clear_has_cmd();
    ::Command_SockSendmsg* temp = _impl_.cmd_.sock_sendmsg_;
    _impl_.cmd_.sock_sendmsg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_sendmsg(::Command_SockSendmsg* sock_sendmsg) {
  clear_cmd();
  if (sock_sendmsg) {
    set_has_sock_sendmsg();
    _impl_.cmd_.sock_sendmsg_ = sock_sendmsg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_sendmsg)
}
inline ::Command_SockSendmsg* Command::_internal_mutable_sock_sendmsg() {
  if (!_internal_has_sock_sendmsg()) {
    clear_cmd();
    set_has_sock_sendmsg();
    _impl_.cmd_.sock_sendmsg_ = CreateMaybeMessage< ::Command_SockSendmsg >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_sendmsg_;
}
inline ::Command_SockSendmsg* Command::mutable_sock_sendmsg() {
  ::Command_SockSendmsg* _msg = _internal_mutable_sock_sendmsg();
  // @@protoc_insertion_point(field_mutable:Command.sock_sendmsg)
  return _msg;
}

// .Command.SockRecv sock_recv = 35;
inline bool Command::_internal_has_sock_recv() const {
  return cmd_case() == kSockRecv;
}
inline bool Command::has_sock_recv() const {
  return _internal_has_sock_recv();
}
inline void Command::set_has_sock_recv() {
  _impl_._oneof_case_[0] = kSockRecv;
}
inline void Command::clear_sock_recv() {
  if (_internal_has_sock_recv()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_recv_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockRecv* Command::release_sock_recv() {
  // @@protoc_insertion_point(field_release:Command.sock_recv)
  if (_internal_has_sock_recv()) {
    clear_has_cmd();
    ::Command_SockRecv* temp = _impl_.cmd_.sock_recv_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_recv_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockRecv& Command::_internal_sock_recv() const {
  return _internal_has_sock_recv()
      ? *_impl_.cmd_.sock_recv_
      : reinterpret_cast< ::Command_SockRecv&>(::_Command_SockRecv_default_instance_);
}
inline const ::Command_SockRecv& Command::sock_recv() const {
  // @@protoc_insertion_point(field_get:Command.sock_recv)
  return _internal_sock_recv();
}
inline ::Command_SockRecv* Command::unsafe_arena_release_sock_recv() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_recv)
  if (_internal_has_sock_recv()) {
    clear_has_cmd();
    ::Command_SockRecv* temp = _impl_.cmd_.sock_recv_;
    _impl_.cmd_.sock_recv_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_recv(::Command_SockRecv* sock_recv) {
  clear_cmd();
  if (sock_recv) {
    set_has_sock_recv();
    _impl_.cmd_.sock_recv_ = sock_recv;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_recv)
}
inline ::Command_SockRecv* Command::_internal_mutable_sock_recv() {
  if (!_internal_has_sock_recv()) {
    clear_cmd();
    set_has_sock_recv();
    _impl_.cmd_.sock_recv_ = CreateMaybeMessage< ::Command_SockRecv >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_recv_;
}
inline ::Command_SockRecv* Command::mutable_sock_recv() {
  ::Command_SockRecv* _msg = _internal_mutable_sock_recv();
  // @@protoc_insertion_point(field_mutable:Command.sock_recv)
  return _msg;
}

// .Command.SockRecvfrom sock_recvfrom = 36;
inline bool Command::_internal_has_sock_recvfrom() const {
  return cmd_case() == kSockRecvfrom;
}
inline bool Command::has_sock_recvfrom() const {
  return _internal_has_sock_recvfrom();
}
inline void Command::set_has_sock_recvfrom() {
  _impl_._oneof_case_[0] = kSockRecvfrom;
}
inline void Command::clear_sock_recvfrom() {
  if (_internal_has_sock_recvfrom()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_recvfrom_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockRecvfrom* Command::release_sock_recvfrom() {
  // @@protoc_insertion_point(field_release:Command.sock_recvfrom)
  if (_internal_has_sock_recvfrom()) {
    clear_has_cmd();
    ::Command_SockRecvfrom* temp = _impl_.cmd_.sock_recvfrom_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_recvfrom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockRecvfrom& Command::_internal_sock_recvfrom() const {
  return _internal_has_sock_recvfrom()
      ? *_impl_.cmd_.sock_recvfrom_
      : reinterpret_cast< ::Command_SockRecvfrom&>(::_Command_SockRecvfrom_default_instance_);
}
inline const ::Command_SockRecvfrom& Command::sock_recvfrom() const {
  // @@protoc_insertion_point(field_get:Command.sock_recvfrom)
  return _internal_sock_recvfrom();
}
inline ::Command_SockRecvfrom* Command::unsafe_arena_release_sock_recvfrom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_recvfrom)
  if (_internal_has_sock_recvfrom()) {
    clear_has_cmd();
    ::Command_SockRecvfrom* temp = _impl_.cmd_.sock_recvfrom_;
    _impl_.cmd_.sock_recvfrom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_recvfrom(::Command_SockRecvfrom* sock_recvfrom) {
  clear_cmd();
  if (sock_recvfrom) {
    set_has_sock_recvfrom();
    _impl_.cmd_.sock_recvfrom_ = sock_recvfrom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_recvfrom)
}
inline ::Command_SockRecvfrom* Command::_internal_mutable_sock_recvfrom() {
  if (!_internal_has_sock_recvfrom()) {
    clear_cmd();
    set_has_sock_recvfrom();
    _impl_.cmd_.sock_recvfrom_ = CreateMaybeMessage< ::Command_SockRecvfrom >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_recvfrom_;
}
inline ::Command_SockRecvfrom* Command::mutable_sock_recvfrom() {
  ::Command_SockRecvfrom* _msg = _internal_mutable_sock_recvfrom();
  // @@protoc_insertion_point(field_mutable:Command.sock_recvfrom)
  return _msg;
}

// .Command.SockRecvmsg sock_recvmsg = 37;
inline bool Command::_internal_has_sock_recvmsg() const {
  return cmd_case() == kSockRecvmsg;
}
inline bool Command::has_sock_recvmsg() const {
  return _internal_has_sock_recvmsg();
}
inline void Command::set_has_sock_recvmsg() {
  _impl_._oneof_case_[0] = kSockRecvmsg;
}
inline void Command::clear_sock_recvmsg() {
  if (_internal_has_sock_recvmsg()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_recvmsg_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockRecvmsg* Command::release_sock_recvmsg() {
  // @@protoc_insertion_point(field_release:Command.sock_recvmsg)
  if (_internal_has_sock_recvmsg()) {
    clear_has_cmd();
    ::Command_SockRecvmsg* temp = _impl_.cmd_.sock_recvmsg_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_recvmsg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockRecvmsg& Command::_internal_sock_recvmsg() const {
  return _internal_has_sock_recvmsg()
      ? *_impl_.cmd_.sock_recvmsg_
      : reinterpret_cast< ::Command_SockRecvmsg&>(::_Command_SockRecvmsg_default_instance_);
}
inline const ::Command_SockRecvmsg& Command::sock_recvmsg() const {
  // @@protoc_insertion_point(field_get:Command.sock_recvmsg)
  return _internal_sock_recvmsg();
}
inline ::Command_SockRecvmsg* Command::unsafe_arena_release_sock_recvmsg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_recvmsg)
  if (_internal_has_sock_recvmsg()) {
    clear_has_cmd();
    ::Command_SockRecvmsg* temp = _impl_.cmd_.sock_recvmsg_;
    _impl_.cmd_.sock_recvmsg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_recvmsg(::Command_SockRecvmsg* sock_recvmsg) {
  clear_cmd();
  if (sock_recvmsg) {
    set_has_sock_recvmsg();
    _impl_.cmd_.sock_recvmsg_ = sock_recvmsg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_recvmsg)
}
inline ::Command_SockRecvmsg* Command::_internal_mutable_sock_recvmsg() {
  if (!_internal_has_sock_recvmsg()) {
    clear_cmd();
    set_has_sock_recvmsg();
    _impl_.cmd_.sock_recvmsg_ = CreateMaybeMessage< ::Command_SockRecvmsg >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_recvmsg_;
}
inline ::Command_SockRecvmsg* Command::mutable_sock_recvmsg() {
  ::Command_SockRecvmsg* _msg = _internal_mutable_sock_recvmsg();
  // @@protoc_insertion_point(field_mutable:Command.sock_recvmsg)
  return _msg;
}

// .Command.SockRecvInto sock_recv_into = 38;
inline bool Command::_internal_has_sock_recv_into() const {
  return cmd_case() == kSockRecvInto;
}
inline bool Command::has_sock_recv_into() const {
  return _internal_has_sock_recv_into();
}
inline void Command::set_has_sock_recv_into() {
  _impl_._oneof_case_[0] = kSockRecvInto;
}
inline void Command::clear_sock_recv_into() {
  if (_internal_has_sock_recv_into()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_recv_into_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockRecvInto* Command::release_sock_recv_into() {
  // @@protoc_insertion_point(field_release:Command.sock_recv_into)
  if (_internal_has_sock_recv_into()) {
    clear_has_cmd();
    ::Command_SockRecvInto* temp = _impl_.cmd_.sock_recv_into_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_recv_into_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockRecvInto& Command::_internal_sock_recv_into() const {
  return _internal_has_sock_recv_into()
      ? *_impl_.cmd_.sock_recv_into_
      : reinterpret_cast< ::Command_SockRecvInto&>(::_Command_SockRecvInto_default_instance_);
}
inline const ::Command_SockRecvInto& Command::sock_recv_into() const {
  // @@protoc_insertion_point(field_get:Command.sock_recv_into)
  return _internal_sock_recv_into();
}
inline ::Command_SockRecvInto* Command::unsafe_arena_release_sock_recv_into() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_recv_into)
  if (_internal_has_sock_recv_into()) {
    clear_has_cmd();
    ::Command_SockRecvInto* temp = _impl_.cmd_.sock_recv_into_;
    _impl_.cmd_.sock_recv_into_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_recv_into(::Command_SockRecvInto* sock_recv_into) {
  clear_cmd();
  if (sock_recv_into) {
    set_has_sock_recv_into();
    _impl_.cmd_.sock_recv_into_ = sock_recv_into;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_recv_into)
}
inline ::Command_SockRecvInto* Command::_internal_mutable_sock_recv_into() {
  if (!_internal_has_sock_recv_into()) {
    clear_cmd();
    set_has_sock_recv_into();
    _impl_.cmd_.sock_recv_into_ = CreateMaybeMessage< ::Command_SockRecvInto >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_recv_into_;
}
inline ::Command_SockRecvInto* Command::mutable_sock_recv_into() {
  ::Command_SockRecvInto* _msg = _internal_mutable_sock_recv_into();
  // @@protoc_insertion_point(field_mutable:Command.sock_recv_into)
  return _msg;
}

// .Command.SockRecvfromInto sock_recvfrom_into = 39;
inline bool Command::_internal_has_sock_recvfrom_into() const {
  return cmd_case() == kSockRecvfromInto;
}
inline bool Command::has_sock_recvfrom_into() const {
  return _internal_has_sock_recvfrom_into();
}
inline void Command::set_has_sock_recvfrom_into() {
  _impl_._oneof_case_[0] = kSockRecvfromInto;
}
inline void Command::clear_sock_recvfrom_into() {
  if (_internal_has_sock_recvfrom_into()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_recvfrom_into_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockRecvfromInto* Command::release_sock_recvfrom_into() {
  // @@protoc_insertion_point(field_release:Command.sock_recvfrom_into)
  if (_internal_has_sock_recvfrom_into()) {
    clear_has_cmd();
    ::Command_SockRecvfromInto* temp = _impl_.cmd_.sock_recvfrom_into_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_recvfrom_into_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockRecvfromInto& Command::_internal_sock_recvfrom_into() const {
  return _internal_has_sock_recvfrom_into()
      ? *_impl_.cmd_.sock_recvfrom_into_
      : reinterpret_cast< ::Command_SockRecvfromInto&>(::_Command_SockRecvfromInto_default_instance_);
}
inline const ::Command_SockRecvfromInto& Command::sock_recvfrom_into() const {
  // @@protoc_insertion_point(field_get:Command.sock_recvfrom_into)
  return _internal_sock_recvfrom_into();
}
inline ::Command_SockRecvfromInto* Command::unsafe_arena_release_sock_recvfrom_into() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_recvfrom_into)
  if (_internal_has_sock_recvfrom_into()) {
    clear_has_cmd();
    ::Command_SockRecvfromInto* temp = _impl_.cmd_.sock_recvfrom_into_;
    _impl_.cmd_.sock_recvfrom_into_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_recvfrom_into(::Command_SockRecvfromInto* sock_recvfrom_into) {
  clear_cmd();
  if (sock_recvfrom_into) {
    set_has_sock_recvfrom_into();
    _impl_.cmd_.sock_recvfrom_into_ = sock_recvfrom_into;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_recvfrom_into)
}
inline ::Command_SockRecvfromInto* Command::_internal_mutable_sock_recvfrom_into() {
  if (!_internal_has_sock_recvfrom_into()) {
    clear_cmd();
    set_has_sock_recvfrom_into();
    _impl_.cmd_.sock_recvfrom_into_ = CreateMaybeMessage< ::Command_SockRecvfromInto >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_recvfrom_into_;
}
inline ::Command_SockRecvfromInto* Command::mutable_sock_recvfrom_into() {
  ::Command_SockRecvfromInto* _msg = _internal_mutable_sock_recvfrom_into();
  // @@protoc_insertion_point(field_mutable:Command.sock_recvfrom_into)
  return _msg;
}

// .Command.SockRecvmsgInto sock_recvmsg_into = 40;
inline bool Command::_internal_has_sock_recvmsg_into() const {
  return cmd_case() == kSockRecvmsgInto;
}
inline bool Command::has_sock_recvmsg_into() const {
  return _internal_has_sock_recvmsg_into();
}
inline void Command::set_has_sock_recvmsg_into() {
  _impl_._oneof_case_[0] = kSockRecvmsgInto;
}
inline void Command::clear_sock_recvmsg_into() {
  if (_internal_has_sock_recvmsg_into()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_recvmsg_into_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockRecvmsgInto* Command::release_sock_recvmsg_into() {
  // @@protoc_insertion_point(field_release:Command.sock_recvmsg_into)
  if (_internal_has_sock_recvmsg_into()) {
    clear_has_cmd();
    ::Command_SockRecvmsgInto* temp = _impl_.cmd_.sock_recvmsg_into_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_recvmsg_into_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockRecvmsgInto& Command::_internal_sock_recvmsg_into() const {
  return _internal_has_sock_recvmsg_into()
      ? *_impl_.cmd_.sock_recvmsg_into_
      : reinterpret_cast< ::Command_SockRecvmsgInto&>(::_Command_SockRecvmsgInto_default_instance_);
}
inline const ::Command_SockRecvmsgInto& Command::sock_recvmsg_into() const {
  // @@protoc_insertion_point(field_get:Command.sock_recvmsg_into)
  return _internal_sock_recvmsg_into();
}
inline ::Command_SockRecvmsgInto* Command::unsafe_arena_release_sock_recvmsg_into() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_recvmsg_into)
  if (_internal_has_sock_recvmsg_into()) {
    clear_has_cmd();
    ::Command_SockRecvmsgInto* temp = _impl_.cmd_.sock_recvmsg_into_;
    _impl_.cmd_.sock_recvmsg_into_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_recvmsg_into(::Command_SockRecvmsgInto* sock_recvmsg_into) {
  clear_cmd();
  if (sock_recvmsg_into) {
    set_has_sock_recvmsg_into();
    _impl_.cmd_.sock_recvmsg_into_ = sock_recvmsg_into;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_recvmsg_into)
}
inline ::Command_SockRecvmsgInto* Command::_internal_mutable_sock_recvmsg_into() {
  if (!_internal_has_sock_recvmsg_into()) {
    clear_cmd();
    set_has_sock_recvmsg_into();
    _impl_.cmd_.sock_recvmsg_into_ = CreateMaybeMessage< ::Command_SockRecvmsgInto >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_recvmsg_into_;
}
inline ::Command_SockRecvmsgInto* Command::mutable_sock_recvmsg_into() {
  ::Command_SockRecvmsgInto* _msg = _internal_mutable_sock_recvmsg_into();
  // @@protoc_insertion_point(field_mutable:Command.sock_recvmsg_into)
  return _msg;
}

// .Command.SockSettimeout sock_settimeout = 41;
inline bool Command::_internal_has_sock_settimeout() const {
  return cmd_case() == kSockSettimeout;
}
inline bool Command::has_sock_settimeout() const {
  return _internal_has_sock_settimeout();
}
inline void Command::set_has_sock_settimeout() {
  _impl_._oneof_case_[0] = kSockSettimeout;
}
inline void Command::clear_sock_settimeout() {
  if (_internal_has_sock_settimeout()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_settimeout_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockSettimeout* Command::release_sock_settimeout() {
  // @@protoc_insertion_point(field_release:Command.sock_settimeout)
  if (_internal_has_sock_settimeout()) {
    clear_has_cmd();
    ::Command_SockSettimeout* temp = _impl_.cmd_.sock_settimeout_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_settimeout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockSettimeout& Command::_internal_sock_settimeout() const {
  return _internal_has_sock_settimeout()
      ? *_impl_.cmd_.sock_settimeout_
      : reinterpret_cast< ::Command_SockSettimeout&>(::_Command_SockSettimeout_default_instance_);
}
inline const ::Command_SockSettimeout& Command::sock_settimeout() const {
  // @@protoc_insertion_point(field_get:Command.sock_settimeout)
  return _internal_sock_settimeout();
}
inline ::Command_SockSettimeout* Command::unsafe_arena_release_sock_settimeout() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_settimeout)
  if (_internal_has_sock_settimeout()) {
    clear_has_cmd();
    ::Command_SockSettimeout* temp = _impl_.cmd_.sock_settimeout_;
    _impl_.cmd_.sock_settimeout_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_settimeout(::Command_SockSettimeout* sock_settimeout) {
  clear_cmd();
  if (sock_settimeout) {
    set_has_sock_settimeout();
    _impl_.cmd_.sock_settimeout_ = sock_settimeout;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_settimeout)
}
inline ::Command_SockSettimeout* Command::_internal_mutable_sock_settimeout() {
  if (!_internal_has_sock_settimeout()) {
    clear_cmd();
    set_has_sock_settimeout();
    _impl_.cmd_.sock_settimeout_ = CreateMaybeMessage< ::Command_SockSettimeout >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_settimeout_;
}
inline ::Command_SockSettimeout* Command::mutable_sock_settimeout() {
  ::Command_SockSettimeout* _msg = _internal_mutable_sock_settimeout();
  // @@protoc_insertion_point(field_mutable:Command.sock_settimeout)
  return _msg;
}

// .Command.SockSetblocking sock_setblocking = 42;
inline bool Command::_internal_has_sock_setblocking() const {
  return cmd_case() == kSockSetblocking;
}
inline bool Command::has_sock_setblocking() const {
  return _internal_has_sock_setblocking();
}
inline void Command::set_has_sock_setblocking() {
  _impl_._oneof_case_[0] = kSockSetblocking;
}
inline void Command::clear_sock_setblocking() {
  if (_internal_has_sock_setblocking()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.cmd_.sock_setblocking_;
    }
    clear_has_cmd();
  }
}
inline ::Command_SockSetblocking* Command::release_sock_setblocking() {
  // @@protoc_insertion_point(field_release:Command.sock_setblocking)
  if (_internal_has_sock_setblocking()) {
    clear_has_cmd();
    ::Command_SockSetblocking* temp = _impl_.cmd_.sock_setblocking_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.cmd_.sock_setblocking_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Command_SockSetblocking& Command::_internal_sock_setblocking() const {
  return _internal_has_sock_setblocking()
      ? *_impl_.cmd_.sock_setblocking_
      : reinterpret_cast< ::Command_SockSetblocking&>(::_Command_SockSetblocking_default_instance_);
}
inline const ::Command_SockSetblocking& Command::sock_setblocking() const {
  // @@protoc_insertion_point(field_get:Command.sock_setblocking)
  return _internal_sock_setblocking();
}
inline ::Command_SockSetblocking* Command::unsafe_arena_release_sock_setblocking() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Command.sock_setblocking)
  if (_internal_has_sock_setblocking()) {
    clear_has_cmd();
    ::Command_SockSetblocking* temp = _impl_.cmd_.sock_setblocking_;
    _impl_.cmd_.sock_setblocking_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Command::unsafe_arena_set_allocated_sock_setblocking(::Command_SockSetblocking* sock_setblocking) {
  clear_cmd();
  if (sock_setblocking) {
    set_has_sock_setblocking();
    _impl_.cmd_.sock_setblocking_ = sock_setblocking;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Command.sock_setblocking)
}
inline ::Command_SockSetblocking* Command::_internal_mutable_sock_setblocking() {
  if (!_internal_has_sock_setblocking()) {
    clear_cmd();
    set_has_sock_setblocking();
    _impl_.cmd_.sock_setblocking_ = CreateMaybeMessage< ::Command_SockSetblocking >(GetArenaForAllocation());
  }
  return _impl_.cmd_.sock_setblocking_;
}
inline ::Command_SockSetblocking* Command::mutable_sock_setblocking() {
  ::Command_SockSetblocking* _msg = _internal_mutable_sock_setblocking();
  // @@protoc_insertion_point(field_mutable:Command.sock_setblocking)
  return _msg;
}

inline bool Command::has_cmd() const {
  return cmd_case() != CMD_NOT_SET;
}
inline void Command::clear_has_cmd() {
  _impl_._oneof_case_[0] = CMD_NOT_SET;
}
inline Command::CmdCase Command::cmd_case() const {
  return Command::CmdCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Program

// .Header init = 1;
inline bool Program::_internal_has_init() const {
  return this != internal_default_instance() && _impl_.init_ != nullptr;
}
inline bool Program::has_init() const {
  return _internal_has_init();
}
inline void Program::clear_init() {
  if (GetArenaForAllocation() == nullptr && _impl_.init_ != nullptr) {
    delete _impl_.init_;
  }
  _impl_.init_ = nullptr;
}
inline const ::Header& Program::_internal_init() const {
  const ::Header* p = _impl_.init_;
  return p != nullptr ? *p : reinterpret_cast<const ::Header&>(
      ::_Header_default_instance_);
}
inline const ::Header& Program::init() const {
  // @@protoc_insertion_point(field_get:Program.init)
  return _internal_init();
}
inline void Program::unsafe_arena_set_allocated_init(
    ::Header* init) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.init_);
  }
  _impl_.init_ = init;
  if (init) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Program.init)
}
inline ::Header* Program::release_init() {
  
  ::Header* temp = _impl_.init_;
  _impl_.init_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Header* Program::unsafe_arena_release_init() {
  // @@protoc_insertion_point(field_release:Program.init)
  
  ::Header* temp = _impl_.init_;
  _impl_.init_ = nullptr;
  return temp;
}
inline ::Header* Program::_internal_mutable_init() {
  
  if (_impl_.init_ == nullptr) {
    auto* p = CreateMaybeMessage<::Header>(GetArenaForAllocation());
    _impl_.init_ = p;
  }
  return _impl_.init_;
}
inline ::Header* Program::mutable_init() {
  ::Header* _msg = _internal_mutable_init();
  // @@protoc_insertion_point(field_mutable:Program.init)
  return _msg;
}
inline void Program::set_allocated_init(::Header* init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.init_;
  }
  if (init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(init);
    if (message_arena != submessage_arena) {
      init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.init_ = init;
  // @@protoc_insertion_point(field_set_allocated:Program.init)
}

// repeated .Command cmds = 2;
inline int Program::_internal_cmds_size() const {
  return _impl_.cmds_.size();
}
inline int Program::cmds_size() const {
  return _internal_cmds_size();
}
inline void Program::clear_cmds() {
  _impl_.cmds_.Clear();
}
inline ::Command* Program::mutable_cmds(int index) {
  // @@protoc_insertion_point(field_mutable:Program.cmds)
  return _impl_.cmds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Command >*
Program::mutable_cmds() {
  // @@protoc_insertion_point(field_mutable_list:Program.cmds)
  return &_impl_.cmds_;
}
inline const ::Command& Program::_internal_cmds(int index) const {
  return _impl_.cmds_.Get(index);
}
inline const ::Command& Program::cmds(int index) const {
  // @@protoc_insertion_point(field_get:Program.cmds)
  return _internal_cmds(index);
}
inline ::Command* Program::_internal_add_cmds() {
  return _impl_.cmds_.Add();
}
inline ::Command* Program::add_cmds() {
  ::Command* _add = _internal_add_cmds();
  // @@protoc_insertion_point(field_add:Program.cmds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Command >&
Program::cmds() const {
  // @@protoc_insertion_point(field_list:Program.cmds)
  return _impl_.cmds_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_socket_5fapi_2eproto
