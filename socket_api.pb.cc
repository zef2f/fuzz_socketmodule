// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: socket_api.proto

#include "socket_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Header_SockInit::Header_SockInit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.preload_send_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.family_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Header_SockInitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Header_SockInitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Header_SockInitDefaultTypeInternal() {}
  union {
    Header_SockInit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Header_SockInitDefaultTypeInternal _Header_SockInit_default_instance_;
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.socks_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
PROTOBUF_CONSTEXPR Command_SockSocket::Command_SockSocket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.family_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.proto_)*/0u
  , /*decltype(_impl_.target_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockSocketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockSocketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockSocketDefaultTypeInternal() {}
  union {
    Command_SockSocket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockSocketDefaultTypeInternal _Command_SockSocket_default_instance_;
PROTOBUF_CONSTEXPR Command_SockSocketpair::Command_SockSocketpair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.family_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.proto_)*/0u
  , /*decltype(_impl_.id1_)*/0u
  , /*decltype(_impl_.id2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockSocketpairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockSocketpairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockSocketpairDefaultTypeInternal() {}
  union {
    Command_SockSocketpair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockSocketpairDefaultTypeInternal _Command_SockSocketpair_default_instance_;
PROTOBUF_CONSTEXPR Command_SockDup::Command_SockDup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_id_)*/0u
  , /*decltype(_impl_.dst_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockDupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockDupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockDupDefaultTypeInternal() {}
  union {
    Command_SockDup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockDupDefaultTypeInternal _Command_SockDup_default_instance_;
PROTOBUF_CONSTEXPR Command_SockClose::Command_SockClose(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockCloseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockCloseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockCloseDefaultTypeInternal() {}
  union {
    Command_SockClose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockCloseDefaultTypeInternal _Command_SockClose_default_instance_;
PROTOBUF_CONSTEXPR Command_InetPton::Command_InetPton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.family_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_InetPtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_InetPtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_InetPtonDefaultTypeInternal() {}
  union {
    Command_InetPton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_InetPtonDefaultTypeInternal _Command_InetPton_default_instance_;
PROTOBUF_CONSTEXPR Command_InetNtop::Command_InetNtop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packed_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.family_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_InetNtopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_InetNtopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_InetNtopDefaultTypeInternal() {}
  union {
    Command_InetNtop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_InetNtopDefaultTypeInternal _Command_InetNtop_default_instance_;
PROTOBUF_CONSTEXPR Command_InetAton::Command_InetAton(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_InetAtonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_InetAtonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_InetAtonDefaultTypeInternal() {}
  union {
    Command_InetAton _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_InetAtonDefaultTypeInternal _Command_InetAton_default_instance_;
PROTOBUF_CONSTEXPR Command_InetNtoa::Command_InetNtoa(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packed_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_InetNtoaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_InetNtoaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_InetNtoaDefaultTypeInternal() {}
  union {
    Command_InetNtoa _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_InetNtoaDefaultTypeInternal _Command_InetNtoa_default_instance_;
PROTOBUF_CONSTEXPR Command_Htons::Command_Htons(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.val_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_HtonsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_HtonsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_HtonsDefaultTypeInternal() {}
  union {
    Command_Htons _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_HtonsDefaultTypeInternal _Command_Htons_default_instance_;
PROTOBUF_CONSTEXPR Command_Htonl::Command_Htonl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.val_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_HtonlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_HtonlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_HtonlDefaultTypeInternal() {}
  union {
    Command_Htonl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_HtonlDefaultTypeInternal _Command_Htonl_default_instance_;
PROTOBUF_CONSTEXPR Command_Ntohs::Command_Ntohs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.val_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_NtohsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_NtohsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_NtohsDefaultTypeInternal() {}
  union {
    Command_Ntohs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_NtohsDefaultTypeInternal _Command_Ntohs_default_instance_;
PROTOBUF_CONSTEXPR Command_Ntohl::Command_Ntohl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.val_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_NtohlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_NtohlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_NtohlDefaultTypeInternal() {}
  union {
    Command_Ntohl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_NtohlDefaultTypeInternal _Command_Ntohl_default_instance_;
PROTOBUF_CONSTEXPR Command_Getaddrinfo::Command_Getaddrinfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.family_)*/0u
  , /*decltype(_impl_.type_)*/0u
  , /*decltype(_impl_.proto_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_GetaddrinfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_GetaddrinfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_GetaddrinfoDefaultTypeInternal() {}
  union {
    Command_Getaddrinfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_GetaddrinfoDefaultTypeInternal _Command_Getaddrinfo_default_instance_;
PROTOBUF_CONSTEXPR Command_Getnameinfo::Command_Getnameinfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sockaddr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_GetnameinfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_GetnameinfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_GetnameinfoDefaultTypeInternal() {}
  union {
    Command_Getnameinfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_GetnameinfoDefaultTypeInternal _Command_Getnameinfo_default_instance_;
PROTOBUF_CONSTEXPR Command_IfNameindex::Command_IfNameindex(
    ::_pbi::ConstantInitialized) {}
struct Command_IfNameindexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_IfNameindexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_IfNameindexDefaultTypeInternal() {}
  union {
    Command_IfNameindex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_IfNameindexDefaultTypeInternal _Command_IfNameindex_default_instance_;
PROTOBUF_CONSTEXPR Command_IfNametoindex::Command_IfNametoindex(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_IfNametoindexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_IfNametoindexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_IfNametoindexDefaultTypeInternal() {}
  union {
    Command_IfNametoindex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_IfNametoindexDefaultTypeInternal _Command_IfNametoindex_default_instance_;
PROTOBUF_CONSTEXPR Command_IfIndextoname::Command_IfIndextoname(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_IfIndextonameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_IfIndextonameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_IfIndextonameDefaultTypeInternal() {}
  union {
    Command_IfIndextoname _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_IfIndextonameDefaultTypeInternal _Command_IfIndextoname_default_instance_;
PROTOBUF_CONSTEXPR Command_Gethostbyname::Command_Gethostbyname(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_GethostbynameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_GethostbynameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_GethostbynameDefaultTypeInternal() {}
  union {
    Command_Gethostbyname _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_GethostbynameDefaultTypeInternal _Command_Gethostbyname_default_instance_;
PROTOBUF_CONSTEXPR Command_GethostbynameEx::Command_GethostbynameEx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_GethostbynameExDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_GethostbynameExDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_GethostbynameExDefaultTypeInternal() {}
  union {
    Command_GethostbynameEx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_GethostbynameExDefaultTypeInternal _Command_GethostbynameEx_default_instance_;
PROTOBUF_CONSTEXPR Command_Gethostbyaddr::Command_Gethostbyaddr(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_GethostbyaddrDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_GethostbyaddrDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_GethostbyaddrDefaultTypeInternal() {}
  union {
    Command_Gethostbyaddr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_GethostbyaddrDefaultTypeInternal _Command_Gethostbyaddr_default_instance_;
PROTOBUF_CONSTEXPR Command_Getservbyname::Command_Getservbyname(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proto_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_GetservbynameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_GetservbynameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_GetservbynameDefaultTypeInternal() {}
  union {
    Command_Getservbyname _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_GetservbynameDefaultTypeInternal _Command_Getservbyname_default_instance_;
PROTOBUF_CONSTEXPR Command_Getservbyport::Command_Getservbyport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proto_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_GetservbyportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_GetservbyportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_GetservbyportDefaultTypeInternal() {}
  union {
    Command_Getservbyport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_GetservbyportDefaultTypeInternal _Command_Getservbyport_default_instance_;
PROTOBUF_CONSTEXPR Command_SockAccept::Command_SockAccept(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.new_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockAcceptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockAcceptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockAcceptDefaultTypeInternal() {}
  union {
    Command_SockAccept _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockAcceptDefaultTypeInternal _Command_SockAccept_default_instance_;
PROTOBUF_CONSTEXPR Command_SockBind::Command_SockBind(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockBindDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockBindDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockBindDefaultTypeInternal() {}
  union {
    Command_SockBind _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockBindDefaultTypeInternal _Command_SockBind_default_instance_;
PROTOBUF_CONSTEXPR Command_SockListen::Command_SockListen(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.backlog_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockListenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockListenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockListenDefaultTypeInternal() {}
  union {
    Command_SockListen _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockListenDefaultTypeInternal _Command_SockListen_default_instance_;
PROTOBUF_CONSTEXPR Command_SockConnect::Command_SockConnect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockConnectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockConnectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockConnectDefaultTypeInternal() {}
  union {
    Command_SockConnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockConnectDefaultTypeInternal _Command_SockConnect_default_instance_;
PROTOBUF_CONSTEXPR Command_SockConnectEx::Command_SockConnectEx(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockConnectExDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockConnectExDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockConnectExDefaultTypeInternal() {}
  union {
    Command_SockConnectEx _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockConnectExDefaultTypeInternal _Command_SockConnectEx_default_instance_;
PROTOBUF_CONSTEXPR Command_SockShutdown::Command_SockShutdown(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.how_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockShutdownDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockShutdownDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockShutdownDefaultTypeInternal() {}
  union {
    Command_SockShutdown _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockShutdownDefaultTypeInternal _Command_SockShutdown_default_instance_;
PROTOBUF_CONSTEXPR Command_SockSetsockopt::Command_SockSetsockopt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.val_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.opt_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockSetsockoptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockSetsockoptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockSetsockoptDefaultTypeInternal() {}
  union {
    Command_SockSetsockopt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockSetsockoptDefaultTypeInternal _Command_SockSetsockopt_default_instance_;
PROTOBUF_CONSTEXPR Command_SockGetsockopt::Command_SockGetsockopt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.opt_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockGetsockoptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockGetsockoptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockGetsockoptDefaultTypeInternal() {}
  union {
    Command_SockGetsockopt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockGetsockoptDefaultTypeInternal _Command_SockGetsockopt_default_instance_;
PROTOBUF_CONSTEXPR Command_SockSend::Command_SockSend(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockSendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockSendDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockSendDefaultTypeInternal() {}
  union {
    Command_SockSend _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockSendDefaultTypeInternal _Command_SockSend_default_instance_;
PROTOBUF_CONSTEXPR Command_SockSendto::Command_SockSendto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockSendtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockSendtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockSendtoDefaultTypeInternal() {}
  union {
    Command_SockSendto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockSendtoDefaultTypeInternal _Command_SockSendto_default_instance_;
PROTOBUF_CONSTEXPR Command_SockSendall::Command_SockSendall(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockSendallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockSendallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockSendallDefaultTypeInternal() {}
  union {
    Command_SockSendall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockSendallDefaultTypeInternal _Command_SockSendall_default_instance_;
PROTOBUF_CONSTEXPR Command_SockSendmsg::Command_SockSendmsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockSendmsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockSendmsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockSendmsgDefaultTypeInternal() {}
  union {
    Command_SockSendmsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockSendmsgDefaultTypeInternal _Command_SockSendmsg_default_instance_;
PROTOBUF_CONSTEXPR Command_SockRecv::Command_SockRecv(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.maxlen_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockRecvDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockRecvDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockRecvDefaultTypeInternal() {}
  union {
    Command_SockRecv _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockRecvDefaultTypeInternal _Command_SockRecv_default_instance_;
PROTOBUF_CONSTEXPR Command_SockRecvfrom::Command_SockRecvfrom(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.maxlen_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockRecvfromDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockRecvfromDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockRecvfromDefaultTypeInternal() {}
  union {
    Command_SockRecvfrom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockRecvfromDefaultTypeInternal _Command_SockRecvfrom_default_instance_;
PROTOBUF_CONSTEXPR Command_SockRecvmsg::Command_SockRecvmsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.maxlen_)*/0u
  , /*decltype(_impl_.ancbufsize_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockRecvmsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockRecvmsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockRecvmsgDefaultTypeInternal() {}
  union {
    Command_SockRecvmsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockRecvmsgDefaultTypeInternal _Command_SockRecvmsg_default_instance_;
PROTOBUF_CONSTEXPR Command_SockRecvInto::Command_SockRecvInto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.nbytes_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockRecvIntoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockRecvIntoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockRecvIntoDefaultTypeInternal() {}
  union {
    Command_SockRecvInto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockRecvIntoDefaultTypeInternal _Command_SockRecvInto_default_instance_;
PROTOBUF_CONSTEXPR Command_SockRecvfromInto::Command_SockRecvfromInto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.nbytes_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockRecvfromIntoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockRecvfromIntoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockRecvfromIntoDefaultTypeInternal() {}
  union {
    Command_SockRecvfromInto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockRecvfromIntoDefaultTypeInternal _Command_SockRecvfromInto_default_instance_;
PROTOBUF_CONSTEXPR Command_SockRecvmsgInto::Command_SockRecvmsgInto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.nbytes_)*/0u
  , /*decltype(_impl_.ancbufsize_)*/0u
  , /*decltype(_impl_.flags_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockRecvmsgIntoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockRecvmsgIntoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockRecvmsgIntoDefaultTypeInternal() {}
  union {
    Command_SockRecvmsgInto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockRecvmsgIntoDefaultTypeInternal _Command_SockRecvmsgInto_default_instance_;
PROTOBUF_CONSTEXPR Command_SockSettimeout::Command_SockSettimeout(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timeout_)*/0
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockSettimeoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockSettimeoutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockSettimeoutDefaultTypeInternal() {}
  union {
    Command_SockSettimeout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockSettimeoutDefaultTypeInternal _Command_SockSettimeout_default_instance_;
PROTOBUF_CONSTEXPR Command_SockSetblocking::Command_SockSetblocking(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.blocking_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Command_SockSetblockingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Command_SockSetblockingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Command_SockSetblockingDefaultTypeInternal() {}
  union {
    Command_SockSetblocking _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Command_SockSetblockingDefaultTypeInternal _Command_SockSetblocking_default_instance_;
PROTOBUF_CONSTEXPR Command::Command(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cmd_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDefaultTypeInternal() {}
  union {
    Command _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDefaultTypeInternal _Command_default_instance_;
PROTOBUF_CONSTEXPR Program::Program(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cmds_)*/{}
  , /*decltype(_impl_.init_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProgramDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProgramDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProgramDefaultTypeInternal() {}
  union {
    Program _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProgramDefaultTypeInternal _Program_default_instance_;
static ::_pb::Metadata file_level_metadata_socket_5fapi_2eproto[46];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_socket_5fapi_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_socket_5fapi_2eproto = nullptr;

const uint32_t TableStruct_socket_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Header_SockInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Header_SockInit, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Header_SockInit, _impl_.family_),
  PROTOBUF_FIELD_OFFSET(::Header_SockInit, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::Header_SockInit, _impl_.preload_send_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Header, _impl_.socks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockSocket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockSocket, _impl_.family_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSocket, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSocket, _impl_.proto_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSocket, _impl_.target_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockSocketpair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockSocketpair, _impl_.family_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSocketpair, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSocketpair, _impl_.proto_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSocketpair, _impl_.id1_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSocketpair, _impl_.id2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockDup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockDup, _impl_.src_id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockDup, _impl_.dst_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockClose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockClose, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_InetPton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_InetPton, _impl_.family_),
  PROTOBUF_FIELD_OFFSET(::Command_InetPton, _impl_.text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_InetNtop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_InetNtop, _impl_.family_),
  PROTOBUF_FIELD_OFFSET(::Command_InetNtop, _impl_.packed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_InetAton, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_InetAton, _impl_.text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_InetNtoa, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_InetNtoa, _impl_.packed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Htons, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_Htons, _impl_.val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Htonl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_Htonl, _impl_.val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Ntohs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_Ntohs, _impl_.val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Ntohl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_Ntohl, _impl_.val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Getaddrinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_Getaddrinfo, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::Command_Getaddrinfo, _impl_.service_),
  PROTOBUF_FIELD_OFFSET(::Command_Getaddrinfo, _impl_.family_),
  PROTOBUF_FIELD_OFFSET(::Command_Getaddrinfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::Command_Getaddrinfo, _impl_.proto_),
  PROTOBUF_FIELD_OFFSET(::Command_Getaddrinfo, _impl_.flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Getnameinfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_Getnameinfo, _impl_.sockaddr_),
  PROTOBUF_FIELD_OFFSET(::Command_Getnameinfo, _impl_.flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_IfNameindex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_IfNametoindex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_IfNametoindex, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_IfIndextoname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_IfIndextoname, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Gethostbyname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_Gethostbyname, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_GethostbynameEx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_GethostbynameEx, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Gethostbyaddr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_Gethostbyaddr, _impl_.addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Getservbyname, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_Getservbyname, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Command_Getservbyname, _impl_.proto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_Getservbyport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_Getservbyport, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::Command_Getservbyport, _impl_.proto_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockAccept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockAccept, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockAccept, _impl_.new_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockBind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockBind, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockBind, _impl_.addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockListen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockListen, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockListen, _impl_.backlog_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockConnect, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockConnect, _impl_.addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockConnectEx, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockConnectEx, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockConnectEx, _impl_.addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockShutdown, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockShutdown, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockShutdown, _impl_.how_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockSetsockopt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockSetsockopt, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSetsockopt, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSetsockopt, _impl_.opt_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSetsockopt, _impl_.val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockGetsockopt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockGetsockopt, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockGetsockopt, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::Command_SockGetsockopt, _impl_.opt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockSend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockSend, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSend, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSend, _impl_.flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockSendto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockSendto, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSendto, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSendto, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSendto, _impl_.addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockSendall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockSendall, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSendall, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSendall, _impl_.flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockSendmsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockSendmsg, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSendmsg, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSendmsg, _impl_.flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockRecv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockRecv, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockRecv, _impl_.maxlen_),
  PROTOBUF_FIELD_OFFSET(::Command_SockRecv, _impl_.flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvfrom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvfrom, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvfrom, _impl_.maxlen_),
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvfrom, _impl_.flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvmsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvmsg, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvmsg, _impl_.maxlen_),
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvmsg, _impl_.ancbufsize_),
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvmsg, _impl_.flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvInto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvInto, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvInto, _impl_.nbytes_),
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvInto, _impl_.flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvfromInto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvfromInto, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvfromInto, _impl_.nbytes_),
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvfromInto, _impl_.flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvmsgInto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvmsgInto, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvmsgInto, _impl_.nbytes_),
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvmsgInto, _impl_.ancbufsize_),
  PROTOBUF_FIELD_OFFSET(::Command_SockRecvmsgInto, _impl_.flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockSettimeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockSettimeout, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSettimeout, _impl_.timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command_SockSetblocking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Command_SockSetblocking, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Command_SockSetblocking, _impl_.blocking_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Command, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Command, _impl_.cmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Program, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Program, _impl_.init_),
  PROTOBUF_FIELD_OFFSET(::Program, _impl_.cmds_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Header_SockInit)},
  { 10, -1, -1, sizeof(::Header)},
  { 17, -1, -1, sizeof(::Command_SockSocket)},
  { 27, -1, -1, sizeof(::Command_SockSocketpair)},
  { 38, -1, -1, sizeof(::Command_SockDup)},
  { 46, -1, -1, sizeof(::Command_SockClose)},
  { 53, -1, -1, sizeof(::Command_InetPton)},
  { 61, -1, -1, sizeof(::Command_InetNtop)},
  { 69, -1, -1, sizeof(::Command_InetAton)},
  { 76, -1, -1, sizeof(::Command_InetNtoa)},
  { 83, -1, -1, sizeof(::Command_Htons)},
  { 90, -1, -1, sizeof(::Command_Htonl)},
  { 97, -1, -1, sizeof(::Command_Ntohs)},
  { 104, -1, -1, sizeof(::Command_Ntohl)},
  { 111, -1, -1, sizeof(::Command_Getaddrinfo)},
  { 123, -1, -1, sizeof(::Command_Getnameinfo)},
  { 131, -1, -1, sizeof(::Command_IfNameindex)},
  { 137, -1, -1, sizeof(::Command_IfNametoindex)},
  { 144, -1, -1, sizeof(::Command_IfIndextoname)},
  { 151, -1, -1, sizeof(::Command_Gethostbyname)},
  { 158, -1, -1, sizeof(::Command_GethostbynameEx)},
  { 165, -1, -1, sizeof(::Command_Gethostbyaddr)},
  { 172, -1, -1, sizeof(::Command_Getservbyname)},
  { 180, -1, -1, sizeof(::Command_Getservbyport)},
  { 188, -1, -1, sizeof(::Command_SockAccept)},
  { 196, -1, -1, sizeof(::Command_SockBind)},
  { 204, -1, -1, sizeof(::Command_SockListen)},
  { 212, -1, -1, sizeof(::Command_SockConnect)},
  { 220, -1, -1, sizeof(::Command_SockConnectEx)},
  { 228, -1, -1, sizeof(::Command_SockShutdown)},
  { 236, -1, -1, sizeof(::Command_SockSetsockopt)},
  { 246, -1, -1, sizeof(::Command_SockGetsockopt)},
  { 255, -1, -1, sizeof(::Command_SockSend)},
  { 264, -1, -1, sizeof(::Command_SockSendto)},
  { 274, -1, -1, sizeof(::Command_SockSendall)},
  { 283, -1, -1, sizeof(::Command_SockSendmsg)},
  { 292, -1, -1, sizeof(::Command_SockRecv)},
  { 301, -1, -1, sizeof(::Command_SockRecvfrom)},
  { 310, -1, -1, sizeof(::Command_SockRecvmsg)},
  { 320, -1, -1, sizeof(::Command_SockRecvInto)},
  { 329, -1, -1, sizeof(::Command_SockRecvfromInto)},
  { 338, -1, -1, sizeof(::Command_SockRecvmsgInto)},
  { 348, -1, -1, sizeof(::Command_SockSettimeout)},
  { 356, -1, -1, sizeof(::Command_SockSetblocking)},
  { 364, -1, -1, sizeof(::Command)},
  { 413, -1, -1, sizeof(::Program)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Header_SockInit_default_instance_._instance,
  &::_Header_default_instance_._instance,
  &::_Command_SockSocket_default_instance_._instance,
  &::_Command_SockSocketpair_default_instance_._instance,
  &::_Command_SockDup_default_instance_._instance,
  &::_Command_SockClose_default_instance_._instance,
  &::_Command_InetPton_default_instance_._instance,
  &::_Command_InetNtop_default_instance_._instance,
  &::_Command_InetAton_default_instance_._instance,
  &::_Command_InetNtoa_default_instance_._instance,
  &::_Command_Htons_default_instance_._instance,
  &::_Command_Htonl_default_instance_._instance,
  &::_Command_Ntohs_default_instance_._instance,
  &::_Command_Ntohl_default_instance_._instance,
  &::_Command_Getaddrinfo_default_instance_._instance,
  &::_Command_Getnameinfo_default_instance_._instance,
  &::_Command_IfNameindex_default_instance_._instance,
  &::_Command_IfNametoindex_default_instance_._instance,
  &::_Command_IfIndextoname_default_instance_._instance,
  &::_Command_Gethostbyname_default_instance_._instance,
  &::_Command_GethostbynameEx_default_instance_._instance,
  &::_Command_Gethostbyaddr_default_instance_._instance,
  &::_Command_Getservbyname_default_instance_._instance,
  &::_Command_Getservbyport_default_instance_._instance,
  &::_Command_SockAccept_default_instance_._instance,
  &::_Command_SockBind_default_instance_._instance,
  &::_Command_SockListen_default_instance_._instance,
  &::_Command_SockConnect_default_instance_._instance,
  &::_Command_SockConnectEx_default_instance_._instance,
  &::_Command_SockShutdown_default_instance_._instance,
  &::_Command_SockSetsockopt_default_instance_._instance,
  &::_Command_SockGetsockopt_default_instance_._instance,
  &::_Command_SockSend_default_instance_._instance,
  &::_Command_SockSendto_default_instance_._instance,
  &::_Command_SockSendall_default_instance_._instance,
  &::_Command_SockSendmsg_default_instance_._instance,
  &::_Command_SockRecv_default_instance_._instance,
  &::_Command_SockRecvfrom_default_instance_._instance,
  &::_Command_SockRecvmsg_default_instance_._instance,
  &::_Command_SockRecvInto_default_instance_._instance,
  &::_Command_SockRecvfromInto_default_instance_._instance,
  &::_Command_SockRecvmsgInto_default_instance_._instance,
  &::_Command_SockSettimeout_default_instance_._instance,
  &::_Command_SockSetblocking_default_instance_._instance,
  &::_Command_default_instance_._instance,
  &::_Program_default_instance_._instance,
};

const char descriptor_table_protodef_socket_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020socket_api.proto\"u\n\006Header\022\037\n\005socks\030\001 "
  "\003(\0132\020.Header.SockInit\032J\n\010SockInit\022\n\n\002id\030"
  "\001 \001(\r\022\016\n\006family\030\002 \001(\r\022\014\n\004type\030\003 \001(\r\022\024\n\014p"
  "reload_send\030\004 \001(\014\"\305\036\n\007Command\022*\n\013sock_so"
  "cket\030\001 \001(\0132\023.Command.SockSocketH\000\0222\n\017soc"
  "k_socketpair\030\002 \001(\0132\027.Command.SockSocketp"
  "airH\000\022$\n\010sock_dup\030\003 \001(\0132\020.Command.SockDu"
  "pH\000\022(\n\nsock_close\030\004 \001(\0132\022.Command.SockCl"
  "oseH\000\022&\n\tinet_pton\030\005 \001(\0132\021.Command.InetP"
  "tonH\000\022&\n\tinet_ntop\030\006 \001(\0132\021.Command.InetN"
  "topH\000\022&\n\tinet_aton\030\007 \001(\0132\021.Command.InetA"
  "tonH\000\022&\n\tinet_ntoa\030\010 \001(\0132\021.Command.InetN"
  "toaH\000\022\037\n\005htons\030\t \001(\0132\016.Command.HtonsH\000\022\037"
  "\n\005htonl\030\n \001(\0132\016.Command.HtonlH\000\022\037\n\005ntohs"
  "\030\013 \001(\0132\016.Command.NtohsH\000\022\037\n\005ntohl\030\014 \001(\0132"
  "\016.Command.NtohlH\000\022+\n\013getaddrinfo\030\r \001(\0132\024"
  ".Command.GetaddrinfoH\000\022+\n\013getnameinfo\030\016 "
  "\001(\0132\024.Command.GetnameinfoH\000\022,\n\014if_namein"
  "dex\030\017 \001(\0132\024.Command.IfNameindexH\000\0220\n\016if_"
  "nametoindex\030\020 \001(\0132\026.Command.IfNametoinde"
  "xH\000\0220\n\016if_indextoname\030\021 \001(\0132\026.Command.If"
  "IndextonameH\000\022/\n\rgethostbyname\030\022 \001(\0132\026.C"
  "ommand.GethostbynameH\000\0224\n\020gethostbyname_"
  "ex\030\023 \001(\0132\030.Command.GethostbynameExH\000\022/\n\r"
  "gethostbyaddr\030\024 \001(\0132\026.Command.Gethostbya"
  "ddrH\000\022/\n\rgetservbyname\030\025 \001(\0132\026.Command.G"
  "etservbynameH\000\022/\n\rgetservbyport\030\026 \001(\0132\026."
  "Command.GetservbyportH\000\022*\n\013sock_accept\030\027"
  " \001(\0132\023.Command.SockAcceptH\000\022&\n\tsock_bind"
  "\030\030 \001(\0132\021.Command.SockBindH\000\022*\n\013sock_list"
  "en\030\031 \001(\0132\023.Command.SockListenH\000\022,\n\014sock_"
  "connect\030\032 \001(\0132\024.Command.SockConnectH\000\0221\n"
  "\017sock_connect_ex\030\033 \001(\0132\026.Command.SockCon"
  "nectExH\000\022.\n\rsock_shutdown\030\034 \001(\0132\025.Comman"
  "d.SockShutdownH\000\0222\n\017sock_setsockopt\030\035 \001("
  "\0132\027.Command.SockSetsockoptH\000\0222\n\017sock_get"
  "sockopt\030\036 \001(\0132\027.Command.SockGetsockoptH\000"
  "\022&\n\tsock_send\030\037 \001(\0132\021.Command.SockSendH\000"
  "\022*\n\013sock_sendto\030  \001(\0132\023.Command.SockSend"
  "toH\000\022,\n\014sock_sendall\030! \001(\0132\024.Command.Soc"
  "kSendallH\000\022,\n\014sock_sendmsg\030\" \001(\0132\024.Comma"
  "nd.SockSendmsgH\000\022&\n\tsock_recv\030# \001(\0132\021.Co"
  "mmand.SockRecvH\000\022.\n\rsock_recvfrom\030$ \001(\0132"
  "\025.Command.SockRecvfromH\000\022,\n\014sock_recvmsg"
  "\030% \001(\0132\024.Command.SockRecvmsgH\000\022/\n\016sock_r"
  "ecv_into\030& \001(\0132\025.Command.SockRecvIntoH\000\022"
  "7\n\022sock_recvfrom_into\030\' \001(\0132\031.Command.So"
  "ckRecvfromIntoH\000\0225\n\021sock_recvmsg_into\030( "
  "\001(\0132\030.Command.SockRecvmsgIntoH\000\0222\n\017sock_"
  "settimeout\030) \001(\0132\027.Command.SockSettimeou"
  "tH\000\0224\n\020sock_setblocking\030* \001(\0132\030.Command."
  "SockSetblockingH\000\032L\n\nSockSocket\022\016\n\006famil"
  "y\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\r\n\005proto\030\003 \001(\r\022\021\n\t"
  "target_id\030\004 \001(\r\032W\n\016SockSocketpair\022\016\n\006fam"
  "ily\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\r\n\005proto\030\003 \001(\r\022\013"
  "\n\003id1\030\004 \001(\r\022\013\n\003id2\030\005 \001(\r\032)\n\007SockDup\022\016\n\006s"
  "rc_id\030\001 \001(\r\022\016\n\006dst_id\030\002 \001(\r\032\027\n\tSockClose"
  "\022\n\n\002id\030\001 \001(\r\032(\n\010InetPton\022\016\n\006family\030\001 \001(\r"
  "\022\014\n\004text\030\002 \001(\t\032*\n\010InetNtop\022\016\n\006family\030\001 \001"
  "(\r\022\016\n\006packed\030\002 \001(\014\032\030\n\010InetAton\022\014\n\004text\030\001"
  " \001(\t\032\032\n\010InetNtoa\022\016\n\006packed\030\001 \001(\014\032\024\n\005Hton"
  "s\022\013\n\003val\030\001 \001(\r\032\024\n\005Htonl\022\013\n\003val\030\001 \001(\r\032\024\n\005"
  "Ntohs\022\013\n\003val\030\001 \001(\r\032\024\n\005Ntohl\022\013\n\003val\030\001 \001(\r"
  "\032h\n\013Getaddrinfo\022\014\n\004host\030\001 \001(\t\022\017\n\007service"
  "\030\002 \001(\t\022\016\n\006family\030\003 \001(\r\022\014\n\004type\030\004 \001(\r\022\r\n\005"
  "proto\030\005 \001(\r\022\r\n\005flags\030\006 \001(\r\032.\n\013Getnameinf"
  "o\022\020\n\010sockaddr\030\001 \001(\014\022\r\n\005flags\030\002 \001(\r\032\r\n\013If"
  "Nameindex\032\035\n\rIfNametoindex\022\014\n\004name\030\001 \001(\t"
  "\032\036\n\rIfIndextoname\022\r\n\005index\030\001 \001(\r\032\035\n\rGeth"
  "ostbyname\022\014\n\004name\030\001 \001(\t\032\037\n\017Gethostbyname"
  "Ex\022\014\n\004name\030\001 \001(\t\032\035\n\rGethostbyaddr\022\014\n\004add"
  "r\030\001 \001(\t\032,\n\rGetservbyname\022\014\n\004name\030\001 \001(\t\022\r"
  "\n\005proto\030\002 \001(\t\032,\n\rGetservbyport\022\014\n\004port\030\001"
  " \001(\r\022\r\n\005proto\030\002 \001(\t\032(\n\nSockAccept\022\n\n\002id\030"
  "\001 \001(\r\022\016\n\006new_id\030\002 \001(\r\032$\n\010SockBind\022\n\n\002id\030"
  "\001 \001(\r\022\014\n\004addr\030\002 \001(\014\032)\n\nSockListen\022\n\n\002id\030"
  "\001 \001(\r\022\017\n\007backlog\030\002 \001(\r\032\'\n\013SockConnect\022\n\n"
  "\002id\030\001 \001(\r\022\014\n\004addr\030\002 \001(\014\032)\n\rSockConnectEx"
  "\022\n\n\002id\030\001 \001(\r\022\014\n\004addr\030\002 \001(\014\032\'\n\014SockShutdo"
  "wn\022\n\n\002id\030\001 \001(\r\022\013\n\003how\030\002 \001(\r\032E\n\016SockSetso"
  "ckopt\022\n\n\002id\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\022\013\n\003opt\030"
  "\003 \001(\r\022\013\n\003val\030\004 \001(\014\0328\n\016SockGetsockopt\022\n\n\002"
  "id\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\022\013\n\003opt\030\003 \001(\r\0323\n\010"
  "SockSend\022\n\n\002id\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\022\r\n\005fl"
  "ags\030\003 \001(\r\032C\n\nSockSendto\022\n\n\002id\030\001 \001(\r\022\014\n\004d"
  "ata\030\002 \001(\014\022\r\n\005flags\030\003 \001(\r\022\014\n\004addr\030\004 \001(\014\0326"
  "\n\013SockSendall\022\n\n\002id\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\022"
  "\r\n\005flags\030\003 \001(\r\0326\n\013SockSendmsg\022\n\n\002id\030\001 \001("
  "\r\022\014\n\004data\030\002 \001(\014\022\r\n\005flags\030\003 \001(\r\0325\n\010SockRe"
  "cv\022\n\n\002id\030\001 \001(\r\022\016\n\006maxlen\030\002 \001(\r\022\r\n\005flags\030"
  "\003 \001(\r\0329\n\014SockRecvfrom\022\n\n\002id\030\001 \001(\r\022\016\n\006max"
  "len\030\002 \001(\r\022\r\n\005flags\030\003 \001(\r\032L\n\013SockRecvmsg\022"
  "\n\n\002id\030\001 \001(\r\022\016\n\006maxlen\030\002 \001(\r\022\022\n\nancbufsiz"
  "e\030\003 \001(\r\022\r\n\005flags\030\004 \001(\r\0329\n\014SockRecvInto\022\n"
  "\n\002id\030\001 \001(\r\022\016\n\006nbytes\030\002 \001(\r\022\r\n\005flags\030\003 \001("
  "\r\032=\n\020SockRecvfromInto\022\n\n\002id\030\001 \001(\r\022\016\n\006nby"
  "tes\030\002 \001(\r\022\r\n\005flags\030\003 \001(\r\032P\n\017SockRecvmsgI"
  "nto\022\n\n\002id\030\001 \001(\r\022\016\n\006nbytes\030\002 \001(\r\022\022\n\nancbu"
  "fsize\030\003 \001(\r\022\r\n\005flags\030\004 \001(\r\032-\n\016SockSettim"
  "eout\022\n\n\002id\030\001 \001(\r\022\017\n\007timeout\030\002 \001(\001\032/\n\017Soc"
  "kSetblocking\022\n\n\002id\030\001 \001(\r\022\020\n\010blocking\030\002 \001"
  "(\010B\005\n\003cmd\"8\n\007Program\022\025\n\004init\030\001 \001(\0132\007.Hea"
  "der\022\026\n\004cmds\030\002 \003(\0132\010.Commandb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_socket_5fapi_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_socket_5fapi_2eproto = {
    false, false, 4115, descriptor_table_protodef_socket_5fapi_2eproto,
    "socket_api.proto",
    &descriptor_table_socket_5fapi_2eproto_once, nullptr, 0, 46,
    schemas, file_default_instances, TableStruct_socket_5fapi_2eproto::offsets,
    file_level_metadata_socket_5fapi_2eproto, file_level_enum_descriptors_socket_5fapi_2eproto,
    file_level_service_descriptors_socket_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_socket_5fapi_2eproto_getter() {
  return &descriptor_table_socket_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_socket_5fapi_2eproto(&descriptor_table_socket_5fapi_2eproto);

// ===================================================================

class Header_SockInit::_Internal {
 public:
};

Header_SockInit::Header_SockInit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Header.SockInit)
}
Header_SockInit::Header_SockInit(const Header_SockInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header_SockInit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.preload_send_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.family_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.preload_send_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preload_send_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_preload_send().empty()) {
    _this->_impl_.preload_send_.Set(from._internal_preload_send(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:Header.SockInit)
}

inline void Header_SockInit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.preload_send_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.family_){0u}
    , decltype(_impl_.type_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.preload_send_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preload_send_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Header_SockInit::~Header_SockInit() {
  // @@protoc_insertion_point(destructor:Header.SockInit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header_SockInit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.preload_send_.Destroy();
}

void Header_SockInit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header_SockInit::Clear() {
// @@protoc_insertion_point(message_clear_start:Header.SockInit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.preload_send_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header_SockInit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 family = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.family_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes preload_send = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_preload_send();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header_SockInit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Header.SockInit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 family = 2;
  if (this->_internal_family() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_family(), target);
  }

  // uint32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // bytes preload_send = 4;
  if (!this->_internal_preload_send().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_preload_send(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Header.SockInit)
  return target;
}

size_t Header_SockInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Header.SockInit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes preload_send = 4;
  if (!this->_internal_preload_send().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_preload_send());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 family = 2;
  if (this->_internal_family() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_family());
  }

  // uint32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header_SockInit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header_SockInit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header_SockInit::GetClassData() const { return &_class_data_; }


void Header_SockInit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header_SockInit*>(&to_msg);
  auto& from = static_cast<const Header_SockInit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Header.SockInit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_preload_send().empty()) {
    _this->_internal_set_preload_send(from._internal_preload_send());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_family() != 0) {
    _this->_internal_set_family(from._internal_family());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header_SockInit::CopyFrom(const Header_SockInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Header.SockInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header_SockInit::IsInitialized() const {
  return true;
}

void Header_SockInit::InternalSwap(Header_SockInit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preload_send_, lhs_arena,
      &other->_impl_.preload_send_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header_SockInit, _impl_.type_)
      + sizeof(Header_SockInit::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Header_SockInit, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header_SockInit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[0]);
}

// ===================================================================

class Header::_Internal {
 public:
};

Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.socks_){from._impl_.socks_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Header)
}

inline void Header::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.socks_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.socks_.~RepeatedPtrField();
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.socks_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Header.SockInit socks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_socks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Header.SockInit socks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_socks_size()); i < n; i++) {
    const auto& repfield = this->_internal_socks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Header.SockInit socks = 1;
  total_size += 1UL * this->_internal_socks_size();
  for (const auto& msg : this->_impl_.socks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }


void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Header)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.socks_.MergeFrom(from._impl_.socks_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.socks_.InternalSwap(&other->_impl_.socks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[1]);
}

// ===================================================================

class Command_SockSocket::_Internal {
 public:
};

Command_SockSocket::Command_SockSocket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockSocket)
}
Command_SockSocket::Command_SockSocket(const Command_SockSocket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockSocket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.family_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.proto_){}
    , decltype(_impl_.target_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.family_, &from._impl_.family_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_id_) -
    reinterpret_cast<char*>(&_impl_.family_)) + sizeof(_impl_.target_id_));
  // @@protoc_insertion_point(copy_constructor:Command.SockSocket)
}

inline void Command_SockSocket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.family_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.proto_){0u}
    , decltype(_impl_.target_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_SockSocket::~Command_SockSocket() {
  // @@protoc_insertion_point(destructor:Command.SockSocket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockSocket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_SockSocket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockSocket::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockSocket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.target_id_) -
      reinterpret_cast<char*>(&_impl_.family_)) + sizeof(_impl_.target_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockSocket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.family_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 proto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 target_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockSocket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockSocket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 family = 1;
  if (this->_internal_family() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_family(), target);
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 proto = 3;
  if (this->_internal_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_proto(), target);
  }

  // uint32 target_id = 4;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_target_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockSocket)
  return target;
}

size_t Command_SockSocket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockSocket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 family = 1;
  if (this->_internal_family() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_family());
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 proto = 3;
  if (this->_internal_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_proto());
  }

  // uint32 target_id = 4;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockSocket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockSocket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockSocket::GetClassData() const { return &_class_data_; }


void Command_SockSocket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockSocket*>(&to_msg);
  auto& from = static_cast<const Command_SockSocket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockSocket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_family() != 0) {
    _this->_internal_set_family(from._internal_family());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_proto() != 0) {
    _this->_internal_set_proto(from._internal_proto());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockSocket::CopyFrom(const Command_SockSocket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockSocket::IsInitialized() const {
  return true;
}

void Command_SockSocket::InternalSwap(Command_SockSocket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockSocket, _impl_.target_id_)
      + sizeof(Command_SockSocket::_impl_.target_id_)
      - PROTOBUF_FIELD_OFFSET(Command_SockSocket, _impl_.family_)>(
          reinterpret_cast<char*>(&_impl_.family_),
          reinterpret_cast<char*>(&other->_impl_.family_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockSocket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[2]);
}

// ===================================================================

class Command_SockSocketpair::_Internal {
 public:
};

Command_SockSocketpair::Command_SockSocketpair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockSocketpair)
}
Command_SockSocketpair::Command_SockSocketpair(const Command_SockSocketpair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockSocketpair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.family_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.proto_){}
    , decltype(_impl_.id1_){}
    , decltype(_impl_.id2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.family_, &from._impl_.family_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id2_) -
    reinterpret_cast<char*>(&_impl_.family_)) + sizeof(_impl_.id2_));
  // @@protoc_insertion_point(copy_constructor:Command.SockSocketpair)
}

inline void Command_SockSocketpair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.family_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.proto_){0u}
    , decltype(_impl_.id1_){0u}
    , decltype(_impl_.id2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_SockSocketpair::~Command_SockSocketpair() {
  // @@protoc_insertion_point(destructor:Command.SockSocketpair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockSocketpair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_SockSocketpair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockSocketpair::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockSocketpair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id2_) -
      reinterpret_cast<char*>(&_impl_.family_)) + sizeof(_impl_.id2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockSocketpair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.family_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 proto = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.id1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.id2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockSocketpair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockSocketpair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 family = 1;
  if (this->_internal_family() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_family(), target);
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 proto = 3;
  if (this->_internal_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_proto(), target);
  }

  // uint32 id1 = 4;
  if (this->_internal_id1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_id1(), target);
  }

  // uint32 id2 = 5;
  if (this->_internal_id2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_id2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockSocketpair)
  return target;
}

size_t Command_SockSocketpair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockSocketpair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 family = 1;
  if (this->_internal_family() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_family());
  }

  // uint32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 proto = 3;
  if (this->_internal_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_proto());
  }

  // uint32 id1 = 4;
  if (this->_internal_id1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id1());
  }

  // uint32 id2 = 5;
  if (this->_internal_id2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockSocketpair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockSocketpair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockSocketpair::GetClassData() const { return &_class_data_; }


void Command_SockSocketpair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockSocketpair*>(&to_msg);
  auto& from = static_cast<const Command_SockSocketpair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockSocketpair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_family() != 0) {
    _this->_internal_set_family(from._internal_family());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_proto() != 0) {
    _this->_internal_set_proto(from._internal_proto());
  }
  if (from._internal_id1() != 0) {
    _this->_internal_set_id1(from._internal_id1());
  }
  if (from._internal_id2() != 0) {
    _this->_internal_set_id2(from._internal_id2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockSocketpair::CopyFrom(const Command_SockSocketpair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockSocketpair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockSocketpair::IsInitialized() const {
  return true;
}

void Command_SockSocketpair::InternalSwap(Command_SockSocketpair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockSocketpair, _impl_.id2_)
      + sizeof(Command_SockSocketpair::_impl_.id2_)
      - PROTOBUF_FIELD_OFFSET(Command_SockSocketpair, _impl_.family_)>(
          reinterpret_cast<char*>(&_impl_.family_),
          reinterpret_cast<char*>(&other->_impl_.family_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockSocketpair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[3]);
}

// ===================================================================

class Command_SockDup::_Internal {
 public:
};

Command_SockDup::Command_SockDup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockDup)
}
Command_SockDup::Command_SockDup(const Command_SockDup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockDup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_id_){}
    , decltype(_impl_.dst_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.src_id_, &from._impl_.src_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dst_id_) -
    reinterpret_cast<char*>(&_impl_.src_id_)) + sizeof(_impl_.dst_id_));
  // @@protoc_insertion_point(copy_constructor:Command.SockDup)
}

inline void Command_SockDup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_id_){0u}
    , decltype(_impl_.dst_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_SockDup::~Command_SockDup() {
  // @@protoc_insertion_point(destructor:Command.SockDup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockDup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_SockDup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockDup::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockDup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.src_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dst_id_) -
      reinterpret_cast<char*>(&_impl_.src_id_)) + sizeof(_impl_.dst_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockDup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 src_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.src_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 dst_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.dst_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockDup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockDup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 src_id = 1;
  if (this->_internal_src_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_src_id(), target);
  }

  // uint32 dst_id = 2;
  if (this->_internal_dst_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dst_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockDup)
  return target;
}

size_t Command_SockDup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockDup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 src_id = 1;
  if (this->_internal_src_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_src_id());
  }

  // uint32 dst_id = 2;
  if (this->_internal_dst_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dst_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockDup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockDup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockDup::GetClassData() const { return &_class_data_; }


void Command_SockDup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockDup*>(&to_msg);
  auto& from = static_cast<const Command_SockDup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockDup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_src_id() != 0) {
    _this->_internal_set_src_id(from._internal_src_id());
  }
  if (from._internal_dst_id() != 0) {
    _this->_internal_set_dst_id(from._internal_dst_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockDup::CopyFrom(const Command_SockDup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockDup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockDup::IsInitialized() const {
  return true;
}

void Command_SockDup::InternalSwap(Command_SockDup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockDup, _impl_.dst_id_)
      + sizeof(Command_SockDup::_impl_.dst_id_)
      - PROTOBUF_FIELD_OFFSET(Command_SockDup, _impl_.src_id_)>(
          reinterpret_cast<char*>(&_impl_.src_id_),
          reinterpret_cast<char*>(&other->_impl_.src_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockDup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[4]);
}

// ===================================================================

class Command_SockClose::_Internal {
 public:
};

Command_SockClose::Command_SockClose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockClose)
}
Command_SockClose::Command_SockClose(const Command_SockClose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockClose* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:Command.SockClose)
}

inline void Command_SockClose::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_SockClose::~Command_SockClose() {
  // @@protoc_insertion_point(destructor:Command.SockClose)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockClose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_SockClose::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockClose::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockClose)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockClose::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockClose::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockClose)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockClose)
  return target;
}

size_t Command_SockClose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockClose)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockClose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockClose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockClose::GetClassData() const { return &_class_data_; }


void Command_SockClose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockClose*>(&to_msg);
  auto& from = static_cast<const Command_SockClose&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockClose)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockClose::CopyFrom(const Command_SockClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockClose::IsInitialized() const {
  return true;
}

void Command_SockClose::InternalSwap(Command_SockClose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockClose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[5]);
}

// ===================================================================

class Command_InetPton::_Internal {
 public:
};

Command_InetPton::Command_InetPton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.InetPton)
}
Command_InetPton::Command_InetPton(const Command_InetPton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_InetPton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.family_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.family_ = from._impl_.family_;
  // @@protoc_insertion_point(copy_constructor:Command.InetPton)
}

inline void Command_InetPton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.family_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_InetPton::~Command_InetPton() {
  // @@protoc_insertion_point(destructor:Command.InetPton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_InetPton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void Command_InetPton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_InetPton::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.InetPton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.family_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_InetPton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.family_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Command.InetPton.text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_InetPton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.InetPton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 family = 1;
  if (this->_internal_family() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_family(), target);
  }

  // string text = 2;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.InetPton.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.InetPton)
  return target;
}

size_t Command_InetPton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.InetPton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 2;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // uint32 family = 1;
  if (this->_internal_family() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_family());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_InetPton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_InetPton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_InetPton::GetClassData() const { return &_class_data_; }


void Command_InetPton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_InetPton*>(&to_msg);
  auto& from = static_cast<const Command_InetPton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.InetPton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_family() != 0) {
    _this->_internal_set_family(from._internal_family());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_InetPton::CopyFrom(const Command_InetPton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.InetPton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_InetPton::IsInitialized() const {
  return true;
}

void Command_InetPton::InternalSwap(Command_InetPton* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  swap(_impl_.family_, other->_impl_.family_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_InetPton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[6]);
}

// ===================================================================

class Command_InetNtop::_Internal {
 public:
};

Command_InetNtop::Command_InetNtop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.InetNtop)
}
Command_InetNtop::Command_InetNtop(const Command_InetNtop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_InetNtop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packed_){}
    , decltype(_impl_.family_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.packed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_packed().empty()) {
    _this->_impl_.packed_.Set(from._internal_packed(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.family_ = from._impl_.family_;
  // @@protoc_insertion_point(copy_constructor:Command.InetNtop)
}

inline void Command_InetNtop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packed_){}
    , decltype(_impl_.family_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.packed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_InetNtop::~Command_InetNtop() {
  // @@protoc_insertion_point(destructor:Command.InetNtop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_InetNtop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packed_.Destroy();
}

void Command_InetNtop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_InetNtop::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.InetNtop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.packed_.ClearToEmpty();
  _impl_.family_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_InetNtop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.family_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes packed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_packed();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_InetNtop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.InetNtop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 family = 1;
  if (this->_internal_family() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_family(), target);
  }

  // bytes packed = 2;
  if (!this->_internal_packed().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_packed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.InetNtop)
  return target;
}

size_t Command_InetNtop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.InetNtop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes packed = 2;
  if (!this->_internal_packed().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_packed());
  }

  // uint32 family = 1;
  if (this->_internal_family() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_family());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_InetNtop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_InetNtop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_InetNtop::GetClassData() const { return &_class_data_; }


void Command_InetNtop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_InetNtop*>(&to_msg);
  auto& from = static_cast<const Command_InetNtop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.InetNtop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_packed().empty()) {
    _this->_internal_set_packed(from._internal_packed());
  }
  if (from._internal_family() != 0) {
    _this->_internal_set_family(from._internal_family());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_InetNtop::CopyFrom(const Command_InetNtop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.InetNtop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_InetNtop::IsInitialized() const {
  return true;
}

void Command_InetNtop::InternalSwap(Command_InetNtop* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.packed_, lhs_arena,
      &other->_impl_.packed_, rhs_arena
  );
  swap(_impl_.family_, other->_impl_.family_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_InetNtop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[7]);
}

// ===================================================================

class Command_InetAton::_Internal {
 public:
};

Command_InetAton::Command_InetAton(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.InetAton)
}
Command_InetAton::Command_InetAton(const Command_InetAton& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_InetAton* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Command.InetAton)
}

inline void Command_InetAton::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_InetAton::~Command_InetAton() {
  // @@protoc_insertion_point(destructor:Command.InetAton)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_InetAton::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
}

void Command_InetAton::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_InetAton::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.InetAton)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_InetAton::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Command.InetAton.text"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_InetAton::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.InetAton)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.InetAton.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.InetAton)
  return target;
}

size_t Command_InetAton::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.InetAton)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_InetAton::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_InetAton::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_InetAton::GetClassData() const { return &_class_data_; }


void Command_InetAton::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_InetAton*>(&to_msg);
  auto& from = static_cast<const Command_InetAton&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.InetAton)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_InetAton::CopyFrom(const Command_InetAton& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.InetAton)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_InetAton::IsInitialized() const {
  return true;
}

void Command_InetAton::InternalSwap(Command_InetAton* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_InetAton::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[8]);
}

// ===================================================================

class Command_InetNtoa::_Internal {
 public:
};

Command_InetNtoa::Command_InetNtoa(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.InetNtoa)
}
Command_InetNtoa::Command_InetNtoa(const Command_InetNtoa& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_InetNtoa* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.packed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_packed().empty()) {
    _this->_impl_.packed_.Set(from._internal_packed(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Command.InetNtoa)
}

inline void Command_InetNtoa::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packed_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.packed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.packed_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_InetNtoa::~Command_InetNtoa() {
  // @@protoc_insertion_point(destructor:Command.InetNtoa)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_InetNtoa::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packed_.Destroy();
}

void Command_InetNtoa::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_InetNtoa::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.InetNtoa)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.packed_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_InetNtoa::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes packed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_packed();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_InetNtoa::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.InetNtoa)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes packed = 1;
  if (!this->_internal_packed().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_packed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.InetNtoa)
  return target;
}

size_t Command_InetNtoa::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.InetNtoa)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes packed = 1;
  if (!this->_internal_packed().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_packed());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_InetNtoa::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_InetNtoa::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_InetNtoa::GetClassData() const { return &_class_data_; }


void Command_InetNtoa::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_InetNtoa*>(&to_msg);
  auto& from = static_cast<const Command_InetNtoa&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.InetNtoa)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_packed().empty()) {
    _this->_internal_set_packed(from._internal_packed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_InetNtoa::CopyFrom(const Command_InetNtoa& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.InetNtoa)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_InetNtoa::IsInitialized() const {
  return true;
}

void Command_InetNtoa::InternalSwap(Command_InetNtoa* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.packed_, lhs_arena,
      &other->_impl_.packed_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_InetNtoa::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[9]);
}

// ===================================================================

class Command_Htons::_Internal {
 public:
};

Command_Htons::Command_Htons(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.Htons)
}
Command_Htons::Command_Htons(const Command_Htons& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_Htons* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.val_ = from._impl_.val_;
  // @@protoc_insertion_point(copy_constructor:Command.Htons)
}

inline void Command_Htons::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_Htons::~Command_Htons() {
  // @@protoc_insertion_point(destructor:Command.Htons)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_Htons::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_Htons::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_Htons::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.Htons)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.val_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_Htons::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_Htons::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.Htons)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 val = 1;
  if (this->_internal_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.Htons)
  return target;
}

size_t Command_Htons::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.Htons)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 val = 1;
  if (this->_internal_val() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_val());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Htons::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_Htons::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Htons::GetClassData() const { return &_class_data_; }


void Command_Htons::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_Htons*>(&to_msg);
  auto& from = static_cast<const Command_Htons&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.Htons)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_val() != 0) {
    _this->_internal_set_val(from._internal_val());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_Htons::CopyFrom(const Command_Htons& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.Htons)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_Htons::IsInitialized() const {
  return true;
}

void Command_Htons::InternalSwap(Command_Htons* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.val_, other->_impl_.val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_Htons::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[10]);
}

// ===================================================================

class Command_Htonl::_Internal {
 public:
};

Command_Htonl::Command_Htonl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.Htonl)
}
Command_Htonl::Command_Htonl(const Command_Htonl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_Htonl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.val_ = from._impl_.val_;
  // @@protoc_insertion_point(copy_constructor:Command.Htonl)
}

inline void Command_Htonl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_Htonl::~Command_Htonl() {
  // @@protoc_insertion_point(destructor:Command.Htonl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_Htonl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_Htonl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_Htonl::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.Htonl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.val_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_Htonl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_Htonl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.Htonl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 val = 1;
  if (this->_internal_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.Htonl)
  return target;
}

size_t Command_Htonl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.Htonl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 val = 1;
  if (this->_internal_val() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_val());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Htonl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_Htonl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Htonl::GetClassData() const { return &_class_data_; }


void Command_Htonl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_Htonl*>(&to_msg);
  auto& from = static_cast<const Command_Htonl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.Htonl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_val() != 0) {
    _this->_internal_set_val(from._internal_val());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_Htonl::CopyFrom(const Command_Htonl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.Htonl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_Htonl::IsInitialized() const {
  return true;
}

void Command_Htonl::InternalSwap(Command_Htonl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.val_, other->_impl_.val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_Htonl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[11]);
}

// ===================================================================

class Command_Ntohs::_Internal {
 public:
};

Command_Ntohs::Command_Ntohs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.Ntohs)
}
Command_Ntohs::Command_Ntohs(const Command_Ntohs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_Ntohs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.val_ = from._impl_.val_;
  // @@protoc_insertion_point(copy_constructor:Command.Ntohs)
}

inline void Command_Ntohs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_Ntohs::~Command_Ntohs() {
  // @@protoc_insertion_point(destructor:Command.Ntohs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_Ntohs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_Ntohs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_Ntohs::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.Ntohs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.val_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_Ntohs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_Ntohs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.Ntohs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 val = 1;
  if (this->_internal_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.Ntohs)
  return target;
}

size_t Command_Ntohs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.Ntohs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 val = 1;
  if (this->_internal_val() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_val());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Ntohs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_Ntohs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Ntohs::GetClassData() const { return &_class_data_; }


void Command_Ntohs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_Ntohs*>(&to_msg);
  auto& from = static_cast<const Command_Ntohs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.Ntohs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_val() != 0) {
    _this->_internal_set_val(from._internal_val());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_Ntohs::CopyFrom(const Command_Ntohs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.Ntohs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_Ntohs::IsInitialized() const {
  return true;
}

void Command_Ntohs::InternalSwap(Command_Ntohs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.val_, other->_impl_.val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_Ntohs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[12]);
}

// ===================================================================

class Command_Ntohl::_Internal {
 public:
};

Command_Ntohl::Command_Ntohl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.Ntohl)
}
Command_Ntohl::Command_Ntohl(const Command_Ntohl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_Ntohl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.val_ = from._impl_.val_;
  // @@protoc_insertion_point(copy_constructor:Command.Ntohl)
}

inline void Command_Ntohl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_Ntohl::~Command_Ntohl() {
  // @@protoc_insertion_point(destructor:Command.Ntohl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_Ntohl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_Ntohl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_Ntohl::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.Ntohl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.val_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_Ntohl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_Ntohl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.Ntohl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 val = 1;
  if (this->_internal_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.Ntohl)
  return target;
}

size_t Command_Ntohl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.Ntohl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 val = 1;
  if (this->_internal_val() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_val());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Ntohl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_Ntohl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Ntohl::GetClassData() const { return &_class_data_; }


void Command_Ntohl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_Ntohl*>(&to_msg);
  auto& from = static_cast<const Command_Ntohl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.Ntohl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_val() != 0) {
    _this->_internal_set_val(from._internal_val());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_Ntohl::CopyFrom(const Command_Ntohl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.Ntohl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_Ntohl::IsInitialized() const {
  return true;
}

void Command_Ntohl::InternalSwap(Command_Ntohl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.val_, other->_impl_.val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_Ntohl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[13]);
}

// ===================================================================

class Command_Getaddrinfo::_Internal {
 public:
};

Command_Getaddrinfo::Command_Getaddrinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.Getaddrinfo)
}
Command_Getaddrinfo::Command_Getaddrinfo(const Command_Getaddrinfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_Getaddrinfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.service_){}
    , decltype(_impl_.family_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.proto_){}
    , decltype(_impl_.flags_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service().empty()) {
    _this->_impl_.service_.Set(from._internal_service(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.family_, &from._impl_.family_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.family_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:Command.Getaddrinfo)
}

inline void Command_Getaddrinfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.host_){}
    , decltype(_impl_.service_){}
    , decltype(_impl_.family_){0u}
    , decltype(_impl_.type_){0u}
    , decltype(_impl_.proto_){0u}
    , decltype(_impl_.flags_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_Getaddrinfo::~Command_Getaddrinfo() {
  // @@protoc_insertion_point(destructor:Command.Getaddrinfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_Getaddrinfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.host_.Destroy();
  _impl_.service_.Destroy();
}

void Command_Getaddrinfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_Getaddrinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.Getaddrinfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.host_.ClearToEmpty();
  _impl_.service_.ClearToEmpty();
  ::memset(&_impl_.family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.family_)) + sizeof(_impl_.flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_Getaddrinfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Command.Getaddrinfo.host"));
        } else
          goto handle_unusual;
        continue;
      // string service = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_service();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Command.Getaddrinfo.service"));
        } else
          goto handle_unusual;
        continue;
      // uint32 family = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.family_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 proto = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_Getaddrinfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.Getaddrinfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.Getaddrinfo.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // string service = 2;
  if (!this->_internal_service().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.Getaddrinfo.service");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service(), target);
  }

  // uint32 family = 3;
  if (this->_internal_family() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_family(), target);
  }

  // uint32 type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_type(), target);
  }

  // uint32 proto = 5;
  if (this->_internal_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_proto(), target);
  }

  // uint32 flags = 6;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.Getaddrinfo)
  return target;
}

size_t Command_Getaddrinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.Getaddrinfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string service = 2;
  if (!this->_internal_service().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service());
  }

  // uint32 family = 3;
  if (this->_internal_family() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_family());
  }

  // uint32 type = 4;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  // uint32 proto = 5;
  if (this->_internal_proto() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_proto());
  }

  // uint32 flags = 6;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Getaddrinfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_Getaddrinfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Getaddrinfo::GetClassData() const { return &_class_data_; }


void Command_Getaddrinfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_Getaddrinfo*>(&to_msg);
  auto& from = static_cast<const Command_Getaddrinfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.Getaddrinfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (!from._internal_service().empty()) {
    _this->_internal_set_service(from._internal_service());
  }
  if (from._internal_family() != 0) {
    _this->_internal_set_family(from._internal_family());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_proto() != 0) {
    _this->_internal_set_proto(from._internal_proto());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_Getaddrinfo::CopyFrom(const Command_Getaddrinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.Getaddrinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_Getaddrinfo::IsInitialized() const {
  return true;
}

void Command_Getaddrinfo::InternalSwap(Command_Getaddrinfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_, lhs_arena,
      &other->_impl_.service_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_Getaddrinfo, _impl_.flags_)
      + sizeof(Command_Getaddrinfo::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(Command_Getaddrinfo, _impl_.family_)>(
          reinterpret_cast<char*>(&_impl_.family_),
          reinterpret_cast<char*>(&other->_impl_.family_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_Getaddrinfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[14]);
}

// ===================================================================

class Command_Getnameinfo::_Internal {
 public:
};

Command_Getnameinfo::Command_Getnameinfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.Getnameinfo)
}
Command_Getnameinfo::Command_Getnameinfo(const Command_Getnameinfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_Getnameinfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sockaddr_){}
    , decltype(_impl_.flags_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sockaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sockaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sockaddr().empty()) {
    _this->_impl_.sockaddr_.Set(from._internal_sockaddr(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.flags_ = from._impl_.flags_;
  // @@protoc_insertion_point(copy_constructor:Command.Getnameinfo)
}

inline void Command_Getnameinfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sockaddr_){}
    , decltype(_impl_.flags_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sockaddr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sockaddr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_Getnameinfo::~Command_Getnameinfo() {
  // @@protoc_insertion_point(destructor:Command.Getnameinfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_Getnameinfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sockaddr_.Destroy();
}

void Command_Getnameinfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_Getnameinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.Getnameinfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sockaddr_.ClearToEmpty();
  _impl_.flags_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_Getnameinfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes sockaddr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sockaddr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_Getnameinfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.Getnameinfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes sockaddr = 1;
  if (!this->_internal_sockaddr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_sockaddr(), target);
  }

  // uint32 flags = 2;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.Getnameinfo)
  return target;
}

size_t Command_Getnameinfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.Getnameinfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sockaddr = 1;
  if (!this->_internal_sockaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sockaddr());
  }

  // uint32 flags = 2;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Getnameinfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_Getnameinfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Getnameinfo::GetClassData() const { return &_class_data_; }


void Command_Getnameinfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_Getnameinfo*>(&to_msg);
  auto& from = static_cast<const Command_Getnameinfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.Getnameinfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sockaddr().empty()) {
    _this->_internal_set_sockaddr(from._internal_sockaddr());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_Getnameinfo::CopyFrom(const Command_Getnameinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.Getnameinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_Getnameinfo::IsInitialized() const {
  return true;
}

void Command_Getnameinfo::InternalSwap(Command_Getnameinfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sockaddr_, lhs_arena,
      &other->_impl_.sockaddr_, rhs_arena
  );
  swap(_impl_.flags_, other->_impl_.flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_Getnameinfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[15]);
}

// ===================================================================

class Command_IfNameindex::_Internal {
 public:
};

Command_IfNameindex::Command_IfNameindex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Command.IfNameindex)
}
Command_IfNameindex::Command_IfNameindex(const Command_IfNameindex& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Command_IfNameindex* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Command.IfNameindex)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_IfNameindex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_IfNameindex::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Command_IfNameindex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[16]);
}

// ===================================================================

class Command_IfNametoindex::_Internal {
 public:
};

Command_IfNametoindex::Command_IfNametoindex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.IfNametoindex)
}
Command_IfNametoindex::Command_IfNametoindex(const Command_IfNametoindex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_IfNametoindex* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Command.IfNametoindex)
}

inline void Command_IfNametoindex::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_IfNametoindex::~Command_IfNametoindex() {
  // @@protoc_insertion_point(destructor:Command.IfNametoindex)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_IfNametoindex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Command_IfNametoindex::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_IfNametoindex::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.IfNametoindex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_IfNametoindex::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Command.IfNametoindex.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_IfNametoindex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.IfNametoindex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.IfNametoindex.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.IfNametoindex)
  return target;
}

size_t Command_IfNametoindex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.IfNametoindex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_IfNametoindex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_IfNametoindex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_IfNametoindex::GetClassData() const { return &_class_data_; }


void Command_IfNametoindex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_IfNametoindex*>(&to_msg);
  auto& from = static_cast<const Command_IfNametoindex&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.IfNametoindex)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_IfNametoindex::CopyFrom(const Command_IfNametoindex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.IfNametoindex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_IfNametoindex::IsInitialized() const {
  return true;
}

void Command_IfNametoindex::InternalSwap(Command_IfNametoindex* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_IfNametoindex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[17]);
}

// ===================================================================

class Command_IfIndextoname::_Internal {
 public:
};

Command_IfIndextoname::Command_IfIndextoname(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.IfIndextoname)
}
Command_IfIndextoname::Command_IfIndextoname(const Command_IfIndextoname& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_IfIndextoname* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:Command.IfIndextoname)
}

inline void Command_IfIndextoname::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_IfIndextoname::~Command_IfIndextoname() {
  // @@protoc_insertion_point(destructor:Command.IfIndextoname)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_IfIndextoname::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_IfIndextoname::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_IfIndextoname::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.IfIndextoname)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_IfIndextoname::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_IfIndextoname::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.IfIndextoname)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.IfIndextoname)
  return target;
}

size_t Command_IfIndextoname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.IfIndextoname)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_IfIndextoname::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_IfIndextoname::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_IfIndextoname::GetClassData() const { return &_class_data_; }


void Command_IfIndextoname::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_IfIndextoname*>(&to_msg);
  auto& from = static_cast<const Command_IfIndextoname&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.IfIndextoname)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_IfIndextoname::CopyFrom(const Command_IfIndextoname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.IfIndextoname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_IfIndextoname::IsInitialized() const {
  return true;
}

void Command_IfIndextoname::InternalSwap(Command_IfIndextoname* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_IfIndextoname::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[18]);
}

// ===================================================================

class Command_Gethostbyname::_Internal {
 public:
};

Command_Gethostbyname::Command_Gethostbyname(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.Gethostbyname)
}
Command_Gethostbyname::Command_Gethostbyname(const Command_Gethostbyname& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_Gethostbyname* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Command.Gethostbyname)
}

inline void Command_Gethostbyname::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_Gethostbyname::~Command_Gethostbyname() {
  // @@protoc_insertion_point(destructor:Command.Gethostbyname)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_Gethostbyname::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Command_Gethostbyname::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_Gethostbyname::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.Gethostbyname)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_Gethostbyname::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Command.Gethostbyname.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_Gethostbyname::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.Gethostbyname)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.Gethostbyname.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.Gethostbyname)
  return target;
}

size_t Command_Gethostbyname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.Gethostbyname)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Gethostbyname::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_Gethostbyname::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Gethostbyname::GetClassData() const { return &_class_data_; }


void Command_Gethostbyname::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_Gethostbyname*>(&to_msg);
  auto& from = static_cast<const Command_Gethostbyname&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.Gethostbyname)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_Gethostbyname::CopyFrom(const Command_Gethostbyname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.Gethostbyname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_Gethostbyname::IsInitialized() const {
  return true;
}

void Command_Gethostbyname::InternalSwap(Command_Gethostbyname* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_Gethostbyname::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[19]);
}

// ===================================================================

class Command_GethostbynameEx::_Internal {
 public:
};

Command_GethostbynameEx::Command_GethostbynameEx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.GethostbynameEx)
}
Command_GethostbynameEx::Command_GethostbynameEx(const Command_GethostbynameEx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_GethostbynameEx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Command.GethostbynameEx)
}

inline void Command_GethostbynameEx::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_GethostbynameEx::~Command_GethostbynameEx() {
  // @@protoc_insertion_point(destructor:Command.GethostbynameEx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_GethostbynameEx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Command_GethostbynameEx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_GethostbynameEx::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.GethostbynameEx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_GethostbynameEx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Command.GethostbynameEx.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_GethostbynameEx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.GethostbynameEx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.GethostbynameEx.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.GethostbynameEx)
  return target;
}

size_t Command_GethostbynameEx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.GethostbynameEx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_GethostbynameEx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_GethostbynameEx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_GethostbynameEx::GetClassData() const { return &_class_data_; }


void Command_GethostbynameEx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_GethostbynameEx*>(&to_msg);
  auto& from = static_cast<const Command_GethostbynameEx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.GethostbynameEx)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_GethostbynameEx::CopyFrom(const Command_GethostbynameEx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.GethostbynameEx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_GethostbynameEx::IsInitialized() const {
  return true;
}

void Command_GethostbynameEx::InternalSwap(Command_GethostbynameEx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_GethostbynameEx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[20]);
}

// ===================================================================

class Command_Gethostbyaddr::_Internal {
 public:
};

Command_Gethostbyaddr::Command_Gethostbyaddr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.Gethostbyaddr)
}
Command_Gethostbyaddr::Command_Gethostbyaddr(const Command_Gethostbyaddr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_Gethostbyaddr* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_addr().empty()) {
    _this->_impl_.addr_.Set(from._internal_addr(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Command.Gethostbyaddr)
}

inline void Command_Gethostbyaddr::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_Gethostbyaddr::~Command_Gethostbyaddr() {
  // @@protoc_insertion_point(destructor:Command.Gethostbyaddr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_Gethostbyaddr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.addr_.Destroy();
}

void Command_Gethostbyaddr::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_Gethostbyaddr::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.Gethostbyaddr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.addr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_Gethostbyaddr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Command.Gethostbyaddr.addr"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_Gethostbyaddr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.Gethostbyaddr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (!this->_internal_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.Gethostbyaddr.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.Gethostbyaddr)
  return target;
}

size_t Command_Gethostbyaddr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.Gethostbyaddr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 1;
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Gethostbyaddr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_Gethostbyaddr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Gethostbyaddr::GetClassData() const { return &_class_data_; }


void Command_Gethostbyaddr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_Gethostbyaddr*>(&to_msg);
  auto& from = static_cast<const Command_Gethostbyaddr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.Gethostbyaddr)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_addr().empty()) {
    _this->_internal_set_addr(from._internal_addr());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_Gethostbyaddr::CopyFrom(const Command_Gethostbyaddr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.Gethostbyaddr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_Gethostbyaddr::IsInitialized() const {
  return true;
}

void Command_Gethostbyaddr::InternalSwap(Command_Gethostbyaddr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.addr_, lhs_arena,
      &other->_impl_.addr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_Gethostbyaddr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[21]);
}

// ===================================================================

class Command_Getservbyname::_Internal {
 public:
};

Command_Getservbyname::Command_Getservbyname(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.Getservbyname)
}
Command_Getservbyname::Command_Getservbyname(const Command_Getservbyname& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_Getservbyname* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.proto_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.proto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proto().empty()) {
    _this->_impl_.proto_.Set(from._internal_proto(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Command.Getservbyname)
}

inline void Command_Getservbyname::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.proto_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_Getservbyname::~Command_Getservbyname() {
  // @@protoc_insertion_point(destructor:Command.Getservbyname)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_Getservbyname::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.proto_.Destroy();
}

void Command_Getservbyname::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_Getservbyname::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.Getservbyname)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.proto_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_Getservbyname::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Command.Getservbyname.name"));
        } else
          goto handle_unusual;
        continue;
      // string proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proto();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Command.Getservbyname.proto"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_Getservbyname::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.Getservbyname)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.Getservbyname.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string proto = 2;
  if (!this->_internal_proto().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proto().data(), static_cast<int>(this->_internal_proto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.Getservbyname.proto");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_proto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.Getservbyname)
  return target;
}

size_t Command_Getservbyname::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.Getservbyname)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string proto = 2;
  if (!this->_internal_proto().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proto());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Getservbyname::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_Getservbyname::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Getservbyname::GetClassData() const { return &_class_data_; }


void Command_Getservbyname::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_Getservbyname*>(&to_msg);
  auto& from = static_cast<const Command_Getservbyname&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.Getservbyname)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_proto().empty()) {
    _this->_internal_set_proto(from._internal_proto());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_Getservbyname::CopyFrom(const Command_Getservbyname& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.Getservbyname)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_Getservbyname::IsInitialized() const {
  return true;
}

void Command_Getservbyname::InternalSwap(Command_Getservbyname* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proto_, lhs_arena,
      &other->_impl_.proto_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_Getservbyname::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[22]);
}

// ===================================================================

class Command_Getservbyport::_Internal {
 public:
};

Command_Getservbyport::Command_Getservbyport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.Getservbyport)
}
Command_Getservbyport::Command_Getservbyport(const Command_Getservbyport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_Getservbyport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.proto_){}
    , decltype(_impl_.port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proto().empty()) {
    _this->_impl_.proto_.Set(from._internal_proto(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.port_ = from._impl_.port_;
  // @@protoc_insertion_point(copy_constructor:Command.Getservbyport)
}

inline void Command_Getservbyport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.proto_){}
    , decltype(_impl_.port_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.proto_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proto_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_Getservbyport::~Command_Getservbyport() {
  // @@protoc_insertion_point(destructor:Command.Getservbyport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_Getservbyport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proto_.Destroy();
}

void Command_Getservbyport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_Getservbyport::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.Getservbyport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proto_.ClearToEmpty();
  _impl_.port_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_Getservbyport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string proto = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proto();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Command.Getservbyport.proto"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_Getservbyport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.Getservbyport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_port(), target);
  }

  // string proto = 2;
  if (!this->_internal_proto().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proto().data(), static_cast<int>(this->_internal_proto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Command.Getservbyport.proto");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_proto(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.Getservbyport)
  return target;
}

size_t Command_Getservbyport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.Getservbyport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string proto = 2;
  if (!this->_internal_proto().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proto());
  }

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_Getservbyport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_Getservbyport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_Getservbyport::GetClassData() const { return &_class_data_; }


void Command_Getservbyport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_Getservbyport*>(&to_msg);
  auto& from = static_cast<const Command_Getservbyport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.Getservbyport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_proto().empty()) {
    _this->_internal_set_proto(from._internal_proto());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_Getservbyport::CopyFrom(const Command_Getservbyport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.Getservbyport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_Getservbyport::IsInitialized() const {
  return true;
}

void Command_Getservbyport::InternalSwap(Command_Getservbyport* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proto_, lhs_arena,
      &other->_impl_.proto_, rhs_arena
  );
  swap(_impl_.port_, other->_impl_.port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_Getservbyport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[23]);
}

// ===================================================================

class Command_SockAccept::_Internal {
 public:
};

Command_SockAccept::Command_SockAccept(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockAccept)
}
Command_SockAccept::Command_SockAccept(const Command_SockAccept& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockAccept* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.new_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_id_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.new_id_));
  // @@protoc_insertion_point(copy_constructor:Command.SockAccept)
}

inline void Command_SockAccept::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.new_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_SockAccept::~Command_SockAccept() {
  // @@protoc_insertion_point(destructor:Command.SockAccept)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockAccept::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_SockAccept::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockAccept::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockAccept)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.new_id_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.new_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockAccept::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 new_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.new_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockAccept::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockAccept)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 new_id = 2;
  if (this->_internal_new_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_new_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockAccept)
  return target;
}

size_t Command_SockAccept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockAccept)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 new_id = 2;
  if (this->_internal_new_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_new_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockAccept::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockAccept::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockAccept::GetClassData() const { return &_class_data_; }


void Command_SockAccept::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockAccept*>(&to_msg);
  auto& from = static_cast<const Command_SockAccept&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockAccept)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_new_id() != 0) {
    _this->_internal_set_new_id(from._internal_new_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockAccept::CopyFrom(const Command_SockAccept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockAccept::IsInitialized() const {
  return true;
}

void Command_SockAccept::InternalSwap(Command_SockAccept* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockAccept, _impl_.new_id_)
      + sizeof(Command_SockAccept::_impl_.new_id_)
      - PROTOBUF_FIELD_OFFSET(Command_SockAccept, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockAccept::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[24]);
}

// ===================================================================

class Command_SockBind::_Internal {
 public:
};

Command_SockBind::Command_SockBind(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockBind)
}
Command_SockBind::Command_SockBind(const Command_SockBind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockBind* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_addr().empty()) {
    _this->_impl_.addr_.Set(from._internal_addr(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:Command.SockBind)
}

inline void Command_SockBind::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_SockBind::~Command_SockBind() {
  // @@protoc_insertion_point(destructor:Command.SockBind)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockBind::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.addr_.Destroy();
}

void Command_SockBind::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockBind::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockBind)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.addr_.ClearToEmpty();
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockBind::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockBind::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockBind)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes addr = 2;
  if (!this->_internal_addr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockBind)
  return target;
}

size_t Command_SockBind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockBind)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes addr = 2;
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_addr());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockBind::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockBind::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockBind::GetClassData() const { return &_class_data_; }


void Command_SockBind::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockBind*>(&to_msg);
  auto& from = static_cast<const Command_SockBind&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockBind)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_addr().empty()) {
    _this->_internal_set_addr(from._internal_addr());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockBind::CopyFrom(const Command_SockBind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockBind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockBind::IsInitialized() const {
  return true;
}

void Command_SockBind::InternalSwap(Command_SockBind* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.addr_, lhs_arena,
      &other->_impl_.addr_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockBind::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[25]);
}

// ===================================================================

class Command_SockListen::_Internal {
 public:
};

Command_SockListen::Command_SockListen(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockListen)
}
Command_SockListen::Command_SockListen(const Command_SockListen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockListen* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.backlog_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.backlog_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.backlog_));
  // @@protoc_insertion_point(copy_constructor:Command.SockListen)
}

inline void Command_SockListen::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.backlog_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_SockListen::~Command_SockListen() {
  // @@protoc_insertion_point(destructor:Command.SockListen)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockListen::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_SockListen::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockListen::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockListen)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.backlog_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.backlog_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockListen::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 backlog = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.backlog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockListen::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockListen)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 backlog = 2;
  if (this->_internal_backlog() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_backlog(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockListen)
  return target;
}

size_t Command_SockListen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockListen)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 backlog = 2;
  if (this->_internal_backlog() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_backlog());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockListen::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockListen::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockListen::GetClassData() const { return &_class_data_; }


void Command_SockListen::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockListen*>(&to_msg);
  auto& from = static_cast<const Command_SockListen&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockListen)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_backlog() != 0) {
    _this->_internal_set_backlog(from._internal_backlog());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockListen::CopyFrom(const Command_SockListen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockListen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockListen::IsInitialized() const {
  return true;
}

void Command_SockListen::InternalSwap(Command_SockListen* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockListen, _impl_.backlog_)
      + sizeof(Command_SockListen::_impl_.backlog_)
      - PROTOBUF_FIELD_OFFSET(Command_SockListen, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockListen::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[26]);
}

// ===================================================================

class Command_SockConnect::_Internal {
 public:
};

Command_SockConnect::Command_SockConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockConnect)
}
Command_SockConnect::Command_SockConnect(const Command_SockConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockConnect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_addr().empty()) {
    _this->_impl_.addr_.Set(from._internal_addr(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:Command.SockConnect)
}

inline void Command_SockConnect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_SockConnect::~Command_SockConnect() {
  // @@protoc_insertion_point(destructor:Command.SockConnect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.addr_.Destroy();
}

void Command_SockConnect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockConnect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.addr_.ClearToEmpty();
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockConnect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockConnect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockConnect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes addr = 2;
  if (!this->_internal_addr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockConnect)
  return target;
}

size_t Command_SockConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockConnect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes addr = 2;
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_addr());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockConnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockConnect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockConnect::GetClassData() const { return &_class_data_; }


void Command_SockConnect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockConnect*>(&to_msg);
  auto& from = static_cast<const Command_SockConnect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockConnect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_addr().empty()) {
    _this->_internal_set_addr(from._internal_addr());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockConnect::CopyFrom(const Command_SockConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockConnect::IsInitialized() const {
  return true;
}

void Command_SockConnect::InternalSwap(Command_SockConnect* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.addr_, lhs_arena,
      &other->_impl_.addr_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockConnect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[27]);
}

// ===================================================================

class Command_SockConnectEx::_Internal {
 public:
};

Command_SockConnectEx::Command_SockConnectEx(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockConnectEx)
}
Command_SockConnectEx::Command_SockConnectEx(const Command_SockConnectEx& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockConnectEx* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_addr().empty()) {
    _this->_impl_.addr_.Set(from._internal_addr(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:Command.SockConnectEx)
}

inline void Command_SockConnectEx::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.addr_){}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_SockConnectEx::~Command_SockConnectEx() {
  // @@protoc_insertion_point(destructor:Command.SockConnectEx)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockConnectEx::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.addr_.Destroy();
}

void Command_SockConnectEx::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockConnectEx::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockConnectEx)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.addr_.ClearToEmpty();
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockConnectEx::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockConnectEx::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockConnectEx)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes addr = 2;
  if (!this->_internal_addr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockConnectEx)
  return target;
}

size_t Command_SockConnectEx::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockConnectEx)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes addr = 2;
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_addr());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockConnectEx::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockConnectEx::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockConnectEx::GetClassData() const { return &_class_data_; }


void Command_SockConnectEx::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockConnectEx*>(&to_msg);
  auto& from = static_cast<const Command_SockConnectEx&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockConnectEx)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_addr().empty()) {
    _this->_internal_set_addr(from._internal_addr());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockConnectEx::CopyFrom(const Command_SockConnectEx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockConnectEx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockConnectEx::IsInitialized() const {
  return true;
}

void Command_SockConnectEx::InternalSwap(Command_SockConnectEx* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.addr_, lhs_arena,
      &other->_impl_.addr_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockConnectEx::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[28]);
}

// ===================================================================

class Command_SockShutdown::_Internal {
 public:
};

Command_SockShutdown::Command_SockShutdown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockShutdown)
}
Command_SockShutdown::Command_SockShutdown(const Command_SockShutdown& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockShutdown* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.how_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.how_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.how_));
  // @@protoc_insertion_point(copy_constructor:Command.SockShutdown)
}

inline void Command_SockShutdown::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.how_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_SockShutdown::~Command_SockShutdown() {
  // @@protoc_insertion_point(destructor:Command.SockShutdown)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockShutdown::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_SockShutdown::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockShutdown::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockShutdown)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.how_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.how_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockShutdown::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 how = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.how_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockShutdown::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockShutdown)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 how = 2;
  if (this->_internal_how() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_how(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockShutdown)
  return target;
}

size_t Command_SockShutdown::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockShutdown)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 how = 2;
  if (this->_internal_how() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_how());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockShutdown::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockShutdown::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockShutdown::GetClassData() const { return &_class_data_; }


void Command_SockShutdown::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockShutdown*>(&to_msg);
  auto& from = static_cast<const Command_SockShutdown&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockShutdown)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_how() != 0) {
    _this->_internal_set_how(from._internal_how());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockShutdown::CopyFrom(const Command_SockShutdown& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockShutdown)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockShutdown::IsInitialized() const {
  return true;
}

void Command_SockShutdown::InternalSwap(Command_SockShutdown* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockShutdown, _impl_.how_)
      + sizeof(Command_SockShutdown::_impl_.how_)
      - PROTOBUF_FIELD_OFFSET(Command_SockShutdown, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockShutdown::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[29]);
}

// ===================================================================

class Command_SockSetsockopt::_Internal {
 public:
};

Command_SockSetsockopt::Command_SockSetsockopt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockSetsockopt)
}
Command_SockSetsockopt::Command_SockSetsockopt(const Command_SockSetsockopt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockSetsockopt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.opt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.val_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.val_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_val().empty()) {
    _this->_impl_.val_.Set(from._internal_val(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.opt_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.opt_));
  // @@protoc_insertion_point(copy_constructor:Command.SockSetsockopt)
}

inline void Command_SockSetsockopt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.opt_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.val_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.val_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_SockSetsockopt::~Command_SockSetsockopt() {
  // @@protoc_insertion_point(destructor:Command.SockSetsockopt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockSetsockopt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.val_.Destroy();
}

void Command_SockSetsockopt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockSetsockopt::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockSetsockopt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.val_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.opt_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.opt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockSetsockopt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 opt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_val();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockSetsockopt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockSetsockopt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // uint32 opt = 3;
  if (this->_internal_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_opt(), target);
  }

  // bytes val = 4;
  if (!this->_internal_val().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockSetsockopt)
  return target;
}

size_t Command_SockSetsockopt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockSetsockopt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes val = 4;
  if (!this->_internal_val().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_val());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 opt = 3;
  if (this->_internal_opt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_opt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockSetsockopt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockSetsockopt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockSetsockopt::GetClassData() const { return &_class_data_; }


void Command_SockSetsockopt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockSetsockopt*>(&to_msg);
  auto& from = static_cast<const Command_SockSetsockopt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockSetsockopt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_val().empty()) {
    _this->_internal_set_val(from._internal_val());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_opt() != 0) {
    _this->_internal_set_opt(from._internal_opt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockSetsockopt::CopyFrom(const Command_SockSetsockopt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockSetsockopt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockSetsockopt::IsInitialized() const {
  return true;
}

void Command_SockSetsockopt::InternalSwap(Command_SockSetsockopt* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.val_, lhs_arena,
      &other->_impl_.val_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockSetsockopt, _impl_.opt_)
      + sizeof(Command_SockSetsockopt::_impl_.opt_)
      - PROTOBUF_FIELD_OFFSET(Command_SockSetsockopt, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockSetsockopt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[30]);
}

// ===================================================================

class Command_SockGetsockopt::_Internal {
 public:
};

Command_SockGetsockopt::Command_SockGetsockopt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockGetsockopt)
}
Command_SockGetsockopt::Command_SockGetsockopt(const Command_SockGetsockopt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockGetsockopt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.opt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.opt_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.opt_));
  // @@protoc_insertion_point(copy_constructor:Command.SockGetsockopt)
}

inline void Command_SockGetsockopt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.opt_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_SockGetsockopt::~Command_SockGetsockopt() {
  // @@protoc_insertion_point(destructor:Command.SockGetsockopt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockGetsockopt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_SockGetsockopt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockGetsockopt::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockGetsockopt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.opt_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.opt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockGetsockopt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 opt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockGetsockopt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockGetsockopt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // uint32 opt = 3;
  if (this->_internal_opt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_opt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockGetsockopt)
  return target;
}

size_t Command_SockGetsockopt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockGetsockopt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 opt = 3;
  if (this->_internal_opt() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_opt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockGetsockopt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockGetsockopt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockGetsockopt::GetClassData() const { return &_class_data_; }


void Command_SockGetsockopt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockGetsockopt*>(&to_msg);
  auto& from = static_cast<const Command_SockGetsockopt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockGetsockopt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_opt() != 0) {
    _this->_internal_set_opt(from._internal_opt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockGetsockopt::CopyFrom(const Command_SockGetsockopt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockGetsockopt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockGetsockopt::IsInitialized() const {
  return true;
}

void Command_SockGetsockopt::InternalSwap(Command_SockGetsockopt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockGetsockopt, _impl_.opt_)
      + sizeof(Command_SockGetsockopt::_impl_.opt_)
      - PROTOBUF_FIELD_OFFSET(Command_SockGetsockopt, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockGetsockopt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[31]);
}

// ===================================================================

class Command_SockSend::_Internal {
 public:
};

Command_SockSend::Command_SockSend(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockSend)
}
Command_SockSend::Command_SockSend(const Command_SockSend& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockSend* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.flags_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:Command.SockSend)
}

inline void Command_SockSend::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.flags_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_SockSend::~Command_SockSend() {
  // @@protoc_insertion_point(destructor:Command.SockSend)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockSend::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void Command_SockSend::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockSend::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockSend)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockSend::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockSend::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockSend)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockSend)
  return target;
}

size_t Command_SockSend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockSend)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockSend::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockSend::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockSend::GetClassData() const { return &_class_data_; }


void Command_SockSend::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockSend*>(&to_msg);
  auto& from = static_cast<const Command_SockSend&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockSend)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockSend::CopyFrom(const Command_SockSend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockSend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockSend::IsInitialized() const {
  return true;
}

void Command_SockSend::InternalSwap(Command_SockSend* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockSend, _impl_.flags_)
      + sizeof(Command_SockSend::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(Command_SockSend, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockSend::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[32]);
}

// ===================================================================

class Command_SockSendto::_Internal {
 public:
};

Command_SockSendto::Command_SockSendto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockSendto)
}
Command_SockSendto::Command_SockSendto(const Command_SockSendto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockSendto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.addr_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.flags_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_addr().empty()) {
    _this->_impl_.addr_.Set(from._internal_addr(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:Command.SockSendto)
}

inline void Command_SockSendto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.addr_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.flags_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_SockSendto::~Command_SockSendto() {
  // @@protoc_insertion_point(destructor:Command.SockSendto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockSendto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
  _impl_.addr_.Destroy();
}

void Command_SockSendto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockSendto::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockSendto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.addr_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockSendto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes addr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockSendto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockSendto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  // bytes addr = 4;
  if (!this->_internal_addr().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockSendto)
  return target;
}

size_t Command_SockSendto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockSendto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bytes addr = 4;
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_addr());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockSendto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockSendto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockSendto::GetClassData() const { return &_class_data_; }


void Command_SockSendto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockSendto*>(&to_msg);
  auto& from = static_cast<const Command_SockSendto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockSendto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_addr().empty()) {
    _this->_internal_set_addr(from._internal_addr());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockSendto::CopyFrom(const Command_SockSendto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockSendto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockSendto::IsInitialized() const {
  return true;
}

void Command_SockSendto::InternalSwap(Command_SockSendto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.addr_, lhs_arena,
      &other->_impl_.addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockSendto, _impl_.flags_)
      + sizeof(Command_SockSendto::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(Command_SockSendto, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockSendto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[33]);
}

// ===================================================================

class Command_SockSendall::_Internal {
 public:
};

Command_SockSendall::Command_SockSendall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockSendall)
}
Command_SockSendall::Command_SockSendall(const Command_SockSendall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockSendall* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.flags_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:Command.SockSendall)
}

inline void Command_SockSendall::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.flags_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_SockSendall::~Command_SockSendall() {
  // @@protoc_insertion_point(destructor:Command.SockSendall)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockSendall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void Command_SockSendall::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockSendall::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockSendall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockSendall::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockSendall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockSendall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockSendall)
  return target;
}

size_t Command_SockSendall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockSendall)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockSendall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockSendall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockSendall::GetClassData() const { return &_class_data_; }


void Command_SockSendall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockSendall*>(&to_msg);
  auto& from = static_cast<const Command_SockSendall&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockSendall)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockSendall::CopyFrom(const Command_SockSendall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockSendall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockSendall::IsInitialized() const {
  return true;
}

void Command_SockSendall::InternalSwap(Command_SockSendall* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockSendall, _impl_.flags_)
      + sizeof(Command_SockSendall::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(Command_SockSendall, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockSendall::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[34]);
}

// ===================================================================

class Command_SockSendmsg::_Internal {
 public:
};

Command_SockSendmsg::Command_SockSendmsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockSendmsg)
}
Command_SockSendmsg::Command_SockSendmsg(const Command_SockSendmsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockSendmsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.flags_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:Command.SockSendmsg)
}

inline void Command_SockSendmsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.id_){0u}
    , decltype(_impl_.flags_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Command_SockSendmsg::~Command_SockSendmsg() {
  // @@protoc_insertion_point(destructor:Command.SockSendmsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockSendmsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void Command_SockSendmsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockSendmsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockSendmsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockSendmsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockSendmsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockSendmsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockSendmsg)
  return target;
}

size_t Command_SockSendmsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockSendmsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockSendmsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockSendmsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockSendmsg::GetClassData() const { return &_class_data_; }


void Command_SockSendmsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockSendmsg*>(&to_msg);
  auto& from = static_cast<const Command_SockSendmsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockSendmsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockSendmsg::CopyFrom(const Command_SockSendmsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockSendmsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockSendmsg::IsInitialized() const {
  return true;
}

void Command_SockSendmsg::InternalSwap(Command_SockSendmsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockSendmsg, _impl_.flags_)
      + sizeof(Command_SockSendmsg::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(Command_SockSendmsg, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockSendmsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[35]);
}

// ===================================================================

class Command_SockRecv::_Internal {
 public:
};

Command_SockRecv::Command_SockRecv(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockRecv)
}
Command_SockRecv::Command_SockRecv(const Command_SockRecv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockRecv* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.maxlen_){}
    , decltype(_impl_.flags_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:Command.SockRecv)
}

inline void Command_SockRecv::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.maxlen_){0u}
    , decltype(_impl_.flags_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_SockRecv::~Command_SockRecv() {
  // @@protoc_insertion_point(destructor:Command.SockRecv)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockRecv::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_SockRecv::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockRecv::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockRecv)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockRecv::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxlen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.maxlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockRecv::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockRecv)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 maxlen = 2;
  if (this->_internal_maxlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maxlen(), target);
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockRecv)
  return target;
}

size_t Command_SockRecv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockRecv)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 maxlen = 2;
  if (this->_internal_maxlen() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxlen());
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockRecv::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockRecv::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockRecv::GetClassData() const { return &_class_data_; }


void Command_SockRecv::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockRecv*>(&to_msg);
  auto& from = static_cast<const Command_SockRecv&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockRecv)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_maxlen() != 0) {
    _this->_internal_set_maxlen(from._internal_maxlen());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockRecv::CopyFrom(const Command_SockRecv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockRecv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockRecv::IsInitialized() const {
  return true;
}

void Command_SockRecv::InternalSwap(Command_SockRecv* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockRecv, _impl_.flags_)
      + sizeof(Command_SockRecv::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(Command_SockRecv, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockRecv::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[36]);
}

// ===================================================================

class Command_SockRecvfrom::_Internal {
 public:
};

Command_SockRecvfrom::Command_SockRecvfrom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockRecvfrom)
}
Command_SockRecvfrom::Command_SockRecvfrom(const Command_SockRecvfrom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockRecvfrom* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.maxlen_){}
    , decltype(_impl_.flags_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:Command.SockRecvfrom)
}

inline void Command_SockRecvfrom::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.maxlen_){0u}
    , decltype(_impl_.flags_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_SockRecvfrom::~Command_SockRecvfrom() {
  // @@protoc_insertion_point(destructor:Command.SockRecvfrom)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockRecvfrom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_SockRecvfrom::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockRecvfrom::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockRecvfrom)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockRecvfrom::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxlen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.maxlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockRecvfrom::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockRecvfrom)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 maxlen = 2;
  if (this->_internal_maxlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maxlen(), target);
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockRecvfrom)
  return target;
}

size_t Command_SockRecvfrom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockRecvfrom)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 maxlen = 2;
  if (this->_internal_maxlen() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxlen());
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockRecvfrom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockRecvfrom::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockRecvfrom::GetClassData() const { return &_class_data_; }


void Command_SockRecvfrom::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockRecvfrom*>(&to_msg);
  auto& from = static_cast<const Command_SockRecvfrom&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockRecvfrom)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_maxlen() != 0) {
    _this->_internal_set_maxlen(from._internal_maxlen());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockRecvfrom::CopyFrom(const Command_SockRecvfrom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockRecvfrom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockRecvfrom::IsInitialized() const {
  return true;
}

void Command_SockRecvfrom::InternalSwap(Command_SockRecvfrom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockRecvfrom, _impl_.flags_)
      + sizeof(Command_SockRecvfrom::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(Command_SockRecvfrom, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockRecvfrom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[37]);
}

// ===================================================================

class Command_SockRecvmsg::_Internal {
 public:
};

Command_SockRecvmsg::Command_SockRecvmsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockRecvmsg)
}
Command_SockRecvmsg::Command_SockRecvmsg(const Command_SockRecvmsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockRecvmsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.maxlen_){}
    , decltype(_impl_.ancbufsize_){}
    , decltype(_impl_.flags_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:Command.SockRecvmsg)
}

inline void Command_SockRecvmsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.maxlen_){0u}
    , decltype(_impl_.ancbufsize_){0u}
    , decltype(_impl_.flags_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_SockRecvmsg::~Command_SockRecvmsg() {
  // @@protoc_insertion_point(destructor:Command.SockRecvmsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockRecvmsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_SockRecvmsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockRecvmsg::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockRecvmsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockRecvmsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 maxlen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.maxlen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ancbufsize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ancbufsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockRecvmsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockRecvmsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 maxlen = 2;
  if (this->_internal_maxlen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_maxlen(), target);
  }

  // uint32 ancbufsize = 3;
  if (this->_internal_ancbufsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ancbufsize(), target);
  }

  // uint32 flags = 4;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockRecvmsg)
  return target;
}

size_t Command_SockRecvmsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockRecvmsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 maxlen = 2;
  if (this->_internal_maxlen() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_maxlen());
  }

  // uint32 ancbufsize = 3;
  if (this->_internal_ancbufsize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ancbufsize());
  }

  // uint32 flags = 4;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockRecvmsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockRecvmsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockRecvmsg::GetClassData() const { return &_class_data_; }


void Command_SockRecvmsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockRecvmsg*>(&to_msg);
  auto& from = static_cast<const Command_SockRecvmsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockRecvmsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_maxlen() != 0) {
    _this->_internal_set_maxlen(from._internal_maxlen());
  }
  if (from._internal_ancbufsize() != 0) {
    _this->_internal_set_ancbufsize(from._internal_ancbufsize());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockRecvmsg::CopyFrom(const Command_SockRecvmsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockRecvmsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockRecvmsg::IsInitialized() const {
  return true;
}

void Command_SockRecvmsg::InternalSwap(Command_SockRecvmsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockRecvmsg, _impl_.flags_)
      + sizeof(Command_SockRecvmsg::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(Command_SockRecvmsg, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockRecvmsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[38]);
}

// ===================================================================

class Command_SockRecvInto::_Internal {
 public:
};

Command_SockRecvInto::Command_SockRecvInto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockRecvInto)
}
Command_SockRecvInto::Command_SockRecvInto(const Command_SockRecvInto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockRecvInto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.nbytes_){}
    , decltype(_impl_.flags_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:Command.SockRecvInto)
}

inline void Command_SockRecvInto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.nbytes_){0u}
    , decltype(_impl_.flags_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_SockRecvInto::~Command_SockRecvInto() {
  // @@protoc_insertion_point(destructor:Command.SockRecvInto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockRecvInto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_SockRecvInto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockRecvInto::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockRecvInto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockRecvInto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nbytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.nbytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockRecvInto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockRecvInto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 nbytes = 2;
  if (this->_internal_nbytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nbytes(), target);
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockRecvInto)
  return target;
}

size_t Command_SockRecvInto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockRecvInto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 nbytes = 2;
  if (this->_internal_nbytes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nbytes());
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockRecvInto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockRecvInto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockRecvInto::GetClassData() const { return &_class_data_; }


void Command_SockRecvInto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockRecvInto*>(&to_msg);
  auto& from = static_cast<const Command_SockRecvInto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockRecvInto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_nbytes() != 0) {
    _this->_internal_set_nbytes(from._internal_nbytes());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockRecvInto::CopyFrom(const Command_SockRecvInto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockRecvInto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockRecvInto::IsInitialized() const {
  return true;
}

void Command_SockRecvInto::InternalSwap(Command_SockRecvInto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockRecvInto, _impl_.flags_)
      + sizeof(Command_SockRecvInto::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(Command_SockRecvInto, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockRecvInto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[39]);
}

// ===================================================================

class Command_SockRecvfromInto::_Internal {
 public:
};

Command_SockRecvfromInto::Command_SockRecvfromInto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockRecvfromInto)
}
Command_SockRecvfromInto::Command_SockRecvfromInto(const Command_SockRecvfromInto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockRecvfromInto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.nbytes_){}
    , decltype(_impl_.flags_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:Command.SockRecvfromInto)
}

inline void Command_SockRecvfromInto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.nbytes_){0u}
    , decltype(_impl_.flags_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_SockRecvfromInto::~Command_SockRecvfromInto() {
  // @@protoc_insertion_point(destructor:Command.SockRecvfromInto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockRecvfromInto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_SockRecvfromInto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockRecvfromInto::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockRecvfromInto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockRecvfromInto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nbytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.nbytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockRecvfromInto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockRecvfromInto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 nbytes = 2;
  if (this->_internal_nbytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nbytes(), target);
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockRecvfromInto)
  return target;
}

size_t Command_SockRecvfromInto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockRecvfromInto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 nbytes = 2;
  if (this->_internal_nbytes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nbytes());
  }

  // uint32 flags = 3;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockRecvfromInto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockRecvfromInto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockRecvfromInto::GetClassData() const { return &_class_data_; }


void Command_SockRecvfromInto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockRecvfromInto*>(&to_msg);
  auto& from = static_cast<const Command_SockRecvfromInto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockRecvfromInto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_nbytes() != 0) {
    _this->_internal_set_nbytes(from._internal_nbytes());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockRecvfromInto::CopyFrom(const Command_SockRecvfromInto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockRecvfromInto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockRecvfromInto::IsInitialized() const {
  return true;
}

void Command_SockRecvfromInto::InternalSwap(Command_SockRecvfromInto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockRecvfromInto, _impl_.flags_)
      + sizeof(Command_SockRecvfromInto::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(Command_SockRecvfromInto, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockRecvfromInto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[40]);
}

// ===================================================================

class Command_SockRecvmsgInto::_Internal {
 public:
};

Command_SockRecvmsgInto::Command_SockRecvmsgInto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockRecvmsgInto)
}
Command_SockRecvmsgInto::Command_SockRecvmsgInto(const Command_SockRecvmsgInto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockRecvmsgInto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.nbytes_){}
    , decltype(_impl_.ancbufsize_){}
    , decltype(_impl_.flags_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:Command.SockRecvmsgInto)
}

inline void Command_SockRecvmsgInto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.nbytes_){0u}
    , decltype(_impl_.ancbufsize_){0u}
    , decltype(_impl_.flags_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_SockRecvmsgInto::~Command_SockRecvmsgInto() {
  // @@protoc_insertion_point(destructor:Command.SockRecvmsgInto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockRecvmsgInto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_SockRecvmsgInto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockRecvmsgInto::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockRecvmsgInto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockRecvmsgInto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 nbytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.nbytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ancbufsize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ancbufsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockRecvmsgInto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockRecvmsgInto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 nbytes = 2;
  if (this->_internal_nbytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nbytes(), target);
  }

  // uint32 ancbufsize = 3;
  if (this->_internal_ancbufsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ancbufsize(), target);
  }

  // uint32 flags = 4;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockRecvmsgInto)
  return target;
}

size_t Command_SockRecvmsgInto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockRecvmsgInto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 nbytes = 2;
  if (this->_internal_nbytes() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_nbytes());
  }

  // uint32 ancbufsize = 3;
  if (this->_internal_ancbufsize() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ancbufsize());
  }

  // uint32 flags = 4;
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockRecvmsgInto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockRecvmsgInto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockRecvmsgInto::GetClassData() const { return &_class_data_; }


void Command_SockRecvmsgInto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockRecvmsgInto*>(&to_msg);
  auto& from = static_cast<const Command_SockRecvmsgInto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockRecvmsgInto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_nbytes() != 0) {
    _this->_internal_set_nbytes(from._internal_nbytes());
  }
  if (from._internal_ancbufsize() != 0) {
    _this->_internal_set_ancbufsize(from._internal_ancbufsize());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockRecvmsgInto::CopyFrom(const Command_SockRecvmsgInto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockRecvmsgInto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockRecvmsgInto::IsInitialized() const {
  return true;
}

void Command_SockRecvmsgInto::InternalSwap(Command_SockRecvmsgInto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockRecvmsgInto, _impl_.flags_)
      + sizeof(Command_SockRecvmsgInto::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(Command_SockRecvmsgInto, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockRecvmsgInto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[41]);
}

// ===================================================================

class Command_SockSettimeout::_Internal {
 public:
};

Command_SockSettimeout::Command_SockSettimeout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockSettimeout)
}
Command_SockSettimeout::Command_SockSettimeout(const Command_SockSettimeout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockSettimeout* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timeout_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timeout_, &from._impl_.timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.timeout_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:Command.SockSettimeout)
}

inline void Command_SockSettimeout::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timeout_){0}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_SockSettimeout::~Command_SockSettimeout() {
  // @@protoc_insertion_point(destructor:Command.SockSettimeout)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockSettimeout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_SockSettimeout::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockSettimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockSettimeout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.timeout_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockSettimeout::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double timeout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockSettimeout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockSettimeout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // double timeout = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timeout = this->_internal_timeout();
  uint64_t raw_timeout;
  memcpy(&raw_timeout, &tmp_timeout, sizeof(tmp_timeout));
  if (raw_timeout != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockSettimeout)
  return target;
}

size_t Command_SockSettimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockSettimeout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double timeout = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timeout = this->_internal_timeout();
  uint64_t raw_timeout;
  memcpy(&raw_timeout, &tmp_timeout, sizeof(tmp_timeout));
  if (raw_timeout != 0) {
    total_size += 1 + 8;
  }

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockSettimeout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockSettimeout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockSettimeout::GetClassData() const { return &_class_data_; }


void Command_SockSettimeout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockSettimeout*>(&to_msg);
  auto& from = static_cast<const Command_SockSettimeout&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockSettimeout)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timeout = from._internal_timeout();
  uint64_t raw_timeout;
  memcpy(&raw_timeout, &tmp_timeout, sizeof(tmp_timeout));
  if (raw_timeout != 0) {
    _this->_internal_set_timeout(from._internal_timeout());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockSettimeout::CopyFrom(const Command_SockSettimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockSettimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockSettimeout::IsInitialized() const {
  return true;
}

void Command_SockSettimeout::InternalSwap(Command_SockSettimeout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockSettimeout, _impl_.id_)
      + sizeof(Command_SockSettimeout::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(Command_SockSettimeout, _impl_.timeout_)>(
          reinterpret_cast<char*>(&_impl_.timeout_),
          reinterpret_cast<char*>(&other->_impl_.timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockSettimeout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[42]);
}

// ===================================================================

class Command_SockSetblocking::_Internal {
 public:
};

Command_SockSetblocking::Command_SockSetblocking(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command.SockSetblocking)
}
Command_SockSetblocking::Command_SockSetblocking(const Command_SockSetblocking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command_SockSetblocking* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.blocking_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blocking_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.blocking_));
  // @@protoc_insertion_point(copy_constructor:Command.SockSetblocking)
}

inline void Command_SockSetblocking::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.blocking_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Command_SockSetblocking::~Command_SockSetblocking() {
  // @@protoc_insertion_point(destructor:Command.SockSetblocking)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command_SockSetblocking::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Command_SockSetblocking::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command_SockSetblocking::Clear() {
// @@protoc_insertion_point(message_clear_start:Command.SockSetblocking)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.blocking_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.blocking_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command_SockSetblocking::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blocking = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.blocking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command_SockSetblocking::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command.SockSetblocking)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // bool blocking = 2;
  if (this->_internal_blocking() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_blocking(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command.SockSetblocking)
  return target;
}

size_t Command_SockSetblocking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command.SockSetblocking)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // bool blocking = 2;
  if (this->_internal_blocking() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command_SockSetblocking::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command_SockSetblocking::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command_SockSetblocking::GetClassData() const { return &_class_data_; }


void Command_SockSetblocking::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command_SockSetblocking*>(&to_msg);
  auto& from = static_cast<const Command_SockSetblocking&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command.SockSetblocking)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_blocking() != 0) {
    _this->_internal_set_blocking(from._internal_blocking());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command_SockSetblocking::CopyFrom(const Command_SockSetblocking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command.SockSetblocking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_SockSetblocking::IsInitialized() const {
  return true;
}

void Command_SockSetblocking::InternalSwap(Command_SockSetblocking* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Command_SockSetblocking, _impl_.blocking_)
      + sizeof(Command_SockSetblocking::_impl_.blocking_)
      - PROTOBUF_FIELD_OFFSET(Command_SockSetblocking, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_SockSetblocking::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[43]);
}

// ===================================================================

class Command::_Internal {
 public:
  static const ::Command_SockSocket& sock_socket(const Command* msg);
  static const ::Command_SockSocketpair& sock_socketpair(const Command* msg);
  static const ::Command_SockDup& sock_dup(const Command* msg);
  static const ::Command_SockClose& sock_close(const Command* msg);
  static const ::Command_InetPton& inet_pton(const Command* msg);
  static const ::Command_InetNtop& inet_ntop(const Command* msg);
  static const ::Command_InetAton& inet_aton(const Command* msg);
  static const ::Command_InetNtoa& inet_ntoa(const Command* msg);
  static const ::Command_Htons& htons(const Command* msg);
  static const ::Command_Htonl& htonl(const Command* msg);
  static const ::Command_Ntohs& ntohs(const Command* msg);
  static const ::Command_Ntohl& ntohl(const Command* msg);
  static const ::Command_Getaddrinfo& getaddrinfo(const Command* msg);
  static const ::Command_Getnameinfo& getnameinfo(const Command* msg);
  static const ::Command_IfNameindex& if_nameindex(const Command* msg);
  static const ::Command_IfNametoindex& if_nametoindex(const Command* msg);
  static const ::Command_IfIndextoname& if_indextoname(const Command* msg);
  static const ::Command_Gethostbyname& gethostbyname(const Command* msg);
  static const ::Command_GethostbynameEx& gethostbyname_ex(const Command* msg);
  static const ::Command_Gethostbyaddr& gethostbyaddr(const Command* msg);
  static const ::Command_Getservbyname& getservbyname(const Command* msg);
  static const ::Command_Getservbyport& getservbyport(const Command* msg);
  static const ::Command_SockAccept& sock_accept(const Command* msg);
  static const ::Command_SockBind& sock_bind(const Command* msg);
  static const ::Command_SockListen& sock_listen(const Command* msg);
  static const ::Command_SockConnect& sock_connect(const Command* msg);
  static const ::Command_SockConnectEx& sock_connect_ex(const Command* msg);
  static const ::Command_SockShutdown& sock_shutdown(const Command* msg);
  static const ::Command_SockSetsockopt& sock_setsockopt(const Command* msg);
  static const ::Command_SockGetsockopt& sock_getsockopt(const Command* msg);
  static const ::Command_SockSend& sock_send(const Command* msg);
  static const ::Command_SockSendto& sock_sendto(const Command* msg);
  static const ::Command_SockSendall& sock_sendall(const Command* msg);
  static const ::Command_SockSendmsg& sock_sendmsg(const Command* msg);
  static const ::Command_SockRecv& sock_recv(const Command* msg);
  static const ::Command_SockRecvfrom& sock_recvfrom(const Command* msg);
  static const ::Command_SockRecvmsg& sock_recvmsg(const Command* msg);
  static const ::Command_SockRecvInto& sock_recv_into(const Command* msg);
  static const ::Command_SockRecvfromInto& sock_recvfrom_into(const Command* msg);
  static const ::Command_SockRecvmsgInto& sock_recvmsg_into(const Command* msg);
  static const ::Command_SockSettimeout& sock_settimeout(const Command* msg);
  static const ::Command_SockSetblocking& sock_setblocking(const Command* msg);
};

const ::Command_SockSocket&
Command::_Internal::sock_socket(const Command* msg) {
  return *msg->_impl_.cmd_.sock_socket_;
}
const ::Command_SockSocketpair&
Command::_Internal::sock_socketpair(const Command* msg) {
  return *msg->_impl_.cmd_.sock_socketpair_;
}
const ::Command_SockDup&
Command::_Internal::sock_dup(const Command* msg) {
  return *msg->_impl_.cmd_.sock_dup_;
}
const ::Command_SockClose&
Command::_Internal::sock_close(const Command* msg) {
  return *msg->_impl_.cmd_.sock_close_;
}
const ::Command_InetPton&
Command::_Internal::inet_pton(const Command* msg) {
  return *msg->_impl_.cmd_.inet_pton_;
}
const ::Command_InetNtop&
Command::_Internal::inet_ntop(const Command* msg) {
  return *msg->_impl_.cmd_.inet_ntop_;
}
const ::Command_InetAton&
Command::_Internal::inet_aton(const Command* msg) {
  return *msg->_impl_.cmd_.inet_aton_;
}
const ::Command_InetNtoa&
Command::_Internal::inet_ntoa(const Command* msg) {
  return *msg->_impl_.cmd_.inet_ntoa_;
}
const ::Command_Htons&
Command::_Internal::htons(const Command* msg) {
  return *msg->_impl_.cmd_.htons_;
}
const ::Command_Htonl&
Command::_Internal::htonl(const Command* msg) {
  return *msg->_impl_.cmd_.htonl_;
}
const ::Command_Ntohs&
Command::_Internal::ntohs(const Command* msg) {
  return *msg->_impl_.cmd_.ntohs_;
}
const ::Command_Ntohl&
Command::_Internal::ntohl(const Command* msg) {
  return *msg->_impl_.cmd_.ntohl_;
}
const ::Command_Getaddrinfo&
Command::_Internal::getaddrinfo(const Command* msg) {
  return *msg->_impl_.cmd_.getaddrinfo_;
}
const ::Command_Getnameinfo&
Command::_Internal::getnameinfo(const Command* msg) {
  return *msg->_impl_.cmd_.getnameinfo_;
}
const ::Command_IfNameindex&
Command::_Internal::if_nameindex(const Command* msg) {
  return *msg->_impl_.cmd_.if_nameindex_;
}
const ::Command_IfNametoindex&
Command::_Internal::if_nametoindex(const Command* msg) {
  return *msg->_impl_.cmd_.if_nametoindex_;
}
const ::Command_IfIndextoname&
Command::_Internal::if_indextoname(const Command* msg) {
  return *msg->_impl_.cmd_.if_indextoname_;
}
const ::Command_Gethostbyname&
Command::_Internal::gethostbyname(const Command* msg) {
  return *msg->_impl_.cmd_.gethostbyname_;
}
const ::Command_GethostbynameEx&
Command::_Internal::gethostbyname_ex(const Command* msg) {
  return *msg->_impl_.cmd_.gethostbyname_ex_;
}
const ::Command_Gethostbyaddr&
Command::_Internal::gethostbyaddr(const Command* msg) {
  return *msg->_impl_.cmd_.gethostbyaddr_;
}
const ::Command_Getservbyname&
Command::_Internal::getservbyname(const Command* msg) {
  return *msg->_impl_.cmd_.getservbyname_;
}
const ::Command_Getservbyport&
Command::_Internal::getservbyport(const Command* msg) {
  return *msg->_impl_.cmd_.getservbyport_;
}
const ::Command_SockAccept&
Command::_Internal::sock_accept(const Command* msg) {
  return *msg->_impl_.cmd_.sock_accept_;
}
const ::Command_SockBind&
Command::_Internal::sock_bind(const Command* msg) {
  return *msg->_impl_.cmd_.sock_bind_;
}
const ::Command_SockListen&
Command::_Internal::sock_listen(const Command* msg) {
  return *msg->_impl_.cmd_.sock_listen_;
}
const ::Command_SockConnect&
Command::_Internal::sock_connect(const Command* msg) {
  return *msg->_impl_.cmd_.sock_connect_;
}
const ::Command_SockConnectEx&
Command::_Internal::sock_connect_ex(const Command* msg) {
  return *msg->_impl_.cmd_.sock_connect_ex_;
}
const ::Command_SockShutdown&
Command::_Internal::sock_shutdown(const Command* msg) {
  return *msg->_impl_.cmd_.sock_shutdown_;
}
const ::Command_SockSetsockopt&
Command::_Internal::sock_setsockopt(const Command* msg) {
  return *msg->_impl_.cmd_.sock_setsockopt_;
}
const ::Command_SockGetsockopt&
Command::_Internal::sock_getsockopt(const Command* msg) {
  return *msg->_impl_.cmd_.sock_getsockopt_;
}
const ::Command_SockSend&
Command::_Internal::sock_send(const Command* msg) {
  return *msg->_impl_.cmd_.sock_send_;
}
const ::Command_SockSendto&
Command::_Internal::sock_sendto(const Command* msg) {
  return *msg->_impl_.cmd_.sock_sendto_;
}
const ::Command_SockSendall&
Command::_Internal::sock_sendall(const Command* msg) {
  return *msg->_impl_.cmd_.sock_sendall_;
}
const ::Command_SockSendmsg&
Command::_Internal::sock_sendmsg(const Command* msg) {
  return *msg->_impl_.cmd_.sock_sendmsg_;
}
const ::Command_SockRecv&
Command::_Internal::sock_recv(const Command* msg) {
  return *msg->_impl_.cmd_.sock_recv_;
}
const ::Command_SockRecvfrom&
Command::_Internal::sock_recvfrom(const Command* msg) {
  return *msg->_impl_.cmd_.sock_recvfrom_;
}
const ::Command_SockRecvmsg&
Command::_Internal::sock_recvmsg(const Command* msg) {
  return *msg->_impl_.cmd_.sock_recvmsg_;
}
const ::Command_SockRecvInto&
Command::_Internal::sock_recv_into(const Command* msg) {
  return *msg->_impl_.cmd_.sock_recv_into_;
}
const ::Command_SockRecvfromInto&
Command::_Internal::sock_recvfrom_into(const Command* msg) {
  return *msg->_impl_.cmd_.sock_recvfrom_into_;
}
const ::Command_SockRecvmsgInto&
Command::_Internal::sock_recvmsg_into(const Command* msg) {
  return *msg->_impl_.cmd_.sock_recvmsg_into_;
}
const ::Command_SockSettimeout&
Command::_Internal::sock_settimeout(const Command* msg) {
  return *msg->_impl_.cmd_.sock_settimeout_;
}
const ::Command_SockSetblocking&
Command::_Internal::sock_setblocking(const Command* msg) {
  return *msg->_impl_.cmd_.sock_setblocking_;
}
void Command::set_allocated_sock_socket(::Command_SockSocket* sock_socket) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_socket) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_socket);
    if (message_arena != submessage_arena) {
      sock_socket = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_socket, submessage_arena);
    }
    set_has_sock_socket();
    _impl_.cmd_.sock_socket_ = sock_socket;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_socket)
}
void Command::set_allocated_sock_socketpair(::Command_SockSocketpair* sock_socketpair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_socketpair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_socketpair);
    if (message_arena != submessage_arena) {
      sock_socketpair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_socketpair, submessage_arena);
    }
    set_has_sock_socketpair();
    _impl_.cmd_.sock_socketpair_ = sock_socketpair;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_socketpair)
}
void Command::set_allocated_sock_dup(::Command_SockDup* sock_dup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_dup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_dup);
    if (message_arena != submessage_arena) {
      sock_dup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_dup, submessage_arena);
    }
    set_has_sock_dup();
    _impl_.cmd_.sock_dup_ = sock_dup;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_dup)
}
void Command::set_allocated_sock_close(::Command_SockClose* sock_close) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_close) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_close);
    if (message_arena != submessage_arena) {
      sock_close = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_close, submessage_arena);
    }
    set_has_sock_close();
    _impl_.cmd_.sock_close_ = sock_close;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_close)
}
void Command::set_allocated_inet_pton(::Command_InetPton* inet_pton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (inet_pton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inet_pton);
    if (message_arena != submessage_arena) {
      inet_pton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inet_pton, submessage_arena);
    }
    set_has_inet_pton();
    _impl_.cmd_.inet_pton_ = inet_pton;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.inet_pton)
}
void Command::set_allocated_inet_ntop(::Command_InetNtop* inet_ntop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (inet_ntop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inet_ntop);
    if (message_arena != submessage_arena) {
      inet_ntop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inet_ntop, submessage_arena);
    }
    set_has_inet_ntop();
    _impl_.cmd_.inet_ntop_ = inet_ntop;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.inet_ntop)
}
void Command::set_allocated_inet_aton(::Command_InetAton* inet_aton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (inet_aton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inet_aton);
    if (message_arena != submessage_arena) {
      inet_aton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inet_aton, submessage_arena);
    }
    set_has_inet_aton();
    _impl_.cmd_.inet_aton_ = inet_aton;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.inet_aton)
}
void Command::set_allocated_inet_ntoa(::Command_InetNtoa* inet_ntoa) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (inet_ntoa) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inet_ntoa);
    if (message_arena != submessage_arena) {
      inet_ntoa = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inet_ntoa, submessage_arena);
    }
    set_has_inet_ntoa();
    _impl_.cmd_.inet_ntoa_ = inet_ntoa;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.inet_ntoa)
}
void Command::set_allocated_htons(::Command_Htons* htons) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (htons) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(htons);
    if (message_arena != submessage_arena) {
      htons = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, htons, submessage_arena);
    }
    set_has_htons();
    _impl_.cmd_.htons_ = htons;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.htons)
}
void Command::set_allocated_htonl(::Command_Htonl* htonl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (htonl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(htonl);
    if (message_arena != submessage_arena) {
      htonl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, htonl, submessage_arena);
    }
    set_has_htonl();
    _impl_.cmd_.htonl_ = htonl;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.htonl)
}
void Command::set_allocated_ntohs(::Command_Ntohs* ntohs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (ntohs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ntohs);
    if (message_arena != submessage_arena) {
      ntohs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ntohs, submessage_arena);
    }
    set_has_ntohs();
    _impl_.cmd_.ntohs_ = ntohs;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.ntohs)
}
void Command::set_allocated_ntohl(::Command_Ntohl* ntohl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (ntohl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ntohl);
    if (message_arena != submessage_arena) {
      ntohl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ntohl, submessage_arena);
    }
    set_has_ntohl();
    _impl_.cmd_.ntohl_ = ntohl;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.ntohl)
}
void Command::set_allocated_getaddrinfo(::Command_Getaddrinfo* getaddrinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (getaddrinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(getaddrinfo);
    if (message_arena != submessage_arena) {
      getaddrinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getaddrinfo, submessage_arena);
    }
    set_has_getaddrinfo();
    _impl_.cmd_.getaddrinfo_ = getaddrinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.getaddrinfo)
}
void Command::set_allocated_getnameinfo(::Command_Getnameinfo* getnameinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (getnameinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(getnameinfo);
    if (message_arena != submessage_arena) {
      getnameinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getnameinfo, submessage_arena);
    }
    set_has_getnameinfo();
    _impl_.cmd_.getnameinfo_ = getnameinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.getnameinfo)
}
void Command::set_allocated_if_nameindex(::Command_IfNameindex* if_nameindex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (if_nameindex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(if_nameindex);
    if (message_arena != submessage_arena) {
      if_nameindex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, if_nameindex, submessage_arena);
    }
    set_has_if_nameindex();
    _impl_.cmd_.if_nameindex_ = if_nameindex;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.if_nameindex)
}
void Command::set_allocated_if_nametoindex(::Command_IfNametoindex* if_nametoindex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (if_nametoindex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(if_nametoindex);
    if (message_arena != submessage_arena) {
      if_nametoindex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, if_nametoindex, submessage_arena);
    }
    set_has_if_nametoindex();
    _impl_.cmd_.if_nametoindex_ = if_nametoindex;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.if_nametoindex)
}
void Command::set_allocated_if_indextoname(::Command_IfIndextoname* if_indextoname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (if_indextoname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(if_indextoname);
    if (message_arena != submessage_arena) {
      if_indextoname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, if_indextoname, submessage_arena);
    }
    set_has_if_indextoname();
    _impl_.cmd_.if_indextoname_ = if_indextoname;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.if_indextoname)
}
void Command::set_allocated_gethostbyname(::Command_Gethostbyname* gethostbyname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (gethostbyname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gethostbyname);
    if (message_arena != submessage_arena) {
      gethostbyname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gethostbyname, submessage_arena);
    }
    set_has_gethostbyname();
    _impl_.cmd_.gethostbyname_ = gethostbyname;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.gethostbyname)
}
void Command::set_allocated_gethostbyname_ex(::Command_GethostbynameEx* gethostbyname_ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (gethostbyname_ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gethostbyname_ex);
    if (message_arena != submessage_arena) {
      gethostbyname_ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gethostbyname_ex, submessage_arena);
    }
    set_has_gethostbyname_ex();
    _impl_.cmd_.gethostbyname_ex_ = gethostbyname_ex;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.gethostbyname_ex)
}
void Command::set_allocated_gethostbyaddr(::Command_Gethostbyaddr* gethostbyaddr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (gethostbyaddr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gethostbyaddr);
    if (message_arena != submessage_arena) {
      gethostbyaddr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gethostbyaddr, submessage_arena);
    }
    set_has_gethostbyaddr();
    _impl_.cmd_.gethostbyaddr_ = gethostbyaddr;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.gethostbyaddr)
}
void Command::set_allocated_getservbyname(::Command_Getservbyname* getservbyname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (getservbyname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(getservbyname);
    if (message_arena != submessage_arena) {
      getservbyname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getservbyname, submessage_arena);
    }
    set_has_getservbyname();
    _impl_.cmd_.getservbyname_ = getservbyname;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.getservbyname)
}
void Command::set_allocated_getservbyport(::Command_Getservbyport* getservbyport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (getservbyport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(getservbyport);
    if (message_arena != submessage_arena) {
      getservbyport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getservbyport, submessage_arena);
    }
    set_has_getservbyport();
    _impl_.cmd_.getservbyport_ = getservbyport;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.getservbyport)
}
void Command::set_allocated_sock_accept(::Command_SockAccept* sock_accept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_accept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_accept);
    if (message_arena != submessage_arena) {
      sock_accept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_accept, submessage_arena);
    }
    set_has_sock_accept();
    _impl_.cmd_.sock_accept_ = sock_accept;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_accept)
}
void Command::set_allocated_sock_bind(::Command_SockBind* sock_bind) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_bind) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_bind);
    if (message_arena != submessage_arena) {
      sock_bind = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_bind, submessage_arena);
    }
    set_has_sock_bind();
    _impl_.cmd_.sock_bind_ = sock_bind;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_bind)
}
void Command::set_allocated_sock_listen(::Command_SockListen* sock_listen) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_listen) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_listen);
    if (message_arena != submessage_arena) {
      sock_listen = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_listen, submessage_arena);
    }
    set_has_sock_listen();
    _impl_.cmd_.sock_listen_ = sock_listen;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_listen)
}
void Command::set_allocated_sock_connect(::Command_SockConnect* sock_connect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_connect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_connect);
    if (message_arena != submessage_arena) {
      sock_connect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_connect, submessage_arena);
    }
    set_has_sock_connect();
    _impl_.cmd_.sock_connect_ = sock_connect;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_connect)
}
void Command::set_allocated_sock_connect_ex(::Command_SockConnectEx* sock_connect_ex) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_connect_ex) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_connect_ex);
    if (message_arena != submessage_arena) {
      sock_connect_ex = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_connect_ex, submessage_arena);
    }
    set_has_sock_connect_ex();
    _impl_.cmd_.sock_connect_ex_ = sock_connect_ex;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_connect_ex)
}
void Command::set_allocated_sock_shutdown(::Command_SockShutdown* sock_shutdown) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_shutdown) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_shutdown);
    if (message_arena != submessage_arena) {
      sock_shutdown = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_shutdown, submessage_arena);
    }
    set_has_sock_shutdown();
    _impl_.cmd_.sock_shutdown_ = sock_shutdown;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_shutdown)
}
void Command::set_allocated_sock_setsockopt(::Command_SockSetsockopt* sock_setsockopt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_setsockopt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_setsockopt);
    if (message_arena != submessage_arena) {
      sock_setsockopt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_setsockopt, submessage_arena);
    }
    set_has_sock_setsockopt();
    _impl_.cmd_.sock_setsockopt_ = sock_setsockopt;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_setsockopt)
}
void Command::set_allocated_sock_getsockopt(::Command_SockGetsockopt* sock_getsockopt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_getsockopt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_getsockopt);
    if (message_arena != submessage_arena) {
      sock_getsockopt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_getsockopt, submessage_arena);
    }
    set_has_sock_getsockopt();
    _impl_.cmd_.sock_getsockopt_ = sock_getsockopt;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_getsockopt)
}
void Command::set_allocated_sock_send(::Command_SockSend* sock_send) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_send) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_send);
    if (message_arena != submessage_arena) {
      sock_send = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_send, submessage_arena);
    }
    set_has_sock_send();
    _impl_.cmd_.sock_send_ = sock_send;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_send)
}
void Command::set_allocated_sock_sendto(::Command_SockSendto* sock_sendto) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_sendto) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_sendto);
    if (message_arena != submessage_arena) {
      sock_sendto = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_sendto, submessage_arena);
    }
    set_has_sock_sendto();
    _impl_.cmd_.sock_sendto_ = sock_sendto;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_sendto)
}
void Command::set_allocated_sock_sendall(::Command_SockSendall* sock_sendall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_sendall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_sendall);
    if (message_arena != submessage_arena) {
      sock_sendall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_sendall, submessage_arena);
    }
    set_has_sock_sendall();
    _impl_.cmd_.sock_sendall_ = sock_sendall;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_sendall)
}
void Command::set_allocated_sock_sendmsg(::Command_SockSendmsg* sock_sendmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_sendmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_sendmsg);
    if (message_arena != submessage_arena) {
      sock_sendmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_sendmsg, submessage_arena);
    }
    set_has_sock_sendmsg();
    _impl_.cmd_.sock_sendmsg_ = sock_sendmsg;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_sendmsg)
}
void Command::set_allocated_sock_recv(::Command_SockRecv* sock_recv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_recv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_recv);
    if (message_arena != submessage_arena) {
      sock_recv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_recv, submessage_arena);
    }
    set_has_sock_recv();
    _impl_.cmd_.sock_recv_ = sock_recv;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_recv)
}
void Command::set_allocated_sock_recvfrom(::Command_SockRecvfrom* sock_recvfrom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_recvfrom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_recvfrom);
    if (message_arena != submessage_arena) {
      sock_recvfrom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_recvfrom, submessage_arena);
    }
    set_has_sock_recvfrom();
    _impl_.cmd_.sock_recvfrom_ = sock_recvfrom;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_recvfrom)
}
void Command::set_allocated_sock_recvmsg(::Command_SockRecvmsg* sock_recvmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_recvmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_recvmsg);
    if (message_arena != submessage_arena) {
      sock_recvmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_recvmsg, submessage_arena);
    }
    set_has_sock_recvmsg();
    _impl_.cmd_.sock_recvmsg_ = sock_recvmsg;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_recvmsg)
}
void Command::set_allocated_sock_recv_into(::Command_SockRecvInto* sock_recv_into) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_recv_into) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_recv_into);
    if (message_arena != submessage_arena) {
      sock_recv_into = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_recv_into, submessage_arena);
    }
    set_has_sock_recv_into();
    _impl_.cmd_.sock_recv_into_ = sock_recv_into;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_recv_into)
}
void Command::set_allocated_sock_recvfrom_into(::Command_SockRecvfromInto* sock_recvfrom_into) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_recvfrom_into) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_recvfrom_into);
    if (message_arena != submessage_arena) {
      sock_recvfrom_into = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_recvfrom_into, submessage_arena);
    }
    set_has_sock_recvfrom_into();
    _impl_.cmd_.sock_recvfrom_into_ = sock_recvfrom_into;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_recvfrom_into)
}
void Command::set_allocated_sock_recvmsg_into(::Command_SockRecvmsgInto* sock_recvmsg_into) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_recvmsg_into) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_recvmsg_into);
    if (message_arena != submessage_arena) {
      sock_recvmsg_into = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_recvmsg_into, submessage_arena);
    }
    set_has_sock_recvmsg_into();
    _impl_.cmd_.sock_recvmsg_into_ = sock_recvmsg_into;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_recvmsg_into)
}
void Command::set_allocated_sock_settimeout(::Command_SockSettimeout* sock_settimeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_settimeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_settimeout);
    if (message_arena != submessage_arena) {
      sock_settimeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_settimeout, submessage_arena);
    }
    set_has_sock_settimeout();
    _impl_.cmd_.sock_settimeout_ = sock_settimeout;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_settimeout)
}
void Command::set_allocated_sock_setblocking(::Command_SockSetblocking* sock_setblocking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_cmd();
  if (sock_setblocking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sock_setblocking);
    if (message_arena != submessage_arena) {
      sock_setblocking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sock_setblocking, submessage_arena);
    }
    set_has_sock_setblocking();
    _impl_.cmd_.sock_setblocking_ = sock_setblocking;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.sock_setblocking)
}
Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Command* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cmd_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_cmd();
  switch (from.cmd_case()) {
    case kSockSocket: {
      _this->_internal_mutable_sock_socket()->::Command_SockSocket::MergeFrom(
          from._internal_sock_socket());
      break;
    }
    case kSockSocketpair: {
      _this->_internal_mutable_sock_socketpair()->::Command_SockSocketpair::MergeFrom(
          from._internal_sock_socketpair());
      break;
    }
    case kSockDup: {
      _this->_internal_mutable_sock_dup()->::Command_SockDup::MergeFrom(
          from._internal_sock_dup());
      break;
    }
    case kSockClose: {
      _this->_internal_mutable_sock_close()->::Command_SockClose::MergeFrom(
          from._internal_sock_close());
      break;
    }
    case kInetPton: {
      _this->_internal_mutable_inet_pton()->::Command_InetPton::MergeFrom(
          from._internal_inet_pton());
      break;
    }
    case kInetNtop: {
      _this->_internal_mutable_inet_ntop()->::Command_InetNtop::MergeFrom(
          from._internal_inet_ntop());
      break;
    }
    case kInetAton: {
      _this->_internal_mutable_inet_aton()->::Command_InetAton::MergeFrom(
          from._internal_inet_aton());
      break;
    }
    case kInetNtoa: {
      _this->_internal_mutable_inet_ntoa()->::Command_InetNtoa::MergeFrom(
          from._internal_inet_ntoa());
      break;
    }
    case kHtons: {
      _this->_internal_mutable_htons()->::Command_Htons::MergeFrom(
          from._internal_htons());
      break;
    }
    case kHtonl: {
      _this->_internal_mutable_htonl()->::Command_Htonl::MergeFrom(
          from._internal_htonl());
      break;
    }
    case kNtohs: {
      _this->_internal_mutable_ntohs()->::Command_Ntohs::MergeFrom(
          from._internal_ntohs());
      break;
    }
    case kNtohl: {
      _this->_internal_mutable_ntohl()->::Command_Ntohl::MergeFrom(
          from._internal_ntohl());
      break;
    }
    case kGetaddrinfo: {
      _this->_internal_mutable_getaddrinfo()->::Command_Getaddrinfo::MergeFrom(
          from._internal_getaddrinfo());
      break;
    }
    case kGetnameinfo: {
      _this->_internal_mutable_getnameinfo()->::Command_Getnameinfo::MergeFrom(
          from._internal_getnameinfo());
      break;
    }
    case kIfNameindex: {
      _this->_internal_mutable_if_nameindex()->::Command_IfNameindex::MergeFrom(
          from._internal_if_nameindex());
      break;
    }
    case kIfNametoindex: {
      _this->_internal_mutable_if_nametoindex()->::Command_IfNametoindex::MergeFrom(
          from._internal_if_nametoindex());
      break;
    }
    case kIfIndextoname: {
      _this->_internal_mutable_if_indextoname()->::Command_IfIndextoname::MergeFrom(
          from._internal_if_indextoname());
      break;
    }
    case kGethostbyname: {
      _this->_internal_mutable_gethostbyname()->::Command_Gethostbyname::MergeFrom(
          from._internal_gethostbyname());
      break;
    }
    case kGethostbynameEx: {
      _this->_internal_mutable_gethostbyname_ex()->::Command_GethostbynameEx::MergeFrom(
          from._internal_gethostbyname_ex());
      break;
    }
    case kGethostbyaddr: {
      _this->_internal_mutable_gethostbyaddr()->::Command_Gethostbyaddr::MergeFrom(
          from._internal_gethostbyaddr());
      break;
    }
    case kGetservbyname: {
      _this->_internal_mutable_getservbyname()->::Command_Getservbyname::MergeFrom(
          from._internal_getservbyname());
      break;
    }
    case kGetservbyport: {
      _this->_internal_mutable_getservbyport()->::Command_Getservbyport::MergeFrom(
          from._internal_getservbyport());
      break;
    }
    case kSockAccept: {
      _this->_internal_mutable_sock_accept()->::Command_SockAccept::MergeFrom(
          from._internal_sock_accept());
      break;
    }
    case kSockBind: {
      _this->_internal_mutable_sock_bind()->::Command_SockBind::MergeFrom(
          from._internal_sock_bind());
      break;
    }
    case kSockListen: {
      _this->_internal_mutable_sock_listen()->::Command_SockListen::MergeFrom(
          from._internal_sock_listen());
      break;
    }
    case kSockConnect: {
      _this->_internal_mutable_sock_connect()->::Command_SockConnect::MergeFrom(
          from._internal_sock_connect());
      break;
    }
    case kSockConnectEx: {
      _this->_internal_mutable_sock_connect_ex()->::Command_SockConnectEx::MergeFrom(
          from._internal_sock_connect_ex());
      break;
    }
    case kSockShutdown: {
      _this->_internal_mutable_sock_shutdown()->::Command_SockShutdown::MergeFrom(
          from._internal_sock_shutdown());
      break;
    }
    case kSockSetsockopt: {
      _this->_internal_mutable_sock_setsockopt()->::Command_SockSetsockopt::MergeFrom(
          from._internal_sock_setsockopt());
      break;
    }
    case kSockGetsockopt: {
      _this->_internal_mutable_sock_getsockopt()->::Command_SockGetsockopt::MergeFrom(
          from._internal_sock_getsockopt());
      break;
    }
    case kSockSend: {
      _this->_internal_mutable_sock_send()->::Command_SockSend::MergeFrom(
          from._internal_sock_send());
      break;
    }
    case kSockSendto: {
      _this->_internal_mutable_sock_sendto()->::Command_SockSendto::MergeFrom(
          from._internal_sock_sendto());
      break;
    }
    case kSockSendall: {
      _this->_internal_mutable_sock_sendall()->::Command_SockSendall::MergeFrom(
          from._internal_sock_sendall());
      break;
    }
    case kSockSendmsg: {
      _this->_internal_mutable_sock_sendmsg()->::Command_SockSendmsg::MergeFrom(
          from._internal_sock_sendmsg());
      break;
    }
    case kSockRecv: {
      _this->_internal_mutable_sock_recv()->::Command_SockRecv::MergeFrom(
          from._internal_sock_recv());
      break;
    }
    case kSockRecvfrom: {
      _this->_internal_mutable_sock_recvfrom()->::Command_SockRecvfrom::MergeFrom(
          from._internal_sock_recvfrom());
      break;
    }
    case kSockRecvmsg: {
      _this->_internal_mutable_sock_recvmsg()->::Command_SockRecvmsg::MergeFrom(
          from._internal_sock_recvmsg());
      break;
    }
    case kSockRecvInto: {
      _this->_internal_mutable_sock_recv_into()->::Command_SockRecvInto::MergeFrom(
          from._internal_sock_recv_into());
      break;
    }
    case kSockRecvfromInto: {
      _this->_internal_mutable_sock_recvfrom_into()->::Command_SockRecvfromInto::MergeFrom(
          from._internal_sock_recvfrom_into());
      break;
    }
    case kSockRecvmsgInto: {
      _this->_internal_mutable_sock_recvmsg_into()->::Command_SockRecvmsgInto::MergeFrom(
          from._internal_sock_recvmsg_into());
      break;
    }
    case kSockSettimeout: {
      _this->_internal_mutable_sock_settimeout()->::Command_SockSettimeout::MergeFrom(
          from._internal_sock_settimeout());
      break;
    }
    case kSockSetblocking: {
      _this->_internal_mutable_sock_setblocking()->::Command_SockSetblocking::MergeFrom(
          from._internal_sock_setblocking());
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Command)
}

inline void Command::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cmd_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_cmd();
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:Command)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Command::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_cmd()) {
    clear_cmd();
  }
}

void Command::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Command::clear_cmd() {
// @@protoc_insertion_point(one_of_clear_start:Command)
  switch (cmd_case()) {
    case kSockSocket: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_socket_;
      }
      break;
    }
    case kSockSocketpair: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_socketpair_;
      }
      break;
    }
    case kSockDup: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_dup_;
      }
      break;
    }
    case kSockClose: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_close_;
      }
      break;
    }
    case kInetPton: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.inet_pton_;
      }
      break;
    }
    case kInetNtop: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.inet_ntop_;
      }
      break;
    }
    case kInetAton: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.inet_aton_;
      }
      break;
    }
    case kInetNtoa: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.inet_ntoa_;
      }
      break;
    }
    case kHtons: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.htons_;
      }
      break;
    }
    case kHtonl: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.htonl_;
      }
      break;
    }
    case kNtohs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.ntohs_;
      }
      break;
    }
    case kNtohl: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.ntohl_;
      }
      break;
    }
    case kGetaddrinfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.getaddrinfo_;
      }
      break;
    }
    case kGetnameinfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.getnameinfo_;
      }
      break;
    }
    case kIfNameindex: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.if_nameindex_;
      }
      break;
    }
    case kIfNametoindex: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.if_nametoindex_;
      }
      break;
    }
    case kIfIndextoname: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.if_indextoname_;
      }
      break;
    }
    case kGethostbyname: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.gethostbyname_;
      }
      break;
    }
    case kGethostbynameEx: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.gethostbyname_ex_;
      }
      break;
    }
    case kGethostbyaddr: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.gethostbyaddr_;
      }
      break;
    }
    case kGetservbyname: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.getservbyname_;
      }
      break;
    }
    case kGetservbyport: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.getservbyport_;
      }
      break;
    }
    case kSockAccept: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_accept_;
      }
      break;
    }
    case kSockBind: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_bind_;
      }
      break;
    }
    case kSockListen: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_listen_;
      }
      break;
    }
    case kSockConnect: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_connect_;
      }
      break;
    }
    case kSockConnectEx: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_connect_ex_;
      }
      break;
    }
    case kSockShutdown: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_shutdown_;
      }
      break;
    }
    case kSockSetsockopt: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_setsockopt_;
      }
      break;
    }
    case kSockGetsockopt: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_getsockopt_;
      }
      break;
    }
    case kSockSend: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_send_;
      }
      break;
    }
    case kSockSendto: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_sendto_;
      }
      break;
    }
    case kSockSendall: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_sendall_;
      }
      break;
    }
    case kSockSendmsg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_sendmsg_;
      }
      break;
    }
    case kSockRecv: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_recv_;
      }
      break;
    }
    case kSockRecvfrom: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_recvfrom_;
      }
      break;
    }
    case kSockRecvmsg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_recvmsg_;
      }
      break;
    }
    case kSockRecvInto: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_recv_into_;
      }
      break;
    }
    case kSockRecvfromInto: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_recvfrom_into_;
      }
      break;
    }
    case kSockRecvmsgInto: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_recvmsg_into_;
      }
      break;
    }
    case kSockSettimeout: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_settimeout_;
      }
      break;
    }
    case kSockSetblocking: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.cmd_.sock_setblocking_;
      }
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CMD_NOT_SET;
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:Command)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_cmd();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Command.SockSocket sock_socket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_socket(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockSocketpair sock_socketpair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_socketpair(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockDup sock_dup = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_dup(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockClose sock_close = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_close(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.InetPton inet_pton = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_inet_pton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.InetNtop inet_ntop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_inet_ntop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.InetAton inet_aton = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_inet_aton(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.InetNtoa inet_ntoa = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_inet_ntoa(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.Htons htons = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_htons(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.Htonl htonl = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_htonl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.Ntohs ntohs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ntohs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.Ntohl ntohl = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_ntohl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.Getaddrinfo getaddrinfo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_getaddrinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.Getnameinfo getnameinfo = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_getnameinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.IfNameindex if_nameindex = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_if_nameindex(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.IfNametoindex if_nametoindex = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_if_nametoindex(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.IfIndextoname if_indextoname = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_if_indextoname(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.Gethostbyname gethostbyname = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_gethostbyname(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.GethostbynameEx gethostbyname_ex = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_gethostbyname_ex(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.Gethostbyaddr gethostbyaddr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_gethostbyaddr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.Getservbyname getservbyname = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_getservbyname(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.Getservbyport getservbyport = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_getservbyport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockAccept sock_accept = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_accept(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockBind sock_bind = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_bind(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockListen sock_listen = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_listen(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockConnect sock_connect = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_connect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockConnectEx sock_connect_ex = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_connect_ex(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockShutdown sock_shutdown = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_shutdown(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockSetsockopt sock_setsockopt = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_setsockopt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockGetsockopt sock_getsockopt = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_getsockopt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockSend sock_send = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_send(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockSendto sock_sendto = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_sendto(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockSendall sock_sendall = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_sendall(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockSendmsg sock_sendmsg = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_sendmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockRecv sock_recv = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_recv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockRecvfrom sock_recvfrom = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_recvfrom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockRecvmsg sock_recvmsg = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_recvmsg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockRecvInto sock_recv_into = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_recv_into(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockRecvfromInto sock_recvfrom_into = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_recvfrom_into(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockRecvmsgInto sock_recvmsg_into = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_recvmsg_into(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockSettimeout sock_settimeout = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_settimeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Command.SockSetblocking sock_setblocking = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sock_setblocking(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Command::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Command)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Command.SockSocket sock_socket = 1;
  if (_internal_has_sock_socket()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sock_socket(this),
        _Internal::sock_socket(this).GetCachedSize(), target, stream);
  }

  // .Command.SockSocketpair sock_socketpair = 2;
  if (_internal_has_sock_socketpair()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sock_socketpair(this),
        _Internal::sock_socketpair(this).GetCachedSize(), target, stream);
  }

  // .Command.SockDup sock_dup = 3;
  if (_internal_has_sock_dup()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::sock_dup(this),
        _Internal::sock_dup(this).GetCachedSize(), target, stream);
  }

  // .Command.SockClose sock_close = 4;
  if (_internal_has_sock_close()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::sock_close(this),
        _Internal::sock_close(this).GetCachedSize(), target, stream);
  }

  // .Command.InetPton inet_pton = 5;
  if (_internal_has_inet_pton()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::inet_pton(this),
        _Internal::inet_pton(this).GetCachedSize(), target, stream);
  }

  // .Command.InetNtop inet_ntop = 6;
  if (_internal_has_inet_ntop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::inet_ntop(this),
        _Internal::inet_ntop(this).GetCachedSize(), target, stream);
  }

  // .Command.InetAton inet_aton = 7;
  if (_internal_has_inet_aton()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::inet_aton(this),
        _Internal::inet_aton(this).GetCachedSize(), target, stream);
  }

  // .Command.InetNtoa inet_ntoa = 8;
  if (_internal_has_inet_ntoa()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::inet_ntoa(this),
        _Internal::inet_ntoa(this).GetCachedSize(), target, stream);
  }

  // .Command.Htons htons = 9;
  if (_internal_has_htons()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::htons(this),
        _Internal::htons(this).GetCachedSize(), target, stream);
  }

  // .Command.Htonl htonl = 10;
  if (_internal_has_htonl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::htonl(this),
        _Internal::htonl(this).GetCachedSize(), target, stream);
  }

  // .Command.Ntohs ntohs = 11;
  if (_internal_has_ntohs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::ntohs(this),
        _Internal::ntohs(this).GetCachedSize(), target, stream);
  }

  // .Command.Ntohl ntohl = 12;
  if (_internal_has_ntohl()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::ntohl(this),
        _Internal::ntohl(this).GetCachedSize(), target, stream);
  }

  // .Command.Getaddrinfo getaddrinfo = 13;
  if (_internal_has_getaddrinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::getaddrinfo(this),
        _Internal::getaddrinfo(this).GetCachedSize(), target, stream);
  }

  // .Command.Getnameinfo getnameinfo = 14;
  if (_internal_has_getnameinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::getnameinfo(this),
        _Internal::getnameinfo(this).GetCachedSize(), target, stream);
  }

  // .Command.IfNameindex if_nameindex = 15;
  if (_internal_has_if_nameindex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::if_nameindex(this),
        _Internal::if_nameindex(this).GetCachedSize(), target, stream);
  }

  // .Command.IfNametoindex if_nametoindex = 16;
  if (_internal_has_if_nametoindex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::if_nametoindex(this),
        _Internal::if_nametoindex(this).GetCachedSize(), target, stream);
  }

  // .Command.IfIndextoname if_indextoname = 17;
  if (_internal_has_if_indextoname()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::if_indextoname(this),
        _Internal::if_indextoname(this).GetCachedSize(), target, stream);
  }

  // .Command.Gethostbyname gethostbyname = 18;
  if (_internal_has_gethostbyname()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::gethostbyname(this),
        _Internal::gethostbyname(this).GetCachedSize(), target, stream);
  }

  // .Command.GethostbynameEx gethostbyname_ex = 19;
  if (_internal_has_gethostbyname_ex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::gethostbyname_ex(this),
        _Internal::gethostbyname_ex(this).GetCachedSize(), target, stream);
  }

  // .Command.Gethostbyaddr gethostbyaddr = 20;
  if (_internal_has_gethostbyaddr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::gethostbyaddr(this),
        _Internal::gethostbyaddr(this).GetCachedSize(), target, stream);
  }

  // .Command.Getservbyname getservbyname = 21;
  if (_internal_has_getservbyname()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::getservbyname(this),
        _Internal::getservbyname(this).GetCachedSize(), target, stream);
  }

  // .Command.Getservbyport getservbyport = 22;
  if (_internal_has_getservbyport()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::getservbyport(this),
        _Internal::getservbyport(this).GetCachedSize(), target, stream);
  }

  // .Command.SockAccept sock_accept = 23;
  if (_internal_has_sock_accept()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::sock_accept(this),
        _Internal::sock_accept(this).GetCachedSize(), target, stream);
  }

  // .Command.SockBind sock_bind = 24;
  if (_internal_has_sock_bind()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::sock_bind(this),
        _Internal::sock_bind(this).GetCachedSize(), target, stream);
  }

  // .Command.SockListen sock_listen = 25;
  if (_internal_has_sock_listen()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::sock_listen(this),
        _Internal::sock_listen(this).GetCachedSize(), target, stream);
  }

  // .Command.SockConnect sock_connect = 26;
  if (_internal_has_sock_connect()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::sock_connect(this),
        _Internal::sock_connect(this).GetCachedSize(), target, stream);
  }

  // .Command.SockConnectEx sock_connect_ex = 27;
  if (_internal_has_sock_connect_ex()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::sock_connect_ex(this),
        _Internal::sock_connect_ex(this).GetCachedSize(), target, stream);
  }

  // .Command.SockShutdown sock_shutdown = 28;
  if (_internal_has_sock_shutdown()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::sock_shutdown(this),
        _Internal::sock_shutdown(this).GetCachedSize(), target, stream);
  }

  // .Command.SockSetsockopt sock_setsockopt = 29;
  if (_internal_has_sock_setsockopt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::sock_setsockopt(this),
        _Internal::sock_setsockopt(this).GetCachedSize(), target, stream);
  }

  // .Command.SockGetsockopt sock_getsockopt = 30;
  if (_internal_has_sock_getsockopt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::sock_getsockopt(this),
        _Internal::sock_getsockopt(this).GetCachedSize(), target, stream);
  }

  // .Command.SockSend sock_send = 31;
  if (_internal_has_sock_send()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::sock_send(this),
        _Internal::sock_send(this).GetCachedSize(), target, stream);
  }

  // .Command.SockSendto sock_sendto = 32;
  if (_internal_has_sock_sendto()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::sock_sendto(this),
        _Internal::sock_sendto(this).GetCachedSize(), target, stream);
  }

  // .Command.SockSendall sock_sendall = 33;
  if (_internal_has_sock_sendall()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::sock_sendall(this),
        _Internal::sock_sendall(this).GetCachedSize(), target, stream);
  }

  // .Command.SockSendmsg sock_sendmsg = 34;
  if (_internal_has_sock_sendmsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::sock_sendmsg(this),
        _Internal::sock_sendmsg(this).GetCachedSize(), target, stream);
  }

  // .Command.SockRecv sock_recv = 35;
  if (_internal_has_sock_recv()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::sock_recv(this),
        _Internal::sock_recv(this).GetCachedSize(), target, stream);
  }

  // .Command.SockRecvfrom sock_recvfrom = 36;
  if (_internal_has_sock_recvfrom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::sock_recvfrom(this),
        _Internal::sock_recvfrom(this).GetCachedSize(), target, stream);
  }

  // .Command.SockRecvmsg sock_recvmsg = 37;
  if (_internal_has_sock_recvmsg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::sock_recvmsg(this),
        _Internal::sock_recvmsg(this).GetCachedSize(), target, stream);
  }

  // .Command.SockRecvInto sock_recv_into = 38;
  if (_internal_has_sock_recv_into()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::sock_recv_into(this),
        _Internal::sock_recv_into(this).GetCachedSize(), target, stream);
  }

  // .Command.SockRecvfromInto sock_recvfrom_into = 39;
  if (_internal_has_sock_recvfrom_into()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::sock_recvfrom_into(this),
        _Internal::sock_recvfrom_into(this).GetCachedSize(), target, stream);
  }

  // .Command.SockRecvmsgInto sock_recvmsg_into = 40;
  if (_internal_has_sock_recvmsg_into()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::sock_recvmsg_into(this),
        _Internal::sock_recvmsg_into(this).GetCachedSize(), target, stream);
  }

  // .Command.SockSettimeout sock_settimeout = 41;
  if (_internal_has_sock_settimeout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::sock_settimeout(this),
        _Internal::sock_settimeout(this).GetCachedSize(), target, stream);
  }

  // .Command.SockSetblocking sock_setblocking = 42;
  if (_internal_has_sock_setblocking()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::sock_setblocking(this),
        _Internal::sock_setblocking(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (cmd_case()) {
    // .Command.SockSocket sock_socket = 1;
    case kSockSocket: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_socket_);
      break;
    }
    // .Command.SockSocketpair sock_socketpair = 2;
    case kSockSocketpair: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_socketpair_);
      break;
    }
    // .Command.SockDup sock_dup = 3;
    case kSockDup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_dup_);
      break;
    }
    // .Command.SockClose sock_close = 4;
    case kSockClose: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_close_);
      break;
    }
    // .Command.InetPton inet_pton = 5;
    case kInetPton: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.inet_pton_);
      break;
    }
    // .Command.InetNtop inet_ntop = 6;
    case kInetNtop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.inet_ntop_);
      break;
    }
    // .Command.InetAton inet_aton = 7;
    case kInetAton: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.inet_aton_);
      break;
    }
    // .Command.InetNtoa inet_ntoa = 8;
    case kInetNtoa: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.inet_ntoa_);
      break;
    }
    // .Command.Htons htons = 9;
    case kHtons: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.htons_);
      break;
    }
    // .Command.Htonl htonl = 10;
    case kHtonl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.htonl_);
      break;
    }
    // .Command.Ntohs ntohs = 11;
    case kNtohs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.ntohs_);
      break;
    }
    // .Command.Ntohl ntohl = 12;
    case kNtohl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.ntohl_);
      break;
    }
    // .Command.Getaddrinfo getaddrinfo = 13;
    case kGetaddrinfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.getaddrinfo_);
      break;
    }
    // .Command.Getnameinfo getnameinfo = 14;
    case kGetnameinfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.getnameinfo_);
      break;
    }
    // .Command.IfNameindex if_nameindex = 15;
    case kIfNameindex: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.if_nameindex_);
      break;
    }
    // .Command.IfNametoindex if_nametoindex = 16;
    case kIfNametoindex: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.if_nametoindex_);
      break;
    }
    // .Command.IfIndextoname if_indextoname = 17;
    case kIfIndextoname: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.if_indextoname_);
      break;
    }
    // .Command.Gethostbyname gethostbyname = 18;
    case kGethostbyname: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.gethostbyname_);
      break;
    }
    // .Command.GethostbynameEx gethostbyname_ex = 19;
    case kGethostbynameEx: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.gethostbyname_ex_);
      break;
    }
    // .Command.Gethostbyaddr gethostbyaddr = 20;
    case kGethostbyaddr: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.gethostbyaddr_);
      break;
    }
    // .Command.Getservbyname getservbyname = 21;
    case kGetservbyname: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.getservbyname_);
      break;
    }
    // .Command.Getservbyport getservbyport = 22;
    case kGetservbyport: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.getservbyport_);
      break;
    }
    // .Command.SockAccept sock_accept = 23;
    case kSockAccept: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_accept_);
      break;
    }
    // .Command.SockBind sock_bind = 24;
    case kSockBind: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_bind_);
      break;
    }
    // .Command.SockListen sock_listen = 25;
    case kSockListen: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_listen_);
      break;
    }
    // .Command.SockConnect sock_connect = 26;
    case kSockConnect: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_connect_);
      break;
    }
    // .Command.SockConnectEx sock_connect_ex = 27;
    case kSockConnectEx: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_connect_ex_);
      break;
    }
    // .Command.SockShutdown sock_shutdown = 28;
    case kSockShutdown: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_shutdown_);
      break;
    }
    // .Command.SockSetsockopt sock_setsockopt = 29;
    case kSockSetsockopt: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_setsockopt_);
      break;
    }
    // .Command.SockGetsockopt sock_getsockopt = 30;
    case kSockGetsockopt: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_getsockopt_);
      break;
    }
    // .Command.SockSend sock_send = 31;
    case kSockSend: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_send_);
      break;
    }
    // .Command.SockSendto sock_sendto = 32;
    case kSockSendto: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_sendto_);
      break;
    }
    // .Command.SockSendall sock_sendall = 33;
    case kSockSendall: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_sendall_);
      break;
    }
    // .Command.SockSendmsg sock_sendmsg = 34;
    case kSockSendmsg: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_sendmsg_);
      break;
    }
    // .Command.SockRecv sock_recv = 35;
    case kSockRecv: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_recv_);
      break;
    }
    // .Command.SockRecvfrom sock_recvfrom = 36;
    case kSockRecvfrom: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_recvfrom_);
      break;
    }
    // .Command.SockRecvmsg sock_recvmsg = 37;
    case kSockRecvmsg: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_recvmsg_);
      break;
    }
    // .Command.SockRecvInto sock_recv_into = 38;
    case kSockRecvInto: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_recv_into_);
      break;
    }
    // .Command.SockRecvfromInto sock_recvfrom_into = 39;
    case kSockRecvfromInto: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_recvfrom_into_);
      break;
    }
    // .Command.SockRecvmsgInto sock_recvmsg_into = 40;
    case kSockRecvmsgInto: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_recvmsg_into_);
      break;
    }
    // .Command.SockSettimeout sock_settimeout = 41;
    case kSockSettimeout: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_settimeout_);
      break;
    }
    // .Command.SockSetblocking sock_setblocking = 42;
    case kSockSetblocking: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_.sock_setblocking_);
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Command::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command::GetClassData() const { return &_class_data_; }


void Command::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Command*>(&to_msg);
  auto& from = static_cast<const Command&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Command)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.cmd_case()) {
    case kSockSocket: {
      _this->_internal_mutable_sock_socket()->::Command_SockSocket::MergeFrom(
          from._internal_sock_socket());
      break;
    }
    case kSockSocketpair: {
      _this->_internal_mutable_sock_socketpair()->::Command_SockSocketpair::MergeFrom(
          from._internal_sock_socketpair());
      break;
    }
    case kSockDup: {
      _this->_internal_mutable_sock_dup()->::Command_SockDup::MergeFrom(
          from._internal_sock_dup());
      break;
    }
    case kSockClose: {
      _this->_internal_mutable_sock_close()->::Command_SockClose::MergeFrom(
          from._internal_sock_close());
      break;
    }
    case kInetPton: {
      _this->_internal_mutable_inet_pton()->::Command_InetPton::MergeFrom(
          from._internal_inet_pton());
      break;
    }
    case kInetNtop: {
      _this->_internal_mutable_inet_ntop()->::Command_InetNtop::MergeFrom(
          from._internal_inet_ntop());
      break;
    }
    case kInetAton: {
      _this->_internal_mutable_inet_aton()->::Command_InetAton::MergeFrom(
          from._internal_inet_aton());
      break;
    }
    case kInetNtoa: {
      _this->_internal_mutable_inet_ntoa()->::Command_InetNtoa::MergeFrom(
          from._internal_inet_ntoa());
      break;
    }
    case kHtons: {
      _this->_internal_mutable_htons()->::Command_Htons::MergeFrom(
          from._internal_htons());
      break;
    }
    case kHtonl: {
      _this->_internal_mutable_htonl()->::Command_Htonl::MergeFrom(
          from._internal_htonl());
      break;
    }
    case kNtohs: {
      _this->_internal_mutable_ntohs()->::Command_Ntohs::MergeFrom(
          from._internal_ntohs());
      break;
    }
    case kNtohl: {
      _this->_internal_mutable_ntohl()->::Command_Ntohl::MergeFrom(
          from._internal_ntohl());
      break;
    }
    case kGetaddrinfo: {
      _this->_internal_mutable_getaddrinfo()->::Command_Getaddrinfo::MergeFrom(
          from._internal_getaddrinfo());
      break;
    }
    case kGetnameinfo: {
      _this->_internal_mutable_getnameinfo()->::Command_Getnameinfo::MergeFrom(
          from._internal_getnameinfo());
      break;
    }
    case kIfNameindex: {
      _this->_internal_mutable_if_nameindex()->::Command_IfNameindex::MergeFrom(
          from._internal_if_nameindex());
      break;
    }
    case kIfNametoindex: {
      _this->_internal_mutable_if_nametoindex()->::Command_IfNametoindex::MergeFrom(
          from._internal_if_nametoindex());
      break;
    }
    case kIfIndextoname: {
      _this->_internal_mutable_if_indextoname()->::Command_IfIndextoname::MergeFrom(
          from._internal_if_indextoname());
      break;
    }
    case kGethostbyname: {
      _this->_internal_mutable_gethostbyname()->::Command_Gethostbyname::MergeFrom(
          from._internal_gethostbyname());
      break;
    }
    case kGethostbynameEx: {
      _this->_internal_mutable_gethostbyname_ex()->::Command_GethostbynameEx::MergeFrom(
          from._internal_gethostbyname_ex());
      break;
    }
    case kGethostbyaddr: {
      _this->_internal_mutable_gethostbyaddr()->::Command_Gethostbyaddr::MergeFrom(
          from._internal_gethostbyaddr());
      break;
    }
    case kGetservbyname: {
      _this->_internal_mutable_getservbyname()->::Command_Getservbyname::MergeFrom(
          from._internal_getservbyname());
      break;
    }
    case kGetservbyport: {
      _this->_internal_mutable_getservbyport()->::Command_Getservbyport::MergeFrom(
          from._internal_getservbyport());
      break;
    }
    case kSockAccept: {
      _this->_internal_mutable_sock_accept()->::Command_SockAccept::MergeFrom(
          from._internal_sock_accept());
      break;
    }
    case kSockBind: {
      _this->_internal_mutable_sock_bind()->::Command_SockBind::MergeFrom(
          from._internal_sock_bind());
      break;
    }
    case kSockListen: {
      _this->_internal_mutable_sock_listen()->::Command_SockListen::MergeFrom(
          from._internal_sock_listen());
      break;
    }
    case kSockConnect: {
      _this->_internal_mutable_sock_connect()->::Command_SockConnect::MergeFrom(
          from._internal_sock_connect());
      break;
    }
    case kSockConnectEx: {
      _this->_internal_mutable_sock_connect_ex()->::Command_SockConnectEx::MergeFrom(
          from._internal_sock_connect_ex());
      break;
    }
    case kSockShutdown: {
      _this->_internal_mutable_sock_shutdown()->::Command_SockShutdown::MergeFrom(
          from._internal_sock_shutdown());
      break;
    }
    case kSockSetsockopt: {
      _this->_internal_mutable_sock_setsockopt()->::Command_SockSetsockopt::MergeFrom(
          from._internal_sock_setsockopt());
      break;
    }
    case kSockGetsockopt: {
      _this->_internal_mutable_sock_getsockopt()->::Command_SockGetsockopt::MergeFrom(
          from._internal_sock_getsockopt());
      break;
    }
    case kSockSend: {
      _this->_internal_mutable_sock_send()->::Command_SockSend::MergeFrom(
          from._internal_sock_send());
      break;
    }
    case kSockSendto: {
      _this->_internal_mutable_sock_sendto()->::Command_SockSendto::MergeFrom(
          from._internal_sock_sendto());
      break;
    }
    case kSockSendall: {
      _this->_internal_mutable_sock_sendall()->::Command_SockSendall::MergeFrom(
          from._internal_sock_sendall());
      break;
    }
    case kSockSendmsg: {
      _this->_internal_mutable_sock_sendmsg()->::Command_SockSendmsg::MergeFrom(
          from._internal_sock_sendmsg());
      break;
    }
    case kSockRecv: {
      _this->_internal_mutable_sock_recv()->::Command_SockRecv::MergeFrom(
          from._internal_sock_recv());
      break;
    }
    case kSockRecvfrom: {
      _this->_internal_mutable_sock_recvfrom()->::Command_SockRecvfrom::MergeFrom(
          from._internal_sock_recvfrom());
      break;
    }
    case kSockRecvmsg: {
      _this->_internal_mutable_sock_recvmsg()->::Command_SockRecvmsg::MergeFrom(
          from._internal_sock_recvmsg());
      break;
    }
    case kSockRecvInto: {
      _this->_internal_mutable_sock_recv_into()->::Command_SockRecvInto::MergeFrom(
          from._internal_sock_recv_into());
      break;
    }
    case kSockRecvfromInto: {
      _this->_internal_mutable_sock_recvfrom_into()->::Command_SockRecvfromInto::MergeFrom(
          from._internal_sock_recvfrom_into());
      break;
    }
    case kSockRecvmsgInto: {
      _this->_internal_mutable_sock_recvmsg_into()->::Command_SockRecvmsgInto::MergeFrom(
          from._internal_sock_recvmsg_into());
      break;
    }
    case kSockSettimeout: {
      _this->_internal_mutable_sock_settimeout()->::Command_SockSettimeout::MergeFrom(
          from._internal_sock_settimeout());
      break;
    }
    case kSockSetblocking: {
      _this->_internal_mutable_sock_setblocking()->::Command_SockSetblocking::MergeFrom(
          from._internal_sock_setblocking());
      break;
    }
    case CMD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.cmd_, other->_impl_.cmd_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[44]);
}

// ===================================================================

class Program::_Internal {
 public:
  static const ::Header& init(const Program* msg);
};

const ::Header&
Program::_Internal::init(const Program* msg) {
  return *msg->_impl_.init_;
}
Program::Program(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Program)
}
Program::Program(const Program& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Program* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cmds_){from._impl_.cmds_}
    , decltype(_impl_.init_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_init()) {
    _this->_impl_.init_ = new ::Header(*from._impl_.init_);
  }
  // @@protoc_insertion_point(copy_constructor:Program)
}

inline void Program::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cmds_){arena}
    , decltype(_impl_.init_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Program::~Program() {
  // @@protoc_insertion_point(destructor:Program)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Program::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cmds_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.init_;
}

void Program::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Program::Clear() {
// @@protoc_insertion_point(message_clear_start:Program)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cmds_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.init_ != nullptr) {
    delete _impl_.init_;
  }
  _impl_.init_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Program::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Header init = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_init(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Command cmds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cmds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Program::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Program)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Header init = 1;
  if (this->_internal_has_init()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::init(this),
        _Internal::init(this).GetCachedSize(), target, stream);
  }

  // repeated .Command cmds = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cmds_size()); i < n; i++) {
    const auto& repfield = this->_internal_cmds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Program)
  return target;
}

size_t Program::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Program)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Command cmds = 2;
  total_size += 1UL * this->_internal_cmds_size();
  for (const auto& msg : this->_impl_.cmds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Header init = 1;
  if (this->_internal_has_init()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.init_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Program::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Program::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Program::GetClassData() const { return &_class_data_; }


void Program::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Program*>(&to_msg);
  auto& from = static_cast<const Program&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Program)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cmds_.MergeFrom(from._impl_.cmds_);
  if (from._internal_has_init()) {
    _this->_internal_mutable_init()->::Header::MergeFrom(
        from._internal_init());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Program::CopyFrom(const Program& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Program)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Program::IsInitialized() const {
  return true;
}

void Program::InternalSwap(Program* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cmds_.InternalSwap(&other->_impl_.cmds_);
  swap(_impl_.init_, other->_impl_.init_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Program::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_socket_5fapi_2eproto_getter, &descriptor_table_socket_5fapi_2eproto_once,
      file_level_metadata_socket_5fapi_2eproto[45]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Header_SockInit*
Arena::CreateMaybeMessage< ::Header_SockInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Header_SockInit >(arena);
}
template<> PROTOBUF_NOINLINE ::Header*
Arena::CreateMaybeMessage< ::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockSocket*
Arena::CreateMaybeMessage< ::Command_SockSocket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockSocket >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockSocketpair*
Arena::CreateMaybeMessage< ::Command_SockSocketpair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockSocketpair >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockDup*
Arena::CreateMaybeMessage< ::Command_SockDup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockDup >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockClose*
Arena::CreateMaybeMessage< ::Command_SockClose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockClose >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_InetPton*
Arena::CreateMaybeMessage< ::Command_InetPton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_InetPton >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_InetNtop*
Arena::CreateMaybeMessage< ::Command_InetNtop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_InetNtop >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_InetAton*
Arena::CreateMaybeMessage< ::Command_InetAton >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_InetAton >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_InetNtoa*
Arena::CreateMaybeMessage< ::Command_InetNtoa >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_InetNtoa >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Htons*
Arena::CreateMaybeMessage< ::Command_Htons >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Htons >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Htonl*
Arena::CreateMaybeMessage< ::Command_Htonl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Htonl >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Ntohs*
Arena::CreateMaybeMessage< ::Command_Ntohs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Ntohs >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Ntohl*
Arena::CreateMaybeMessage< ::Command_Ntohl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Ntohl >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Getaddrinfo*
Arena::CreateMaybeMessage< ::Command_Getaddrinfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Getaddrinfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Getnameinfo*
Arena::CreateMaybeMessage< ::Command_Getnameinfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Getnameinfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_IfNameindex*
Arena::CreateMaybeMessage< ::Command_IfNameindex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_IfNameindex >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_IfNametoindex*
Arena::CreateMaybeMessage< ::Command_IfNametoindex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_IfNametoindex >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_IfIndextoname*
Arena::CreateMaybeMessage< ::Command_IfIndextoname >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_IfIndextoname >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Gethostbyname*
Arena::CreateMaybeMessage< ::Command_Gethostbyname >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Gethostbyname >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_GethostbynameEx*
Arena::CreateMaybeMessage< ::Command_GethostbynameEx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_GethostbynameEx >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Gethostbyaddr*
Arena::CreateMaybeMessage< ::Command_Gethostbyaddr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Gethostbyaddr >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Getservbyname*
Arena::CreateMaybeMessage< ::Command_Getservbyname >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Getservbyname >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_Getservbyport*
Arena::CreateMaybeMessage< ::Command_Getservbyport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_Getservbyport >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockAccept*
Arena::CreateMaybeMessage< ::Command_SockAccept >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockAccept >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockBind*
Arena::CreateMaybeMessage< ::Command_SockBind >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockBind >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockListen*
Arena::CreateMaybeMessage< ::Command_SockListen >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockListen >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockConnect*
Arena::CreateMaybeMessage< ::Command_SockConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockConnectEx*
Arena::CreateMaybeMessage< ::Command_SockConnectEx >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockConnectEx >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockShutdown*
Arena::CreateMaybeMessage< ::Command_SockShutdown >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockShutdown >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockSetsockopt*
Arena::CreateMaybeMessage< ::Command_SockSetsockopt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockSetsockopt >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockGetsockopt*
Arena::CreateMaybeMessage< ::Command_SockGetsockopt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockGetsockopt >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockSend*
Arena::CreateMaybeMessage< ::Command_SockSend >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockSend >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockSendto*
Arena::CreateMaybeMessage< ::Command_SockSendto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockSendto >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockSendall*
Arena::CreateMaybeMessage< ::Command_SockSendall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockSendall >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockSendmsg*
Arena::CreateMaybeMessage< ::Command_SockSendmsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockSendmsg >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockRecv*
Arena::CreateMaybeMessage< ::Command_SockRecv >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockRecv >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockRecvfrom*
Arena::CreateMaybeMessage< ::Command_SockRecvfrom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockRecvfrom >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockRecvmsg*
Arena::CreateMaybeMessage< ::Command_SockRecvmsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockRecvmsg >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockRecvInto*
Arena::CreateMaybeMessage< ::Command_SockRecvInto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockRecvInto >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockRecvfromInto*
Arena::CreateMaybeMessage< ::Command_SockRecvfromInto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockRecvfromInto >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockRecvmsgInto*
Arena::CreateMaybeMessage< ::Command_SockRecvmsgInto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockRecvmsgInto >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockSettimeout*
Arena::CreateMaybeMessage< ::Command_SockSettimeout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockSettimeout >(arena);
}
template<> PROTOBUF_NOINLINE ::Command_SockSetblocking*
Arena::CreateMaybeMessage< ::Command_SockSetblocking >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command_SockSetblocking >(arena);
}
template<> PROTOBUF_NOINLINE ::Command*
Arena::CreateMaybeMessage< ::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::Program*
Arena::CreateMaybeMessage< ::Program >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Program >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
